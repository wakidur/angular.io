{
  "version": 3,
  "file": "modal.js",
  "sources": [
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/providers/modal.ts"
  ],
  "sourcesContent": [
    "import { ComponentRef } from '@angular/core';\n\nimport { Overlay } from '../overlay/index';\nimport { Class } from '../framework/utils';\nimport { OverlayConfig, ContainerContent } from '../models/tokens';\nimport { DialogRef } from '../models/dialog-ref';\nimport { ModalControllingContextBuilder } from '../models/overlay-context';\n\nexport function unsupportedDropInError(dropInName: string): Error {\n  return new Error(`Unsupported Drop-In ${dropInName}`);\n}\n\nexport abstract class Modal {\n  constructor(public overlay: Overlay) { }\n\n\n  alert(): ModalControllingContextBuilder<any> {\n    throw unsupportedDropInError('alert');\n  }\n\n  prompt(): ModalControllingContextBuilder<any> {\n    throw unsupportedDropInError('prompt');\n  }\n\n  confirm(): ModalControllingContextBuilder<any> {\n    throw unsupportedDropInError('confirm');\n  }\n\n  /**\n   * Opens a modal window inside an existing component.\n   * @param content The content to display, either string, template ref or a component.\n   * @param config Additional settings.\n   */\n  open(content: ContainerContent, config?: OverlayConfig): DialogRef<any> {\n    config = config || {} as any;\n    let dialogs = this.overlay.open(config, this.constructor);\n\n    if (dialogs.length > 1) {\n      console.warn(`Attempt to open more then 1 overlay detected.\n      Multiple modal copies are not supported at the moment, \n      only the first viewContainer will display.`);\n    }\n    // TODO:  Currently supporting 1 view container, hence working on dialogs[0].\n    //        upgrade to multiple containers.\n    return this.create(dialogs[0], content)\n  }\n\n  /**\n   * A Hook that enables derived classes to add content to the overlay.\n   * @param dialogRef\n   * @param type\n   */\n  protected abstract create(dialogRef: DialogRef<any>, type: ContainerContent): DialogRef<any>;\n\n\n  protected createBackdrop<T>(dialogRef: DialogRef<any>, BackdropComponent: Class<T>): ComponentRef<T> {\n    return dialogRef.overlayRef.instance.addComponent<T>(BackdropComponent);\n  }\n\n  protected createContainer<T>(\n    dialogRef: DialogRef<any>,\n    ContainerComponent: Class<T>,\n    content: ContainerContent): ComponentRef<T> {\n\n    let nodes: any[] = dialogRef.overlayRef.instance.getProjectables(content);\n    return dialogRef.overlayRef.instance.addComponent<T>(ContainerComponent, nodes);\n  }\n\n}\n"
  ],
  "names": [],
  "mappings": ";;;;;;;;AAQA,MAAM,iCAAiC,UAAkB;IACvD,MAAM,CAAC,IAAI,KAAK,CAAC,uBAAuB,UAAU,EAAE,CAAC,CAAC;CACvD;;;;AAED,MAAM;;;;IACJ,YAAmB,OAAgB;QAAhB,YAAO,GAAP,OAAO,CAAS;KAAK;;;;IAGxC,KAAK;QACH,MAAM,sBAAsB,CAAC,OAAO,CAAC,CAAC;KACvC;;;;IAED,MAAM;QACJ,MAAM,sBAAsB,CAAC,QAAQ,CAAC,CAAC;KACxC;;;;IAED,OAAO;QACL,MAAM,sBAAsB,CAAC,SAAS,CAAC,CAAC;KACzC;;;;;;;IAOD,IAAI,CAAC,OAAyB,EAAE,MAAsB;QACpD,MAAM,GAAG,MAAM,sBAAI,EAAS,CAAA,CAAC;QAC7B,qBAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAE1D,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACvB,OAAO,CAAC,IAAI,CAAC;;iDAE8B,CAAC,CAAC;SAC9C;;;QAGD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAA;KACxC;;;;;;;IAUS,cAAc,CAAI,SAAyB,EAAE,iBAA2B;QAChF,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAI,iBAAiB,CAAC,CAAC;KACzE;;;;;;;;IAES,eAAe,CACvB,SAAyB,EACzB,kBAA4B,EAC5B,OAAyB;QAEzB,qBAAI,KAAK,GAAU,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAC1E,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAI,kBAAkB,EAAE,KAAK,CAAC,CAAC;KACjF;CAEF"
}
