{
  "version": 3,
  "file": "fluent-assign.js",
  "sources": [
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/framework/fluent-assign.ts"
  ],
  "sourcesContent": [
    "import { extend, arrayUnion } from './utils';\nconst PRIVATE_PREFIX = '$$';\nconst RESERVED_REGEX = /^(\\$\\$).*/;\n\nfunction validateMethodName(name: string) {\n  if (!name) {\n    throw new Error(`Illegal method name. Empty method name is not allowed`);\n  } else if (name in this) {\n    throw new Error(`A member name '${name}' already defined.`);\n  }\n}\n\n/**\n * Returns a list of assigned property names (non private)\n * @param subject\n */\nfunction getAssignedPropertyNames(subject: any): string[] {\n  return Object.getOwnPropertyNames(subject)\n    .filter(name => RESERVED_REGEX.test(name))\n    .map(name => name.substr(2));\n}\n\nexport function privateKey(name: string): string {\n  return PRIVATE_PREFIX + name;\n}\n\nfunction objectDefinePropertyValue(obj: any, propertyName, value: (value: any) => void): void {\n  Object.defineProperty(obj, propertyName, <any>{\n    configurable: false,\n    enumerable: false,\n    writable: false,\n    value\n  });\n}\n\n/**\n * Given a FluentAssign instance, apply all of the supplied default values so calling\n * instance.toJSON will return those values (does not create a setter function)\n * @param instance\n * @param defaultValues\n */\nfunction applyDefaultValues(instance: any, defaultValues: Object): void {\n  Object.getOwnPropertyNames(defaultValues)\n    .forEach(name => (<any>instance)[privateKey(name)] = (<any>defaultValues)[name]);\n}\n\n/**\n * Create a function for setting a value for a property on a given object.\n * @param obj The object to apply the key & setter on.\n * @param propertyName The name of the property on the object\n * @param writeOnce If true will allow writing once (default: false)\n *\n * Example:\n * let obj = new FluentAssign<any>;\n * setAssignMethod(obj, 'myProp');\n * obj.myProp('someValue');\n * const result = obj.toJSON();\n * console.log(result); //{ myProp: 'someValue' }\n *\n *\n * let obj = new FluentAssign<any>;\n * setAssignMethod(obj, 'myProp', true); // applying writeOnce\n * obj.myProp('someValue');\n * obj.myProp('someValue'); // ERROR: Overriding config property 'myProp' is not allowed.\n */\nexport function setAssignMethod<T>(obj: T, propertyName: string, writeOnce: boolean = false): void {\n  validateMethodName.call(obj, propertyName);\n\n  const key = privateKey(propertyName);\n  objectDefinePropertyValue(obj, propertyName, (value: any) => {\n    if (writeOnce && this.hasOwnProperty(key)) {\n      throw new Error(`Overriding config property '${propertyName}' is not allowed.`);\n    }\n    obj[key] = value;\n    return obj;\n  });\n}\n\n/**\n * Create a function for setting a value that is an alias to an other setter function.\n * @param obj The object to apply the key & setter on.\n * @param propertyName The name of the property on the object\n * @param srcPropertyName The name of the property on the object this alias points to\n * @param hard If true, will set a readonly property on the object that returns\n *        the value of the source property. Default: false\n *\n * Example:\n * let obj = new FluentAssign<any> ;\n * setAssignMethod(obj, 'myProp');\n * setAssignAlias(obj, 'myPropAlias', 'myProp');\n * obj.myPropAlias('someValue');\n * const result = obj.toJSON();\n * console.log(result); //{ myProp: 'someValue' }\n * result.myPropAlias // undefined\n *\n *\n * let obj = new FluentAssign<any> ;\n * setAssignMethod(obj, 'myProp');\n * setAssignAlias(obj, 'myPropAlias', 'myProp', true); // setting a hard alias.\n * obj.myPropAlias('someValue');\n * const result = obj.toJSON();\n * console.log(result); //{ myProp: 'someValue' }\n * result.myPropAlias // someValue\n */\nexport function setAssignAlias<T>(obj: T, propertyName: string,\n                                  srcPropertyName: string,\n                                  hard: boolean = false): void {\n  validateMethodName.call(obj, propertyName);\n\n  objectDefinePropertyValue(obj, propertyName, (value: any) => {\n    obj[srcPropertyName](value);\n    return obj;\n  });\n\n  if (hard === true) {\n    const key = privateKey(propertyName),\n      srcKey = privateKey(srcPropertyName);\n\n    Object.defineProperty(obj, key, <any>{\n      configurable: false,\n      enumerable: false,\n      get: () => obj[srcKey]\n    });\n  }\n}\n\n/**\n * Describes a fluent assign method.\n * A function that gets a value and returns the instance it works on.\n */\nexport interface FluentAssignMethod<T, Z> {\n  //TODO: Setting 'this' instead of Z does not work, this=ConfigSetter here...\n  (value: T): Z;\n}\n\n\nexport interface IFluentAssignFactory<Z> {\n  fluentAssign: Z;\n  setMethod(name: string, defaultValue?: any): IFluentAssignFactory<Z>;\n}\n\n/**\n * Represent a fluent API factory wrapper for defining FluentAssign instances.\n */\nexport class FluentAssignFactory<T> {\n  private _fluentAssign: FluentAssign<T>;\n\n  constructor(fluentAssign?: FluentAssign<T>) {\n    this._fluentAssign =\n      fluentAssign instanceof FluentAssign ? fluentAssign : <any>new FluentAssign();\n  }\n\n  /**\n   * Create a setter method on the FluentAssign instance.\n   * @param name The name of the setter function.\n   * @param defaultValue If set (not undefined) set's the value on the instance immediately.\n   */\n  setMethod(name: string, defaultValue: any = undefined): FluentAssignFactory<T> {\n    setAssignMethod(this._fluentAssign, name);\n    if (defaultValue !== undefined) {\n      (<any>this._fluentAssign)[name](defaultValue);\n    }\n    return this;\n  }\n\n  /**\n   * The FluentAssign instance.\n   */\n  get fluentAssign(): FluentAssign<T> {\n    return this._fluentAssign;\n  }\n}\n\n\n/**\n * Represent an object where every property is a function representing an assignment function.\n * Calling each function with a value will assign the value to the object and return the object.\n * Calling 'toJSON' returns an object with the same properties but this time representing the\n * assigned values.\n *\n * This allows setting an object in a fluent API manner.\n * Example:\n let fluent = new FluentAssign<any>(undefined, ['some', 'went']);\n fluent.some('thing').went('wrong').toJSON();\n // { some: 'thing', went: 'wrong' }\n */\nexport class FluentAssign<T> {\n  private __fluent$base__: new () => T;\n\n  /**\n   * Returns a FluentAssignFactory<FluentAssign<T>> ready to define a FluentAssign type.\n   * @param defaultValues An object representing default values for the instance.\n   * @param initialSetters A list of initial setters for the instance.\n   */\n  static compose<T>(defaultValues: T = undefined,\n                    initialSetters: string[] = undefined): FluentAssignFactory<T> {\n\n    return <any>FluentAssign.composeWith<FluentAssign<T>>(\n      new FluentAssign<T>(defaultValues, initialSetters));\n  }\n\n  /**\n   * Returns a FluentAssignFactory<Z> where Z is an instance of FluentAssign<?> or a derived\n   * class of it.\n   * @param fluentAssign An instance of FluentAssign<?> or a derived class of FluentAssign<?>.\n   */\n  static composeWith<Z>(fluentAssign: Z): IFluentAssignFactory<Z> {\n    return <any>new FluentAssignFactory<any>(<any>fluentAssign);\n  }\n\n  /**\n   *\n   * @param defaultValues An object representing default values for the underlying object.\n   * @param initialSetters A list of initial setters for this FluentAssign.\n   * @param baseType the class/type to create a new base. optional, {} is used if not supplied.\n   */\n  constructor(defaultValues: T | T[] = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    if (Array.isArray(defaultValues)) {\n      (defaultValues as Array<any>).forEach(d => applyDefaultValues(this, d));\n    } else if (defaultValues) {\n      applyDefaultValues(this, defaultValues);\n    }\n\n    if (Array.isArray(initialSetters)) {\n\n      initialSetters.forEach(name => setAssignMethod(this, name));\n    }\n\n    if (baseType) {\n      this.__fluent$base__ = baseType;\n    }\n  }\n\n  toJSON(): T {\n    return getAssignedPropertyNames(this)\n      .reduce((obj: T, name: string) => {\n        const key = privateKey(name);\n        // re-define property descriptors (we dont want their value)\n        let propDesc = Object.getOwnPropertyDescriptor(this, key);\n        if (propDesc) {\n          Object.defineProperty(obj, name, propDesc);\n        } else {\n          (<any>obj)[name] = (<any>this)[key];\n        }\n        return obj;\n      }, this.__fluent$base__ ? new this.__fluent$base__() : <any>{});\n  }\n}\n"
  ],
  "names": [],
  "mappings": "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"
}
