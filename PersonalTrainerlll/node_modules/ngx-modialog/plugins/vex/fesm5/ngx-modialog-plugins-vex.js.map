{
  "version": 3,
  "file": "ngx-modialog-plugins-vex.js",
  "sources": [
    "ng://ngx-modialog/plugins/vex/projects/plugins/vex/src/lib/vex.module.ts",
    "ng://ngx-modialog/plugins/vex/projects/plugins/vex/src/lib/modal.ts",
    "ng://ngx-modialog/plugins/vex/projects/plugins/vex/src/lib/vex-css-dialog-container.ts",
    "ng://ngx-modialog/plugins/vex/projects/plugins/vex/src/lib/presets/dropin-preset.ts",
    "ng://ngx-modialog/plugins/vex/projects/plugins/vex/src/lib/presets/dialog-preset.ts",
    "ng://ngx-modialog/plugins/vex/projects/plugins/vex/src/lib/modal-context.ts",
    "ng://ngx-modialog/plugins/vex/projects/plugins/vex/src/lib/dialog-form-modal.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ModalModule, Modal as BaseModal } from 'ngx-modialog';\n\nimport { Modal } from './modal';\nimport { DialogFormModal, FormDropIn, VEXDialogButtons } from './dialog-form-modal';\nimport { VexCSSDialogContainer } from './vex-css-dialog-container';\n\nexport const providers: any[] = [\n  { provide: BaseModal, useClass: Modal },\n  { provide: Modal, useClass: Modal }\n];\n\n@NgModule({\n  imports: [ ModalModule, CommonModule ],\n  declarations: [\n    VexCSSDialogContainer,\n    VEXDialogButtons,\n    FormDropIn,\n    DialogFormModal\n  ],\n  providers,\n  entryComponents: [\n    VexCSSDialogContainer,\n    DialogFormModal,\n    FormDropIn\n  ]\n})\nexport class VexModalModule {\n\n  static getProviders(): any[] {\n    return providers;\n  }\n\n}\n",
    "import { Observable, combineLatest } from 'rxjs';\n\nimport { Injectable } from '@angular/core';\n\nimport {\n  ContainerContent,\n  Overlay,\n  DialogRef,\n  DROP_IN_TYPE,\n  Modal as Modal_,\n  CSSBackdrop,\n  CSSDialogContainer,\n  PromiseCompleter\n} from 'ngx-modialog';\n\nimport { DropInPresetBuilder } from './presets/dropin-preset';\nimport { VexCSSDialogContainer } from './vex-css-dialog-container';\n\n// TODO: use DI factory for this.\n// TODO: consolidate dup code\nconst isDoc: boolean = !(typeof document === 'undefined' || !document);\n\nlet vexV3 = false;\n/**\n * Execute this method to flag that you are working with VEX version 3.\n */\nexport function vexV3Mode(): void {\n  vexV3 = true;\n}\n\n@Injectable()\nexport class Modal extends Modal_ {\n  constructor(overlay: Overlay) {\n    super(overlay);\n  }\n\n  alert(): DropInPresetBuilder {\n    return new DropInPresetBuilder(this, DROP_IN_TYPE.alert, {isBlocking: false} as any);\n  }\n\n  prompt(): DropInPresetBuilder {\n    return new DropInPresetBuilder(this, DROP_IN_TYPE.prompt, {\n      isBlocking: true,\n      keyboard: null\n    }  as any);\n  }\n\n  confirm(): DropInPresetBuilder {\n    return new DropInPresetBuilder(this, DROP_IN_TYPE.confirm, {\n      isBlocking: true,\n      keyboard: null\n    }  as any);\n  }\n\n  protected create(dialogRef: DialogRef<any>, content: ContainerContent): DialogRef<any> {\n    if (vexV3 === true) {\n      return this.createV3(dialogRef, content);\n    }\n\n    const backdropRef = this.createBackdrop(dialogRef, CSSBackdrop);\n    const containerRef = this.createContainer(dialogRef, VexCSSDialogContainer, content);\n\n    let overlay = dialogRef.overlayRef.instance;\n    let backdrop = backdropRef.instance;\n    let container = containerRef.instance;\n\n    if (dialogRef.inElement) {\n      overlay.insideElement();\n\n      overlay.setContainerStyle('position', 'relative')\n        .setContainerStyle('height', '100%')\n        .setContainerStyle('width', '100%');\n\n      backdrop.setStyle('position', 'absolute')\n        .setStyle('display', 'block')\n        .setStyle('height', '100%')\n        .setStyle('width', '100%');\n\n      container.setStyle('position', 'relative')\n        .setStyle('display', 'block')\n        .setStyle('height', '100%')\n        .setStyle('width', '100%');\n\n    } else {\n      overlay.fullscreen();\n    }\n\n    // add body class if this is the only dialog in the stack\n    if (isDoc && !document.body.classList.contains('vex-open')) {\n      document.body.classList.add('vex-open');\n    }\n\n    backdrop.addClass('vex-overlay');\n    container.addClass(`vex vex-theme-${dialogRef.context.className}`);\n\n    container.setStyle('display', 'block');\n\n    if (containerRef.location.nativeElement) {\n      containerRef.location.nativeElement.focus();\n    }\n\n    overlay.beforeDestroy(() => {\n      backdrop.addClass('vex-closing');\n      container.addClass('vex-closing');\n      const completer = new PromiseCompleter<void>();\n\n      let animationEnd$: Observable<any> = backdrop.myAnimationEnd$();\n\n      // TODO: the child element inside the container (vex-content) is the one with animation\n      // need to also wait for it to end, but this requires a reference to to it.\n      // the container itself is its parent, won't do.\n      // animationEnd$ = combineLatest.call(animationEnd$, container.myAnimationEnd$(), (s1, s2) => [s1,s2] );\n\n      animationEnd$.subscribe( sources => {\n        isDoc && this.overlay.groupStackLength(dialogRef) === 1 && document.body.classList.remove('vex-open');\n        completer.resolve();\n      });\n\n      return completer.promise;\n    });\n\n    container.apply(overlay);\n\n    return dialogRef;\n  }\n\n  private createV3(dialogRef: DialogRef<any>, content: ContainerContent): DialogRef<any> {\n\n    const backdropRef = this.createBackdrop(dialogRef, CSSBackdrop);\n    const containerRef = this.createContainer(dialogRef, CSSDialogContainer, content);\n\n    let overlay = dialogRef.overlayRef.instance;\n    let backdrop = backdropRef.instance;\n    let container = containerRef.instance;\n\n    dialogRef.inElement ? overlay.insideElement() : overlay.fullscreen();\n\n    // add body class if this is the only dialog in the stack\n    if (isDoc && !document.body.classList.contains('vex-open')) {\n      document.body.classList.add('vex-open');\n    }\n\n    overlay.addClass(`vex vex-theme-${dialogRef.context.className}`);\n    backdrop.addClass('vex-overlay');\n    container.addClass(dialogRef.context.contentClassName);\n    container.setStyle('display', 'block');\n    if (dialogRef.inElement) {\n      overlay.setStyle('padding', '0');\n      container.setStyle('margin-top', '20px');\n    }\n\n    if (containerRef.location.nativeElement) {\n      containerRef.location.nativeElement.focus();\n    }\n\n    if (dialogRef.context.className === 'bottom-right-corner') {\n      overlay.setStyle('overflow-y', 'hidden');\n      container.setStyle('position', 'absolute');\n    }\n\n    overlay.beforeDestroy(() => {\n      overlay.addClass('vex-closing');\n      const completer = new PromiseCompleter<void>();\n\n      let animationEnd$: Observable<any> = container.myAnimationEnd$();\n      if (dialogRef.context.className !== 'bottom-right-corner') {\n        animationEnd$ = combineLatest.call(animationEnd$, backdrop.myAnimationEnd$(), (s1, s2) => [s1,s2] );\n      }\n\n      animationEnd$.subscribe( sources => {\n        isDoc && this.overlay.groupStackLength(dialogRef) === 1 && document.body.classList.remove('vex-open');\n        completer.resolve();\n      });\n\n      return completer.promise;\n    });\n\n\n    overlay.setClickBoundary(containerRef.location.nativeElement);\n\n    return dialogRef;\n  }\n}\n",
    "import { Component, ElementRef, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { CSSDialogContainer, ModalOverlay } from 'ngx-modialog';\n\n\n/**\n * A component that acts as a top level container for an open modal window.\n */\n@Component({\n  selector: 'css-dialog-container',\n  host: {\n    'tabindex': '-1',\n    'role': 'dialog'\n  },\n  encapsulation: ViewEncapsulation.None,\n  template: `<div #clickBoundary class=\"{{dialog.context.contentClassName}}\"><ng-content></ng-content></div>`\n})\nexport class VexCSSDialogContainer extends CSSDialogContainer {\n  /**\n   * The div that wraps the content of the modal, by default use the class `vex-content`\n   */\n  @ViewChild('clickBoundary', {read: ElementRef}) public vexContentContainer: ElementRef;\n\n\n  apply(overlay: ModalOverlay): void {\n    overlay.setClickBoundary(this.vexContentContainer.nativeElement);\n\n    if (this.dialog.inElement) {\n      this.setStyle('padding', '20px 0 0 0');\n\n\n      if (this.dialog.context.className === 'bottom-right-corner') {\n        this.setStyle('overflow-y', 'hidden');\n        this.renderer.setStyle(this.vexContentContainer.nativeElement, 'position', 'absolute');\n      }\n    }\n\n  }\n}\n",
    "import {\n  DROP_IN_TYPE,\n  FluentAssignMethod,\n  extend\n} from 'ngx-modialog';\nimport { Modal } from '../modal';\nimport { DialogFormModal as component, FormDropIn as content } from '../dialog-form-modal';\nimport { DialogPreset, DialogPresetBuilder } from './dialog-preset';\n\nconst DEFAULT_VALUES = {\n  component,\n  content,\n  okBtn: 'OK',\n  cancelBtn: 'Cancel'\n};\n\nconst DEFAULT_SETTERS = [\n  'okBtn',\n  'cancelBtn',\n  'placeholder'\n];\n\n/**\n * Data definition\n */\nexport class DropInPreset extends DialogPreset {\n\n  /**\n   * the message to display on the modal.\n   */\n  message: string;\n\n  /**\n   * OK button caption.\n   * Default: OK\n   * Set to false ('', undefined, null, false) to remove button.\n   */\n  okBtn: string;\n\n  /**\n   * Cancel button caption.\n   * Default: Cancel\n   * Set to false ('', undefined, null, false) to remove button.\n   */\n  cancelBtn: string;\n\n  /**\n   * A placeholder for the input element.\n   * Valid only for prompt modal.\n   */\n  placeholder: string;\n\n  dropInType: DROP_IN_TYPE;\n\n  get showInput(): boolean {\n    return this.dropInType === DROP_IN_TYPE.prompt;\n  }\n}\n\n/**\n * A Preset representing all 3 drop ins (alert, prompt, confirm)\n */\nexport class DropInPresetBuilder extends DialogPresetBuilder<DropInPreset> {\n\n  /**\n   * the message to display on the modal.\n   */\n  message: FluentAssignMethod<string, this>;\n\n  /**\n   * The default Ok button caption.\n   */\n  okBtn: FluentAssignMethod<string, this>;\n\n  /**\n   * The default Cancel button caption.\n   */\n  cancelBtn: FluentAssignMethod<string, this>;\n\n  /**\n   * A placeholder for the input element.\n   * Valid only for prompt modal.\n   */\n  placeholder: FluentAssignMethod<string, this>;\n\n  constructor(modal: Modal, dropInType: DROP_IN_TYPE, defaultValues: DropInPreset = undefined) {\n    super(\n      modal,\n      extend<any>(extend({modal, dropInType}, DEFAULT_VALUES), defaultValues || {}),\n      DEFAULT_SETTERS,\n      DropInPreset\n    );\n  }\n\n  $$beforeOpen(config: DropInPreset): void {\n    super.$$beforeOpen(config);\n\n    if (config.okBtn) {\n      this.addOkButton(config.okBtn);\n    }\n\n    switch (config.dropInType) {\n      case DROP_IN_TYPE.prompt:\n        config.defaultResult = undefined;\n        break;\n      case DROP_IN_TYPE.confirm:\n        if (config.cancelBtn) {\n          this.addCancelButton(config.cancelBtn);\n        }\n        break;\n    }\n  }\n}\n",
    "import { Type } from '@angular/core';\nimport {\n  FluentAssignMethod,\n  privateKey,\n  extend,\n  arrayUnion\n} from 'ngx-modialog';\nimport { VEXModalContext, VEXModalContextBuilder } from '../modal-context';\nimport { Modal } from '../modal';\nimport {\n  DialogFormModal as component,\n  VEXButtonHandler,\n  VEXButtonConfig\n} from '../dialog-form-modal';\n\n\nconst DEFAULT_SETTERS = [\n  'content'\n];\n\n/**\n * Data definition\n */\nexport class DialogPreset extends VEXModalContext {\n  defaultResult: any;\n  content: Type<any>;\n  buttons: VEXButtonConfig[];\n  showInput: any;\n}\n\n/**\n * A Preset representing the configuration needed to open MessageModal.\n * This is an abstract implementation with no concrete behaviour.\n * Use derived implementation.\n */\nexport class DialogPresetBuilder<T extends DialogPreset>\nextends VEXModalContextBuilder<T> {\n  /**\n   * the message to display on the modal.\n   */\n  content: FluentAssignMethod<Type<any>, this>;\n\n  constructor(modal: Modal,\n              defaultValues: T = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      extend<any>({modal, component, buttons: [], defaultResult: true}, defaultValues || {}),\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType || <any>DialogPreset // https://github.com/Microsoft/TypeScript/issues/7234\n    );\n  }\n\n  addButton(css: string, caption: string, onClick: VEXButtonHandler): this {\n    let btn = {\n      cssClass: css,\n      caption: caption,\n      onClick: onClick\n    };\n\n    let key = privateKey('buttons');\n    (this[key] as VEXButtonConfig[]).push(btn);\n\n    return this;\n  }\n\n  addOkButton(text: string = 'OK'): this {\n    this.addButton(\n      'vex-dialog-button-primary vex-dialog-button vex-first',\n      text,\n      (cmp: component, $event: MouseEvent) => cmp.dialog.close(cmp.dialog.context.defaultResult)\n    );\n    return this;\n  }\n\n  addCancelButton(text: string = 'CANCEL'): this {\n    this.addButton(\n      'vex-dialog-button-secondary vex-dialog-button vex-last',\n      text,\n      (cmp: component, $event: MouseEvent) => cmp.dialog.dismiss()\n    );\n    return this;\n  }\n}\n",
    "import {\n  ModalOpenContext,\n  ModalOpenContextBuilder,\n  FluentAssignMethod,\n  privateKey,\n  extend,\n  arrayUnion\n} from 'ngx-modialog';\n\n\nconst DEFAULT_VALUES = {\n  className: <VEXBuiltInThemes>'default',\n  overlayClassName: 'vex-overlay',\n  contentClassName: 'vex-content',\n  closeClassName: 'vex-close'\n};\n\nconst DEFAULT_SETTERS = [\n  'className',\n  'overlayClassName',\n  'contentClassName',\n  'closeClassName',\n  'showCloseButton'\n];\n\nexport type VEXBuiltInThemes\n  = 'default' | 'os' | 'plain' | 'wireframe' | 'flat-attack' | 'top' | 'bottom-right-corner';\n\nexport class VEXModalContext extends ModalOpenContext {\n  /**\n   * Set the built in schema to use.\n   */\n  className: VEXBuiltInThemes;\n\n  overlayClassName: string;\n  contentClassName: string;\n  closeClassName: string;\n\n  showCloseButton: boolean;\n\n\n  normalize(): void {\n    if (!this.className) {\n      this.className = DEFAULT_VALUES.className;\n    }\n\n    if (!this.overlayClassName) {\n      this.overlayClassName = DEFAULT_VALUES.overlayClassName;\n    }\n\n    if (!this.contentClassName) {\n      this.contentClassName = DEFAULT_VALUES.contentClassName;\n    }\n\n    if (!this.closeClassName) {\n      this.closeClassName = DEFAULT_VALUES.closeClassName;\n    }\n\n    super.normalize();\n  }\n}\n\nexport class VEXModalContextBuilder<T extends VEXModalContext> extends ModalOpenContextBuilder<T> {\n  /**\n   * Set the built in schema to use.\n   */\n  className: FluentAssignMethod<VEXBuiltInThemes, this>;\n\n  overlayClassName: FluentAssignMethod<string, this>;\n  contentClassName: FluentAssignMethod<string, this>;\n  closeClassName: FluentAssignMethod<string, this>;\n\n  showCloseButton: FluentAssignMethod<boolean, this>;\n\n  constructor(defaultValues: T = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      extend<any>(DEFAULT_VALUES, defaultValues || {}),\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType || <any>VEXModalContext // https://github.com/Microsoft/TypeScript/issues/7234\n    );\n  }\n\n  /**\n   *\n   * @aliasFor isBlocking\n   */\n  overlayClosesOnClick(value: boolean): this {\n    this[privateKey('isBlocking')] = !value;\n    return this;\n  }\n}\n",
    "import {\n  Component,\n  ViewEncapsulation,\n  Input,\n  Output,\n  EventEmitter\n} from '@angular/core';\n\nimport {\n  DialogRef,\n  ModalComponent\n} from 'ngx-modialog';\n\nimport { DialogPreset } from './presets/dialog-preset';\nimport { DropInPreset } from './presets/dropin-preset';\n\nexport interface VEXButtonHandler {\n  (cmp: ModalComponent<DialogPreset>, $event: MouseEvent): void;\n}\n\n/**\n * Interface for button definition\n */\nexport interface VEXButtonConfig {\n  cssClass: string;\n  caption: string;\n  onClick: VEXButtonHandler;\n}\n\nexport interface VEXButtonClickEvent {\n  btn: VEXButtonConfig;\n  $event: MouseEvent;\n}\n\n/**\n * A Dialog is a\n */\n@Component({\n  selector: 'vex-dialog-buttons',\n  encapsulation: ViewEncapsulation.None,\n  template: `<div class=\"vex-dialog-buttons\">\n    <button type=\"button\" \n         *ngFor=\"let btn of buttons;\"\n         [class]=\"btn.cssClass\"\n         (click)=\"onClick(btn, $event)\">{{btn.caption}}</button>\n</div>`\n})\nexport class VEXDialogButtons {\n\n  /**\n   * A collection of button configurations, each configuration is a button to display.\n   */\n  @Input() public buttons: VEXButtonConfig[];\n\n  /**\n   * Emitted when a button was clicked\n   */\n  @Output() public onButtonClick = new EventEmitter<VEXButtonClickEvent>();\n\n  onClick(btn: any, $event: MouseEvent) {\n    $event.stopPropagation();\n    this.onButtonClick.emit({btn, $event});\n  }\n}\n\n/**\n * A Dialog with customized buttons wrapped in a form.\n *\n */\n@Component({\n  selector: 'modal-dialog',\n  encapsulation: ViewEncapsulation.None,\n  template: `<form class=\"vex-dialog-form\">\n    <ng-container *ngComponentOutlet=\"context.content\"></ng-container>\n    <vex-dialog-buttons [buttons]=\"context.buttons\"\n                        (onButtonClick)=\"onButtonClick($event)\"></vex-dialog-buttons>\n</form>`\n})\nexport class DialogFormModal implements ModalComponent<DialogPreset> {\n  public context: DialogPreset;\n\n  constructor(public dialog: DialogRef<DialogPreset>) {\n    this.context = dialog.context;\n  }\n\n  onButtonClick($event: VEXButtonClickEvent) {\n    $event.btn.onClick(this, $event.$event);\n  }\n}\n\n@Component({\n  selector: 'drop-in-dialog',\n  encapsulation: ViewEncapsulation.None,\n  template:\n`<div class=\"vex-dialog-message\">{{context.message}}</div>\n <div *ngIf=\"context.showInput\" class=\"vex-dialog-input\">\n   <input #input\n          autofocus\n          name=\"vex\" \n          type=\"text\" \n          class=\"vex-dialog-prompt-input\"\n           (change)=\"context.defaultResult = input.value\" \n          placeholder=\"{{context.placeholder}}\">\n </div>\n <div *ngIf=\"context.showCloseButton\" \n      [class]=\"context.closeClassName\"\n      (click)=\"dialog.dismiss()\"></div>`\n})\nexport class FormDropIn implements ModalComponent<DropInPreset> {\n  public context: DropInPreset;\n\n  constructor(public dialog: DialogRef<DropInPreset>) {\n    this.context = dialog.context;\n  }\n}\n"
  ],
  "names": [
    "Modal",
    "BaseModal",
    "DEFAULT_VALUES",
    "DEFAULT_SETTERS",
    "content",
    "component",
    "tslib_1.__extends"
  ],
  "mappings": ";;;;;;;;;;AMAA;;;AA+CA,AAAA,IAAA,gBAAA,kBAAA,YAAA;;;;;QAUA,IAAA,CAAA,aAAA,GAAmC,IAAI,YAAY,EAAuB,CAA1E;;;;;;;IAEE,gBAAF,CAAA,SAAA,CAAA,OAAA,GAAA,UAAA,GAAA,EAAA,MAAA,EAAA;QACI,MAAM,CAAC,eAAe,EAAE,CAAC;QACzB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,GAAlC,EAAA,MAAA,EAAA,MAAA,EAAA,CAAA,CAAA;KACG,CAAH;;;AAzBA,AACA,gBAAE,CAAF,UAAA,GAAA;IACA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAe,CAAf;gBACE,QAAQ,EAAE,oBAAZ;;;;;;AAMA,gBAAA,CAAA,cAAA,GAAA;;;;AAMA;;;;;;;;;;;KA6BA;;;;;;;;IAIE,OAAF,eAAA,CAAA;CACA,EAAA,CAAA,CAAA;AACA;;gBAlBA,QAAA,EAAA,cAAA;gBACE,aAAF,EAAA,iBAAA,CAAA,IAAA;gBACE,QAAF,EAAA,qQAAA;aACA,EAAA,EAAA;;;;IAIA,EAAA,IAAA,EAAA,SAAA,GAAA;CACA,CAAA,EAAA,CAAA;;;;;;QA+BA,IAAA,CAAA,MAAA,GAAA,MAAA,CAAA;;;;CAGA,EAAA,CAAE,CAAF;AAAA,AACA,UAAA,CAAA,UAAA,GAAA;IACA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAA,CAAA;;;gBAvBA,QAAA,EAAA,6fAAA;aACA,EAAA,EAAA;CACA,CAAA;;;;;;ADjFA,qBAAA,cAAA,GAAA;IACE,SAAF,oBAAA,SAAA,CAAA;IACE,gBAAgB,EAAE,aAAa;IAC/B,gBAAgB,EAAlB,aAAA;IACA,cAAA,EAAA,WAAA;CAEA,CAAA;AACA,qBAAA,eAAA,GAAA;IACE,WAAF;IACE,kBAAkB;IAClB,kBAAF;IACE,gBAAF;IACA,iBAAA;CAKA,CAAA;;;;QAaA,OAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA,CAAA;KACA;;;;IAKA,eAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;QACA,IAAA,CAAA,IAAA,CAAA,SAAA,EAAA;YAEQ,IAAR,CAAa,SAAb,GAAA,cAAA,CAAA,SAAA,CAAA;SACA;QACA,IAAA,CAAA,IAAA,CAAA,gBAAA,EAAA;YAEQ,IAAR,CAAa,gBAAgB,GAA7B,cAAA,CAAA,gBAAA,CAAA;SACA;QACA,IAAA,CAAA,IAAA,CAAA,gBAAA,EAAA;YAEA,IAAA,CAAA,gBAAA,GAAA,cAAA,CAAA,gBAAA,CAAA;SACA;QACA,IAAA,CAAA,IAAA,CAAA,cAAA,EAAA;;;;;;;;;;;AAiBA,AAAA,IAAA,sBAAA,kBAAA,UACmD,MADnD,EAAA;IAGAM,SAAA,CAAA,sBAAA,EAAA,MAAA,CAAA,CAAA;;;;;;;;;QAQA,IAAA,QAAA,KAAuB,KAAc,CAArC,EAAA,EAAA,QAAA,GAAA,SAAA,CAAA,EAAA;QACI,OAAJ,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,MAAA,CAAA,cAAA,EAAA,aAAA,IAAA,EAAA,CAAA,EAAA,UAAA,CAAA,eAAA,EAAA,cAAA,IAAA,EAAA,CAAA,EAAA,QAAA,sBAAA,eAAA;SACA;SACA,IAAA,IAAA,CAAA;KACA;;;;;;;;;;;;;;AD3EA,qBAAAH,iBAAA,GAAA;IACA,SAAA;;;;;AAUA,AAAA,IAAA,YAAA,kBAAA,UAAA,MAAA,EAAA;;;;;;;AAOA;;;;;;;AAOA,AAAA,IAAE,mBACY,kBADd,UAAA,MAAA,EAAA;IAIAG,SACkB,CADlB,mBACqC,EADrC,MAAA,CAC8C,CAD9C;;;;;;;;;;QAOA,IAAA,QAAA,KAAA,KAAA,CAAA,EAAA,EAAmE,QAAnE,GAAA,SAAA,CAAA,EAAA;QACI,OAAJ,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,MAAA,CAAA,EAAA,KAAA,EAAA,KAAA,EAAA,SAAA,EAAAD,eAAA,EAAA,OAAA,EAAA,EAAA,EAAA,aAAA,EAAA,IAAA,EAAA,EAAA,aAAA,IAAA,EAAA,CAAA,EAAA,UAAA,CAAAF,iBAAA,EAAA,cAAA,IAAA,EAAA,CAAA,EAAA,QAAA,sBAAA,YAAA;SACA;SACA,IAAA,IAAA,CAAA;KACA;;;;;;;;;;YASA,OAAA,EAAA,OAAA;YACQ,OAAR,EAAA,OAAA;SAKA,CAAA;QACA,qBAAA,GAAA,GAAA,UAAA,CAAA,SAAA,CAAA,CAAA;;;;;;;;IASA,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAA,IAAA,EAAA;QACA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,EAAA,IAAA,GAAA,IAAA,CAAA,EAAA;;;;;;;;;;;;;;;;ADzEA,qBAAAD,gBAAA,GAAA;IACE,SAAF,EAAAG,eAAA;IACE,OAAO,EAATD,UAAA;IACE,KAAF,EAAA,IAAa;IACb,SAAA,EAAA,QAAA;CAEA,CAAA;AACA,qBAAAD,iBAAA,GAAA;IACE,OAAF;IACE,WAAF;IACA,aAAA;;;;;;;;QAkCM,OAAN,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA,CAAA;KACA;IACA,MAAA,CAAA,cAAA,CAAA,YAAA,CAAA,SAAA,EAAA,WAAA,EAAA;;;;;;;;;;;;AAoCA;;;;;;;;;;IASA,SAAA,mBAAA,CAA6B,KAA7B,EAAA,UAAA,EAAA,aAAA,EAAA;QACA,IAAM,aAAN,KAAwB,KAAxB,CAA8B,EAA9B,EAAA,aAAA,GAAA,SAAA,CAAA,EAAA;QACA,OAAA,MAAA,CAAc,IAAd,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,KAAA,EAAA,KAAA,EAAA,UAAA,EAAA,UAAA,EAAA,EAAAD,gBAAA,CAAA,EAAA,aAAA,IAAA,EAAA,CAAA,EAAAC,iBAAA,EAAA,YAAA,CAAA,IAAA,IAAA,CAAA;KACA;;;;;IAKA,mBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAA,MAAA,EAAA;QACA,MAAA,CAAA,SAAA,CAAA,YAAA,CAAA,IAAA,CAAA,IAAA,EAAA,MAAA,CAAA,CAAA;QACA,IAAA,MAAA,CAAA,KAAA,EAAA;YACA,IAAA,CAAA,WAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;KDzFA;;;;;IAQA,qBAAA,CAAA,SAAA,CAAA,KAAA,GAAoC,UAAU,OAA9C,EAAA;QACA,OAAA,CAAQ,gBAAR,CAAA,IAAA,CAA8B,mBAA9B,CAAA,aAAA,CAAA,CAAA;QACA,IAAA,IAAA,CAAA,MAAA,CAAA,SAAA,EAAA;YACA,IAAA,CAAA,QAAA,CAAA,SAAA,EAAA,YAAA,CAAA,CAAA;YAEA,IAAA,IAAA,CAAA,MAAA,CAAA,OAAA,CAAA,SAAA,KAAA,qBAAA,EAAA;;;aA7BA;SACA;KACA,CAAA;IACA,OAAA,qBAAgB,CAAhB;CACA,CAAA,kBAAI,CAAJ,CAAA,CAAA;AACA,AACA,qBAAA,CAAA,UAAA,GAAA;IACA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAA,CAAA;gBACA,QAAA,EAAA,sBAAA;;;;iBAKA;;;;;;;;;;;;ADEA,qBAAI,KAAK,GAAG,EAAZ,OAAA,QAAA,KAAA,WAAA,IAAA,CAAA,QAAA,CAAA,CAAA;;;;;;AAKA,AAAA,SAAc,SAAd,GAAA;IACA,KAAA,GAAA,IAAA,CAAA;CAGA;;;;;;IAGA,SAAAH,QAAA,CAAA,OAAA,EAAA;;;;;;IAIAA,QAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;;;;;;IAIAA,QAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;QACA,OAAA,IAAA,mBAAA,CAAA,IAAA,EAAA,YAAA,CAAA,MAAA,oBAAA;YACe,UAAf,EAAA,IAAA;YACA,QAAA,EAAA,IAAA;;;;;;IAIAA,QAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;QACA,OAAA,IAAA,mBAAA,CAAA,IAAA,EAAA,YAAA,CAAA,OAAA,oBAAA;YACe,UAAf,EAAA,IAAA;YACA,QAAA,EAAA,IAAA;;;;;;;;IAIAA,QAAA,CAAA,SAAa,CAAb,MAAA,GAAA,UAAA,SAAA,EAAA,OAAA,EAAA;QACA,IAAA,KAAA,GAAA,IAAA,CAAA;QAEI,IAAJ,KAAA,KAAA,IAAA,EAAA;YACA,OAAA,IAAA,CAAA,QAAA,CAAA,SAAA,EAAA,OAA8B,CAA9B,CAAA;SAEA;QACI,qBAAI,WAAW,GAAnB,IAAA,CAAA,cAAA,CAAA,SAAA,EAAA,WAAA,CAAA,CAAA;QACI,qBAAI,YAAY,GAApB,IAAA,CAAA,eAAA,CAAA,SAAA,EAAA,qBAAA,EAAA,OAAA,CAAA,CAAA;QAEI,qBAAJ,OAAA,GAAA,SAAA,CAAA,UAAA,CAAA,QAAA,CAAA;QACA,qBAAA,QAAA,GAAA,WAAA,CAAA,QAAA,CAAA;QAEA,qBAAA,SAAgC,GAAhC,YAAA,CAAA,QAAA,CAAA;QACA,IAAA,SAAA,CAAA,SAAA,EAAA;YACA,OAAA,CAAA,aAAA,EAA2B,CAA3B;YAEM,OAAN,CAAc,iBAAd,CAAA,UAAA,EAAA,UAAA,CAAA;iBACS,iBAAT,CAA2B,QAA3B,EAAqC,MAArC,CAAA;iBACS,iBAAiB,CAA1B,OAAkC,EAAlC,MAAA,CAAA,CAAA;YACA,QAAA,CAAA,QAAA,CAAA,UAAA,EAAkC,UAAlC,CAAA;iBAEA,QAAA,CAAA,SAAA,EAAA,OAAA,CAAA;iBACS,QAAQ,CAAC,QAAlB,EAAA,MAAA,CAAA;iBACS,QAAQ,CAAC,OAAlB,EAAA,MAAA,CAAkC,CAAC;YACnC,SAAA,CAAA,QAAA,CAAA,UAAiC,EAAE,UAAnC,CAAA;iBAEA,QAAA,CAAA,SAAA,EAAA,OAAA,CAAA;iBAAA,QAAA,CAAA,QAAA,EAAA,MAAA,CAAA;iBACA,QAAA,CAAA,OAA2B,EAA3B,MAAA,CAAA,CAAA;SACK;;YAGG,OAAR,CAAA,UAA0B,EAA1B,CAAA;SACA;;QAGI,IAAJ,KAAa,IAAb,CAAA,QAAA,CAAA,IAAA,CAAA,SAAA,CAAA,QAAA,CAAA,UAAA,CAAA,EAAA;YACA,QAAA,CAAA,IAAA,CAAsB,SAAtB,CAAA,GAAA,CAAA,UAAA,CAAA,CAAA;SAEA;QAEI,QAAJ,CAAA,QAAqB,CAArB,aAAA,CAAA,CAAA;QACA,SAAA,CAAA,QAAA,CAAA,gBAAA,GAAA,SAAiD,CAAC,OAAlD,CAAA,SAAA,CAAA,CAAA;QACA,SAAA,CAAA,QAAA,CAAA,SAAA,EAAA,OAAA,CAAA,CAAA;QAEI,IAAJ,YAAA,CAAA,QAA6B,CAA7B,aAAA,EAAA;YACM,YAAN,CAAA,QAAA,CAAA,aAAA,CAAA,KAAA,EAAA,CAAA;SACA;QACA,OAAA,CAAA,aAAA,CAAA,YAAA;YAEM,QAAN,CAAA,QAAA,CAAA,aAAA,CAAA,CAAA;;;;;;;;YAUA,aAAA,CAAA,SAAA,CAAA,UAAA,OAAA,EAAA;gBAEA,KAAA,IAAA,KAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,SAAA,CAAA,KAAA,CAAA,IAAA,QAAA,CAAA,IAAA,CAAA,SAAA,CAAA,MAAA,CAAA,UAAA,CAAA,CAAA;gBACA,SAAA,CAAA,OAAA,EAAA,CAAA;aAEA,CAAA,CAAA;YAEA,OAAA,SAAA,CAAA,OAAA,CAAA;SACA,CAAA,CAAA;;;;;;;;;IAOAA,QAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAA,SAAA,EAAA,OAAsC,EAAtC;QACI,IAAJ,KAAA,GAAA,IAAA,CAAA;QACI,qBAAI,WAAR,GAAA,IAAA,CAAA,cAAyC,CAAC,SAA1C,EAAA,WAAA,CAAA,CAAA;QAEI,qBAAqB,YAAzB,GAAA,IAAA,CAAA,eAA4D,CAA5D,SAAsE,EAAE,kBAAxE,EAAA,OAAA,CAAA,CAAA;;QAGI,qBAAJ,QAAA,GAAA,WAAA,CAAA,QAAA,CAAA;QACA,qBAAA,SAAA,GAAA,YAAA,CAAA,QAAA,CAAA;QACA,SAAA,CAAA,SAAA,GAAA,OAAA,CAAA,aAAA,EAAA,GAAA,OAAA,CAAA,UAAA,EAAA,CAAA;;QAGI,IAAJ,KAAa,IAAb,CAAA,QAAA,CAAA,IAAA,CAAA,SAAA,CAAA,QAAA,CAAA,UAAA,CAAA,EAAA;YACA,QAAA,CAAA,IAAA,CAAsB,SAAtB,CAAgC,GAAhC,CAAA,UAAA,CAAA,CAAA;SACA;QACI,OAAJ,CAAA,QAAA,CAAA,gBAAA,GAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA;QACA,QAAA,CAAA,QAAA,CAAA,aAAA,CAAkC,CAAlC;QACA,SAAA,CAAA,QAAA,CAAA,SAAA,CAAA,OAAA,CAAuC,gBAAvC,CAAA,CAAA;QACA,SAAA,CAAA,QAAA,CAAA,SAAA,EAAA,OAAA,CAAA,CAAA;QAEI,IAAI,SAAR,CAAA,SAAA,EAA6B;YACvB,OAAN,CAAA,QAAA,CAAA,SAAA,EAAA,GAAA,CAAA,CAAA;YACA,SAAA,CAAA,QAAA,CAAA,YAAA,EAAA,MAAA,CAAA,CAAA;SAEA;QACA,IAAM,YAAN,CAAA,QAAA,CAAA,aAAA,EAAA;YACM,YAAN,CAAA,QAAA,CAAA,aAAA,CAAA,KAA+C,EAAE,CAAjD;SACK;QAED,IAAJ,SAAA,CAAA,OAAyB,CAAC,SAA1B,KAAA,qBAAA,EAAA;YACM,OAAO,CAAC,QAAQ,CAAC,YAAvB,EAAqC,QAArC,CAAA,CAAA;YACM,SAAN,CAAA,QAAA,CAAA,UAAA,EAAA,UAAA,CAAA,CAAA;SAEA;QACA,OAAS,CAAC,aAAV,CAAA,YAAA;YACA,OAAA,CAAA,QAAA,CAAqB,aAArB,CAAA,CAAA;YACA,qBAAA,SAAA,GAAA,IAAA,gBAAA,EAAA,CAAA;YAEM,qBAAN,aAAyC,GAAzC,SAAA,CAAA,eAAA,EAAA,CAAA;YACA,IAAQ,SAAS,CAAjB,OAAA,CAAA,SAAA,KAAA,qBAAA,EAA+D;gBACvD,aAAR,GAAA,aAAA,CAAA,IAAA,CAAA,aAAA,EAAA,QAAA,CAAA,eAAA,EAAA,EAAA,UAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,CAAA,EAAA,EAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA;aACO;YAED,aAAN,CAAA,SAAA,CAA8B,UAA9B,OAAA,EAAA;gBACA,KAAA,IAAA,KAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,SAAA,CAAA,KAAA,CAAA,IAAA,QAAA,CAAA,IAAA,CAAA,SAAA,CAAA,MAAA,CAAA,UAAA,CAAA,CAAA;gBAGY,SAAZ,CAAA,OAA6B,EAA7B,CAAA;aAEA,CAAU,CAAC;;;;QAtJX,OAAA,SAAA,CAAA;;;;AAxBA;;;;;;;;;;;;ADNA,AASA,IAAA,iBAAA,SAAA,GAAA;IACE,EAAE,OAAO,EAAEC,KAAS,EAAE,QAAQ,EAAED,OAAK,EAAE;IACvC,EAAE,OAAO,EAAEA,OAAK,EAAE,QAAQ,EAAEA,OAAK,EAAE;CACpC,CAAC;AAiBF,AAAA,IAAA,cAAA,kBAAA,YAAA;;;;;;IAIA,cAAA,CAAA,YAAA,GAAA,YAAA;;;IAnBA,OAAA,cAAA,CAAA;CACA,EAAA,CAAA,CAAA;AACA,AACA,cAAA,CAAA,UAAA,GAAA;IACA,EAAA,IAAA,EAAA,QAAI,EAAJ,IAAA,EAAA,CAAA;gBACA,OAAA,EAAA,CAAA,WAAA,EAAA,YAAA,CAAA;gBACA,YAAA,EAAA;oBACA,qBAAA;oBACA,gBAAA;oBACA,UAAA;oBACI,eAAJ;iBACA;gBACA,SAAA,EAAA,SAAA;gBACA,eAAA,EAAA;oBACA,qBAAA;;;;;;;;;;;;;;;;;;;"
}
