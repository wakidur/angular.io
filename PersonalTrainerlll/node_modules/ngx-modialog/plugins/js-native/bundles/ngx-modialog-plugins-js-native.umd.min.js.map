{
  "version": 3,
  "file": "ngx-modialog-plugins-js-native.umd.min.js",
  "sources": [
    "ng://ngx-modialog/plugins/js-native/projects/plugins/js-native/src/lib/modal-context.ts",
    "ng://ngx-modialog/plugins/js-native/projects/plugins/js-native/src/lib/js-native-modal-renderer.ts",
    "ng://ngx-modialog/plugins/js-native/projects/plugins/js-native/src/lib/presets/js-native-preset.ts",
    "ng://ngx-modialog/plugins/js-native/projects/plugins/js-native/src/lib/modal.ts",
    "ng://ngx-modialog/plugins/js-native/projects/plugins/js-native/src/lib/js-native.module.ts"
  ],
  "sourcesContent": [
    "import {\n  DROP_IN_TYPE,\n  ModalOpenContextBuilder,\n  ModalOpenContext,\n  FluentAssignMethod,\n  arrayUnion\n} from 'ngx-modialog';\n\nconst DEFAULT_SETTERS = [\n  'promptDefault'\n];\n\nexport class JSNativeModalContext extends ModalOpenContext {\n  promptDefault: string;\n  dialogType: DROP_IN_TYPE;\n\n  normalize(): void {\n    if (!this.message) this.message = '';\n    if (this.dialogType === undefined) this.dialogType = DROP_IN_TYPE.alert;\n  }\n}\n\n\nexport class JSNativeModalContextBuilder<T extends JSNativeModalContext>\nextends ModalOpenContextBuilder<T> {\n\n  /**\n   * The default value for the prompt input\n   */\n  promptDefault: FluentAssignMethod<string, this>;\n\n  constructor(defaultValues: T = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      defaultValues || <any>{},\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType || <any>JSNativeModalContext\n      // https://github.com/Microsoft/TypeScript/issues/7234\n    );\n  }\n}\n",
    "import {\n  ViewContainerRef,\n  ComponentRef,\n  Injectable\n} from '@angular/core';\n\nimport {\n  DROP_IN_TYPE,\n  DialogRef,\n  OverlayRenderer,\n  ModalOverlay\n} from 'ngx-modialog';\n\n@Injectable()\nexport class JSNativeModalRenderer implements OverlayRenderer {\n\n  render(dialog: DialogRef<any>, vcRef: ViewContainerRef): ComponentRef<ModalOverlay> {\n\n    let result: string | boolean;\n    switch (dialog.context.dialogType) {\n      case DROP_IN_TYPE.alert:\n        window.alert(dialog.context.message);\n        result = true;\n        break;\n      case DROP_IN_TYPE.prompt:\n        result = window.prompt(dialog.context.message, dialog.context.promptDefault);\n        break;\n      case DROP_IN_TYPE.confirm:\n        result = window.confirm(dialog.context.message);\n        break;\n    }\n\n    dialog.destroy = () => {\n    };\n\n    if (result === false) {\n      dialog.dismiss();\n    } else {\n      dialog.close(result);\n    }\n\n    // we need to return ComponentRef<ModalOverlay> but a native dialog does'nt have that\n    // so we resolve an empty promise, the user of this renderer should expect that.\n    return {} as any;\n  }\n}\n\n",
    "import { ViewContainerRef } from '@angular/core';\nimport { DialogRef, DROP_IN_TYPE, OverlayConfig } from 'ngx-modialog';\nimport { Modal } from '../modal';\n\nimport {\n  JSNativeModalContext,\n  JSNativeModalContextBuilder\n} from '../modal-context';\nimport { JSNativeModalRenderer } from '../js-native-modal-renderer';\n\nexport class JSNativePresetBuilder extends JSNativeModalContextBuilder<JSNativeModalContext> {\n\n  constructor(modal: Modal, dialogType: DROP_IN_TYPE) {\n    super(<any>{modal, dialogType});\n  }\n\n  /**\n   * Open a modal window based on the configuration of this config instance.\n   * @param viewContainer If set opens the modal inside the supplied viewContainer\n   */\n  open(viewContainer?: ViewContainerRef): DialogRef<JSNativeModalContext> {\n    let context: JSNativeModalContext = this.toJSON();\n\n    if (!(context.modal instanceof Modal)) {\n      return <any>Promise.reject(new Error('Configuration Error: modal service not set.'));\n    }\n\n    this.$$beforeOpen(context);\n\n    let overlayConfig: OverlayConfig = {\n      context: context,\n      renderer: new JSNativeModalRenderer(),\n      viewContainer: viewContainer\n    };\n\n    return context.modal.open(context.component, overlayConfig);\n  }\n}\n\n",
    "import { Injectable } from '@angular/core';\n\nimport {\n  DialogRef,\n  Overlay,\n  DROP_IN_TYPE,\n  Modal as Modal_\n} from 'ngx-modialog';\n\nimport { JSNativePresetBuilder } from './presets/js-native-preset';\n\n@Injectable()\nexport class Modal extends Modal_ {\n  constructor(overlay: Overlay) {\n    super(overlay);\n  }\n\n  alert(): JSNativePresetBuilder {\n    return new JSNativePresetBuilder(this, DROP_IN_TYPE.alert);\n  }\n\n  prompt(): JSNativePresetBuilder {\n    return new JSNativePresetBuilder(this, DROP_IN_TYPE.prompt);\n  }\n\n  confirm(): JSNativePresetBuilder {\n    return new JSNativePresetBuilder(this, DROP_IN_TYPE.confirm);\n  }\n\n  protected create(dialogRef: DialogRef<any>, type: any): DialogRef<any> {\n    return dialogRef;\n  }\n\n}\n\n\n\n",
    "import { NgModule } from '@angular/core';\n\nimport { Modal as BaseModal } from 'ngx-modialog';\n\nimport { Modal } from './modal';\n\nexport const providers: any[] = [\n  { provide: BaseModal, useClass: Modal },\n  { provide: Modal, useClass: Modal }\n];\n\n@NgModule({\n  providers\n})\nexport class JSNativeModalModule {\n\n  static getProviders(): any[] {\n    return providers;\n  }\n\n}\n"
  ],
  "names": [
    "DEFAULT_SETTERS",
    "_super",
    "apply",
    "this",
    "arguments",
    "JSNativeModalContext",
    "prototype",
    "normalize",
    "message",
    "JSNativeModalContextBuilder",
    "tslib_1.__extends",
    "JSNativeModalRenderer",
    "render",
    "dialog",
    "vcRef",
    "result",
    "context",
    "dialogType",
    "DROP_IN_TYPE",
    "alert",
    "window",
    "prompt",
    "promptDefault",
    "confirm",
    "destroy",
    "dismiss",
    "JSNativePresetBuilder",
    "modal",
    "open",
    "viewContainer",
    "toJSON",
    "Modal",
    "Promise",
    "reject",
    "Error",
    "$$beforeOpen",
    "overlayConfig",
    "renderer",
    "component",
    "Modal$$1",
    "overlay",
    "create",
    "dialogRef",
    "type",
    "Injectable",
    "providers",
    "provide",
    "BaseModal",
    "useClass",
    "JSNativeModalModule",
    "getProviders"
  ],
  "mappings": "+cASA,IAAAA,EAAA,CACA,4CAMA,OAAA,OAAAC,GAAAA,EAAAC,MAAAC,KAAAC,YAAAD,6BAGAE,EAAAC,UAAAC,UAAA,WACAJ,KAAAK,uHAcAC,EAC4B,SAD5BR,qKAMAS,EAAAA,UAAAD,EAAAR,KANA,4BCpBAU,EAAA,yBADA,OAMAA,EAAAL,UAAAM,OAAA,SAAAC,EAAAC,GACA,IAAuBC,EACvB,OAAQF,EAAOG,QAAfC,YACA,KAAAC,EAAAA,aAAsBC,MACdC,OAARD,MAAAN,EAAAG,QAAAR,SACAO,GAAA,EACQ,MACR,KAAAG,EAAAA,aAAAG,OACAN,EAAAK,OAAAC,OAAAR,EAAAG,QAAAR,QAAAK,EAAAG,QAAAM,eACQ,MACR,KAAAJ,EAAAA,aAAAK,QACAR,EAAAK,OAAAG,QAAAV,EAAAG,QAAAR,iBAKIK,EAAJW,QAAA,gBAEAT,EAAUF,EAAVY,yBAxBAd,EACA,wDCAA,SAAAe,EAAAC,EAAAV,4EASAS,EAAApB,UAAAsB,KAAA,SAAAC,GACA,IAAAb,EAAAb,KAAyB2B,SACzB,KAAAd,EAAAW,iBAAAI,GAEQ,OAARC,QAAAC,OAAA,IAAAC,MAAA,gDAGA/B,KAAAgC,aAAAnB,GACA,IAAAoB,EAAA,CACMpB,QAANA,EACAqB,SAAA,IAAA1B,EAEAkB,cAAAA,GAEA,OAAAb,EAAAW,MAAAC,KAAAZ,EAAAsB,UAAAF,wBCtBA,SAAAG,EAAAC,+BAJA,wBAQAT,EAAAzB,UAAAa,MAAA,oDAIAY,EAAAzB,UAAAe,OAAA,qDAIAU,EAAAzB,UAAAiB,QAAA,sDAIAQ,EAAAzB,UAAAmC,OAAA,SAAAC,EAAAC,aApBAZ,0BAPA,CAAAY,KAAEC,EAAAA,mECJF,IAMAC,EAAA,CACE,CAAEC,QAASC,EAAAA,MAAWC,SAAUjB,GAChC,CAAEe,QAASf,EAAOiB,SAAUjB,IAM9BkB,EAAA,yBAHA,OAOAA,EAAAC,aAAA,qBAPAD,EAGA,GADAA"
}
