{
  "version": 3,
  "file": "ngx-modialog-plugins-js-native.js",
  "sources": [
    "ng://ngx-modialog/plugins/js-native/projects/plugins/js-native/src/lib/js-native.module.ts",
    "ng://ngx-modialog/plugins/js-native/projects/plugins/js-native/src/lib/modal.ts",
    "ng://ngx-modialog/plugins/js-native/projects/plugins/js-native/src/lib/presets/js-native-preset.ts",
    "ng://ngx-modialog/plugins/js-native/projects/plugins/js-native/src/lib/js-native-modal-renderer.ts",
    "ng://ngx-modialog/plugins/js-native/projects/plugins/js-native/src/lib/modal-context.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\n\nimport { Modal as BaseModal } from 'ngx-modialog';\n\nimport { Modal } from './modal';\n\nexport const providers: any[] = [\n  { provide: BaseModal, useClass: Modal },\n  { provide: Modal, useClass: Modal }\n];\n\n@NgModule({\n  providers\n})\nexport class JSNativeModalModule {\n\n  static getProviders(): any[] {\n    return providers;\n  }\n\n}\n",
    "import { Injectable } from '@angular/core';\n\nimport {\n  DialogRef,\n  Overlay,\n  DROP_IN_TYPE,\n  Modal as Modal_\n} from 'ngx-modialog';\n\nimport { JSNativePresetBuilder } from './presets/js-native-preset';\n\n@Injectable()\nexport class Modal extends Modal_ {\n  constructor(overlay: Overlay) {\n    super(overlay);\n  }\n\n  alert(): JSNativePresetBuilder {\n    return new JSNativePresetBuilder(this, DROP_IN_TYPE.alert);\n  }\n\n  prompt(): JSNativePresetBuilder {\n    return new JSNativePresetBuilder(this, DROP_IN_TYPE.prompt);\n  }\n\n  confirm(): JSNativePresetBuilder {\n    return new JSNativePresetBuilder(this, DROP_IN_TYPE.confirm);\n  }\n\n  protected create(dialogRef: DialogRef<any>, type: any): DialogRef<any> {\n    return dialogRef;\n  }\n\n}\n\n\n\n",
    "import { ViewContainerRef } from '@angular/core';\nimport { DialogRef, DROP_IN_TYPE, OverlayConfig } from 'ngx-modialog';\nimport { Modal } from '../modal';\n\nimport {\n  JSNativeModalContext,\n  JSNativeModalContextBuilder\n} from '../modal-context';\nimport { JSNativeModalRenderer } from '../js-native-modal-renderer';\n\nexport class JSNativePresetBuilder extends JSNativeModalContextBuilder<JSNativeModalContext> {\n\n  constructor(modal: Modal, dialogType: DROP_IN_TYPE) {\n    super(<any>{modal, dialogType});\n  }\n\n  /**\n   * Open a modal window based on the configuration of this config instance.\n   * @param viewContainer If set opens the modal inside the supplied viewContainer\n   */\n  open(viewContainer?: ViewContainerRef): DialogRef<JSNativeModalContext> {\n    let context: JSNativeModalContext = this.toJSON();\n\n    if (!(context.modal instanceof Modal)) {\n      return <any>Promise.reject(new Error('Configuration Error: modal service not set.'));\n    }\n\n    this.$$beforeOpen(context);\n\n    let overlayConfig: OverlayConfig = {\n      context: context,\n      renderer: new JSNativeModalRenderer(),\n      viewContainer: viewContainer\n    };\n\n    return context.modal.open(context.component, overlayConfig);\n  }\n}\n\n",
    "import {\n  ViewContainerRef,\n  ComponentRef,\n  Injectable\n} from '@angular/core';\n\nimport {\n  DROP_IN_TYPE,\n  DialogRef,\n  OverlayRenderer,\n  ModalOverlay\n} from 'ngx-modialog';\n\n@Injectable()\nexport class JSNativeModalRenderer implements OverlayRenderer {\n\n  render(dialog: DialogRef<any>, vcRef: ViewContainerRef): ComponentRef<ModalOverlay> {\n\n    let result: string | boolean;\n    switch (dialog.context.dialogType) {\n      case DROP_IN_TYPE.alert:\n        window.alert(dialog.context.message);\n        result = true;\n        break;\n      case DROP_IN_TYPE.prompt:\n        result = window.prompt(dialog.context.message, dialog.context.promptDefault);\n        break;\n      case DROP_IN_TYPE.confirm:\n        result = window.confirm(dialog.context.message);\n        break;\n    }\n\n    dialog.destroy = () => {\n    };\n\n    if (result === false) {\n      dialog.dismiss();\n    } else {\n      dialog.close(result);\n    }\n\n    // we need to return ComponentRef<ModalOverlay> but a native dialog does'nt have that\n    // so we resolve an empty promise, the user of this renderer should expect that.\n    return {} as any;\n  }\n}\n\n",
    "import {\n  DROP_IN_TYPE,\n  ModalOpenContextBuilder,\n  ModalOpenContext,\n  FluentAssignMethod,\n  arrayUnion\n} from 'ngx-modialog';\n\nconst DEFAULT_SETTERS = [\n  'promptDefault'\n];\n\nexport class JSNativeModalContext extends ModalOpenContext {\n  promptDefault: string;\n  dialogType: DROP_IN_TYPE;\n\n  normalize(): void {\n    if (!this.message) this.message = '';\n    if (this.dialogType === undefined) this.dialogType = DROP_IN_TYPE.alert;\n  }\n}\n\n\nexport class JSNativeModalContextBuilder<T extends JSNativeModalContext>\nextends ModalOpenContextBuilder<T> {\n\n  /**\n   * The default value for the prompt input\n   */\n  promptDefault: FluentAssignMethod<string, this>;\n\n  constructor(defaultValues: T = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      defaultValues || <any>{},\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType || <any>JSNativeModalContext\n      // https://github.com/Microsoft/TypeScript/issues/7234\n    );\n  }\n}\n"
  ],
  "names": [
    "Modal",
    "BaseModal",
    "tslib_1.__extends"
  ],
  "mappings": "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"
}
