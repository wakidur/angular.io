import * as tslib_1 from "tslib";
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { DROP_IN_TYPE, ModalOpenContextBuilder, ModalOpenContext, arrayUnion } from 'ngx-modialog';
var /** @type {?} */ DEFAULT_SETTERS = [
    'promptDefault'
];
var JSNativeModalContext = /** @class */ (function (_super) {
    tslib_1.__extends(JSNativeModalContext, _super);
    function JSNativeModalContext() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    JSNativeModalContext.prototype.normalize = function () {
        if (!this.message)
            this.message = '';
        if (this.dialogType === undefined)
            this.dialogType = DROP_IN_TYPE.alert;
    };
    return JSNativeModalContext;
}(ModalOpenContext));
export { JSNativeModalContext };
function JSNativeModalContext_tsickle_Closure_declarations() {
    /** @type {?} */
    JSNativeModalContext.prototype.promptDefault;
    /** @type {?} */
    JSNativeModalContext.prototype.dialogType;
}
// unsupported: template constraints.
/**
 * @template T
 */
var JSNativeModalContextBuilder = /** @class */ (function (_super) {
    tslib_1.__extends(JSNativeModalContextBuilder, _super);
    /**
     * @param {?=} defaultValues
     * @param {?=} initialSetters
     * @param {?=} baseType
     */
    function JSNativeModalContextBuilder(defaultValues, initialSetters, baseType) {
        if (defaultValues === void 0) { defaultValues = undefined; }
        if (initialSetters === void 0) { initialSetters = undefined; }
        if (baseType === void 0) { baseType = undefined; }
        return _super.call(this, defaultValues || /** @type {?} */ ({}), arrayUnion(DEFAULT_SETTERS, initialSetters || []), baseType || /** @type {?} */ (JSNativeModalContext)) || this;
    }
    return JSNativeModalContextBuilder;
}(ModalOpenContextBuilder));
export { JSNativeModalContextBuilder };
function JSNativeModalContextBuilder_tsickle_Closure_declarations() {
    /**
     * The default value for the prompt input
     * @type {?}
     */
    JSNativeModalContextBuilder.prototype.promptDefault;
}
//# sourceMappingURL=modal-context.js.map
