{
  "version": 3,
  "file": "ngx-modialog-plugins-vex.umd.js",
  "sources": [
    "ng://ngx-modialog/plugins/vex/projects/plugins/vex/src/lib/vex.module.ts",
    "ng://ngx-modialog/plugins/vex/projects/plugins/vex/src/lib/modal.ts",
    "ng://ngx-modialog/plugins/vex/projects/plugins/vex/src/lib/vex-css-dialog-container.ts",
    "ng://ngx-modialog/plugins/vex/projects/plugins/vex/src/lib/presets/dropin-preset.ts",
    "ng://ngx-modialog/plugins/vex/projects/plugins/vex/src/lib/presets/dialog-preset.ts",
    "ng://ngx-modialog/plugins/vex/projects/plugins/vex/src/lib/modal-context.ts",
    "ng://ngx-modialog/plugins/vex/projects/plugins/vex/src/lib/dialog-form-modal.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ModalModule, Modal as BaseModal } from 'ngx-modialog';\n\nimport { Modal } from './modal';\nimport { DialogFormModal, FormDropIn, VEXDialogButtons } from './dialog-form-modal';\nimport { VexCSSDialogContainer } from './vex-css-dialog-container';\n\nexport const providers: any[] = [\n  { provide: BaseModal, useClass: Modal },\n  { provide: Modal, useClass: Modal }\n];\n\n@NgModule({\n  imports: [ ModalModule, CommonModule ],\n  declarations: [\n    VexCSSDialogContainer,\n    VEXDialogButtons,\n    FormDropIn,\n    DialogFormModal\n  ],\n  providers,\n  entryComponents: [\n    VexCSSDialogContainer,\n    DialogFormModal,\n    FormDropIn\n  ]\n})\nexport class VexModalModule {\n\n  static getProviders(): any[] {\n    return providers;\n  }\n\n}\n",
    "import { Observable, combineLatest } from 'rxjs';\n\nimport { Injectable } from '@angular/core';\n\nimport {\n  ContainerContent,\n  Overlay,\n  DialogRef,\n  DROP_IN_TYPE,\n  Modal as Modal_,\n  CSSBackdrop,\n  CSSDialogContainer,\n  PromiseCompleter\n} from 'ngx-modialog';\n\nimport { DropInPresetBuilder } from './presets/dropin-preset';\nimport { VexCSSDialogContainer } from './vex-css-dialog-container';\n\n// TODO: use DI factory for this.\n// TODO: consolidate dup code\nconst isDoc: boolean = !(typeof document === 'undefined' || !document);\n\nlet vexV3 = false;\n/**\n * Execute this method to flag that you are working with VEX version 3.\n */\nexport function vexV3Mode(): void {\n  vexV3 = true;\n}\n\n@Injectable()\nexport class Modal extends Modal_ {\n  constructor(overlay: Overlay) {\n    super(overlay);\n  }\n\n  alert(): DropInPresetBuilder {\n    return new DropInPresetBuilder(this, DROP_IN_TYPE.alert, {isBlocking: false} as any);\n  }\n\n  prompt(): DropInPresetBuilder {\n    return new DropInPresetBuilder(this, DROP_IN_TYPE.prompt, {\n      isBlocking: true,\n      keyboard: null\n    }  as any);\n  }\n\n  confirm(): DropInPresetBuilder {\n    return new DropInPresetBuilder(this, DROP_IN_TYPE.confirm, {\n      isBlocking: true,\n      keyboard: null\n    }  as any);\n  }\n\n  protected create(dialogRef: DialogRef<any>, content: ContainerContent): DialogRef<any> {\n    if (vexV3 === true) {\n      return this.createV3(dialogRef, content);\n    }\n\n    const backdropRef = this.createBackdrop(dialogRef, CSSBackdrop);\n    const containerRef = this.createContainer(dialogRef, VexCSSDialogContainer, content);\n\n    let overlay = dialogRef.overlayRef.instance;\n    let backdrop = backdropRef.instance;\n    let container = containerRef.instance;\n\n    if (dialogRef.inElement) {\n      overlay.insideElement();\n\n      overlay.setContainerStyle('position', 'relative')\n        .setContainerStyle('height', '100%')\n        .setContainerStyle('width', '100%');\n\n      backdrop.setStyle('position', 'absolute')\n        .setStyle('display', 'block')\n        .setStyle('height', '100%')\n        .setStyle('width', '100%');\n\n      container.setStyle('position', 'relative')\n        .setStyle('display', 'block')\n        .setStyle('height', '100%')\n        .setStyle('width', '100%');\n\n    } else {\n      overlay.fullscreen();\n    }\n\n    // add body class if this is the only dialog in the stack\n    if (isDoc && !document.body.classList.contains('vex-open')) {\n      document.body.classList.add('vex-open');\n    }\n\n    backdrop.addClass('vex-overlay');\n    container.addClass(`vex vex-theme-${dialogRef.context.className}`);\n\n    container.setStyle('display', 'block');\n\n    if (containerRef.location.nativeElement) {\n      containerRef.location.nativeElement.focus();\n    }\n\n    overlay.beforeDestroy(() => {\n      backdrop.addClass('vex-closing');\n      container.addClass('vex-closing');\n      const completer = new PromiseCompleter<void>();\n\n      let animationEnd$: Observable<any> = backdrop.myAnimationEnd$();\n\n      // TODO: the child element inside the container (vex-content) is the one with animation\n      // need to also wait for it to end, but this requires a reference to to it.\n      // the container itself is its parent, won't do.\n      // animationEnd$ = combineLatest.call(animationEnd$, container.myAnimationEnd$(), (s1, s2) => [s1,s2] );\n\n      animationEnd$.subscribe( sources => {\n        isDoc && this.overlay.groupStackLength(dialogRef) === 1 && document.body.classList.remove('vex-open');\n        completer.resolve();\n      });\n\n      return completer.promise;\n    });\n\n    container.apply(overlay);\n\n    return dialogRef;\n  }\n\n  private createV3(dialogRef: DialogRef<any>, content: ContainerContent): DialogRef<any> {\n\n    const backdropRef = this.createBackdrop(dialogRef, CSSBackdrop);\n    const containerRef = this.createContainer(dialogRef, CSSDialogContainer, content);\n\n    let overlay = dialogRef.overlayRef.instance;\n    let backdrop = backdropRef.instance;\n    let container = containerRef.instance;\n\n    dialogRef.inElement ? overlay.insideElement() : overlay.fullscreen();\n\n    // add body class if this is the only dialog in the stack\n    if (isDoc && !document.body.classList.contains('vex-open')) {\n      document.body.classList.add('vex-open');\n    }\n\n    overlay.addClass(`vex vex-theme-${dialogRef.context.className}`);\n    backdrop.addClass('vex-overlay');\n    container.addClass(dialogRef.context.contentClassName);\n    container.setStyle('display', 'block');\n    if (dialogRef.inElement) {\n      overlay.setStyle('padding', '0');\n      container.setStyle('margin-top', '20px');\n    }\n\n    if (containerRef.location.nativeElement) {\n      containerRef.location.nativeElement.focus();\n    }\n\n    if (dialogRef.context.className === 'bottom-right-corner') {\n      overlay.setStyle('overflow-y', 'hidden');\n      container.setStyle('position', 'absolute');\n    }\n\n    overlay.beforeDestroy(() => {\n      overlay.addClass('vex-closing');\n      const completer = new PromiseCompleter<void>();\n\n      let animationEnd$: Observable<any> = container.myAnimationEnd$();\n      if (dialogRef.context.className !== 'bottom-right-corner') {\n        animationEnd$ = combineLatest.call(animationEnd$, backdrop.myAnimationEnd$(), (s1, s2) => [s1,s2] );\n      }\n\n      animationEnd$.subscribe( sources => {\n        isDoc && this.overlay.groupStackLength(dialogRef) === 1 && document.body.classList.remove('vex-open');\n        completer.resolve();\n      });\n\n      return completer.promise;\n    });\n\n\n    overlay.setClickBoundary(containerRef.location.nativeElement);\n\n    return dialogRef;\n  }\n}\n",
    "import { Component, ElementRef, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { CSSDialogContainer, ModalOverlay } from 'ngx-modialog';\n\n\n/**\n * A component that acts as a top level container for an open modal window.\n */\n@Component({\n  selector: 'css-dialog-container',\n  host: {\n    'tabindex': '-1',\n    'role': 'dialog'\n  },\n  encapsulation: ViewEncapsulation.None,\n  template: `<div #clickBoundary class=\"{{dialog.context.contentClassName}}\"><ng-content></ng-content></div>`\n})\nexport class VexCSSDialogContainer extends CSSDialogContainer {\n  /**\n   * The div that wraps the content of the modal, by default use the class `vex-content`\n   */\n  @ViewChild('clickBoundary', {read: ElementRef}) public vexContentContainer: ElementRef;\n\n\n  apply(overlay: ModalOverlay): void {\n    overlay.setClickBoundary(this.vexContentContainer.nativeElement);\n\n    if (this.dialog.inElement) {\n      this.setStyle('padding', '20px 0 0 0');\n\n\n      if (this.dialog.context.className === 'bottom-right-corner') {\n        this.setStyle('overflow-y', 'hidden');\n        this.renderer.setStyle(this.vexContentContainer.nativeElement, 'position', 'absolute');\n      }\n    }\n\n  }\n}\n",
    "import {\n  DROP_IN_TYPE,\n  FluentAssignMethod,\n  extend\n} from 'ngx-modialog';\nimport { Modal } from '../modal';\nimport { DialogFormModal as component, FormDropIn as content } from '../dialog-form-modal';\nimport { DialogPreset, DialogPresetBuilder } from './dialog-preset';\n\nconst DEFAULT_VALUES = {\n  component,\n  content,\n  okBtn: 'OK',\n  cancelBtn: 'Cancel'\n};\n\nconst DEFAULT_SETTERS = [\n  'okBtn',\n  'cancelBtn',\n  'placeholder'\n];\n\n/**\n * Data definition\n */\nexport class DropInPreset extends DialogPreset {\n\n  /**\n   * the message to display on the modal.\n   */\n  message: string;\n\n  /**\n   * OK button caption.\n   * Default: OK\n   * Set to false ('', undefined, null, false) to remove button.\n   */\n  okBtn: string;\n\n  /**\n   * Cancel button caption.\n   * Default: Cancel\n   * Set to false ('', undefined, null, false) to remove button.\n   */\n  cancelBtn: string;\n\n  /**\n   * A placeholder for the input element.\n   * Valid only for prompt modal.\n   */\n  placeholder: string;\n\n  dropInType: DROP_IN_TYPE;\n\n  get showInput(): boolean {\n    return this.dropInType === DROP_IN_TYPE.prompt;\n  }\n}\n\n/**\n * A Preset representing all 3 drop ins (alert, prompt, confirm)\n */\nexport class DropInPresetBuilder extends DialogPresetBuilder<DropInPreset> {\n\n  /**\n   * the message to display on the modal.\n   */\n  message: FluentAssignMethod<string, this>;\n\n  /**\n   * The default Ok button caption.\n   */\n  okBtn: FluentAssignMethod<string, this>;\n\n  /**\n   * The default Cancel button caption.\n   */\n  cancelBtn: FluentAssignMethod<string, this>;\n\n  /**\n   * A placeholder for the input element.\n   * Valid only for prompt modal.\n   */\n  placeholder: FluentAssignMethod<string, this>;\n\n  constructor(modal: Modal, dropInType: DROP_IN_TYPE, defaultValues: DropInPreset = undefined) {\n    super(\n      modal,\n      extend<any>(extend({modal, dropInType}, DEFAULT_VALUES), defaultValues || {}),\n      DEFAULT_SETTERS,\n      DropInPreset\n    );\n  }\n\n  $$beforeOpen(config: DropInPreset): void {\n    super.$$beforeOpen(config);\n\n    if (config.okBtn) {\n      this.addOkButton(config.okBtn);\n    }\n\n    switch (config.dropInType) {\n      case DROP_IN_TYPE.prompt:\n        config.defaultResult = undefined;\n        break;\n      case DROP_IN_TYPE.confirm:\n        if (config.cancelBtn) {\n          this.addCancelButton(config.cancelBtn);\n        }\n        break;\n    }\n  }\n}\n",
    "import { Type } from '@angular/core';\nimport {\n  FluentAssignMethod,\n  privateKey,\n  extend,\n  arrayUnion\n} from 'ngx-modialog';\nimport { VEXModalContext, VEXModalContextBuilder } from '../modal-context';\nimport { Modal } from '../modal';\nimport {\n  DialogFormModal as component,\n  VEXButtonHandler,\n  VEXButtonConfig\n} from '../dialog-form-modal';\n\n\nconst DEFAULT_SETTERS = [\n  'content'\n];\n\n/**\n * Data definition\n */\nexport class DialogPreset extends VEXModalContext {\n  defaultResult: any;\n  content: Type<any>;\n  buttons: VEXButtonConfig[];\n  showInput: any;\n}\n\n/**\n * A Preset representing the configuration needed to open MessageModal.\n * This is an abstract implementation with no concrete behaviour.\n * Use derived implementation.\n */\nexport class DialogPresetBuilder<T extends DialogPreset>\nextends VEXModalContextBuilder<T> {\n  /**\n   * the message to display on the modal.\n   */\n  content: FluentAssignMethod<Type<any>, this>;\n\n  constructor(modal: Modal,\n              defaultValues: T = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      extend<any>({modal, component, buttons: [], defaultResult: true}, defaultValues || {}),\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType || <any>DialogPreset // https://github.com/Microsoft/TypeScript/issues/7234\n    );\n  }\n\n  addButton(css: string, caption: string, onClick: VEXButtonHandler): this {\n    let btn = {\n      cssClass: css,\n      caption: caption,\n      onClick: onClick\n    };\n\n    let key = privateKey('buttons');\n    (this[key] as VEXButtonConfig[]).push(btn);\n\n    return this;\n  }\n\n  addOkButton(text: string = 'OK'): this {\n    this.addButton(\n      'vex-dialog-button-primary vex-dialog-button vex-first',\n      text,\n      (cmp: component, $event: MouseEvent) => cmp.dialog.close(cmp.dialog.context.defaultResult)\n    );\n    return this;\n  }\n\n  addCancelButton(text: string = 'CANCEL'): this {\n    this.addButton(\n      'vex-dialog-button-secondary vex-dialog-button vex-last',\n      text,\n      (cmp: component, $event: MouseEvent) => cmp.dialog.dismiss()\n    );\n    return this;\n  }\n}\n",
    "import {\n  ModalOpenContext,\n  ModalOpenContextBuilder,\n  FluentAssignMethod,\n  privateKey,\n  extend,\n  arrayUnion\n} from 'ngx-modialog';\n\n\nconst DEFAULT_VALUES = {\n  className: <VEXBuiltInThemes>'default',\n  overlayClassName: 'vex-overlay',\n  contentClassName: 'vex-content',\n  closeClassName: 'vex-close'\n};\n\nconst DEFAULT_SETTERS = [\n  'className',\n  'overlayClassName',\n  'contentClassName',\n  'closeClassName',\n  'showCloseButton'\n];\n\nexport type VEXBuiltInThemes\n  = 'default' | 'os' | 'plain' | 'wireframe' | 'flat-attack' | 'top' | 'bottom-right-corner';\n\nexport class VEXModalContext extends ModalOpenContext {\n  /**\n   * Set the built in schema to use.\n   */\n  className: VEXBuiltInThemes;\n\n  overlayClassName: string;\n  contentClassName: string;\n  closeClassName: string;\n\n  showCloseButton: boolean;\n\n\n  normalize(): void {\n    if (!this.className) {\n      this.className = DEFAULT_VALUES.className;\n    }\n\n    if (!this.overlayClassName) {\n      this.overlayClassName = DEFAULT_VALUES.overlayClassName;\n    }\n\n    if (!this.contentClassName) {\n      this.contentClassName = DEFAULT_VALUES.contentClassName;\n    }\n\n    if (!this.closeClassName) {\n      this.closeClassName = DEFAULT_VALUES.closeClassName;\n    }\n\n    super.normalize();\n  }\n}\n\nexport class VEXModalContextBuilder<T extends VEXModalContext> extends ModalOpenContextBuilder<T> {\n  /**\n   * Set the built in schema to use.\n   */\n  className: FluentAssignMethod<VEXBuiltInThemes, this>;\n\n  overlayClassName: FluentAssignMethod<string, this>;\n  contentClassName: FluentAssignMethod<string, this>;\n  closeClassName: FluentAssignMethod<string, this>;\n\n  showCloseButton: FluentAssignMethod<boolean, this>;\n\n  constructor(defaultValues: T = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      extend<any>(DEFAULT_VALUES, defaultValues || {}),\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType || <any>VEXModalContext // https://github.com/Microsoft/TypeScript/issues/7234\n    );\n  }\n\n  /**\n   *\n   * @aliasFor isBlocking\n   */\n  overlayClosesOnClick(value: boolean): this {\n    this[privateKey('isBlocking')] = !value;\n    return this;\n  }\n}\n",
    "import {\n  Component,\n  ViewEncapsulation,\n  Input,\n  Output,\n  EventEmitter\n} from '@angular/core';\n\nimport {\n  DialogRef,\n  ModalComponent\n} from 'ngx-modialog';\n\nimport { DialogPreset } from './presets/dialog-preset';\nimport { DropInPreset } from './presets/dropin-preset';\n\nexport interface VEXButtonHandler {\n  (cmp: ModalComponent<DialogPreset>, $event: MouseEvent): void;\n}\n\n/**\n * Interface for button definition\n */\nexport interface VEXButtonConfig {\n  cssClass: string;\n  caption: string;\n  onClick: VEXButtonHandler;\n}\n\nexport interface VEXButtonClickEvent {\n  btn: VEXButtonConfig;\n  $event: MouseEvent;\n}\n\n/**\n * A Dialog is a\n */\n@Component({\n  selector: 'vex-dialog-buttons',\n  encapsulation: ViewEncapsulation.None,\n  template: `<div class=\"vex-dialog-buttons\">\n    <button type=\"button\" \n         *ngFor=\"let btn of buttons;\"\n         [class]=\"btn.cssClass\"\n         (click)=\"onClick(btn, $event)\">{{btn.caption}}</button>\n</div>`\n})\nexport class VEXDialogButtons {\n\n  /**\n   * A collection of button configurations, each configuration is a button to display.\n   */\n  @Input() public buttons: VEXButtonConfig[];\n\n  /**\n   * Emitted when a button was clicked\n   */\n  @Output() public onButtonClick = new EventEmitter<VEXButtonClickEvent>();\n\n  onClick(btn: any, $event: MouseEvent) {\n    $event.stopPropagation();\n    this.onButtonClick.emit({btn, $event});\n  }\n}\n\n/**\n * A Dialog with customized buttons wrapped in a form.\n *\n */\n@Component({\n  selector: 'modal-dialog',\n  encapsulation: ViewEncapsulation.None,\n  template: `<form class=\"vex-dialog-form\">\n    <ng-container *ngComponentOutlet=\"context.content\"></ng-container>\n    <vex-dialog-buttons [buttons]=\"context.buttons\"\n                        (onButtonClick)=\"onButtonClick($event)\"></vex-dialog-buttons>\n</form>`\n})\nexport class DialogFormModal implements ModalComponent<DialogPreset> {\n  public context: DialogPreset;\n\n  constructor(public dialog: DialogRef<DialogPreset>) {\n    this.context = dialog.context;\n  }\n\n  onButtonClick($event: VEXButtonClickEvent) {\n    $event.btn.onClick(this, $event.$event);\n  }\n}\n\n@Component({\n  selector: 'drop-in-dialog',\n  encapsulation: ViewEncapsulation.None,\n  template:\n`<div class=\"vex-dialog-message\">{{context.message}}</div>\n <div *ngIf=\"context.showInput\" class=\"vex-dialog-input\">\n   <input #input\n          autofocus\n          name=\"vex\" \n          type=\"text\" \n          class=\"vex-dialog-prompt-input\"\n           (change)=\"context.defaultResult = input.value\" \n          placeholder=\"{{context.placeholder}}\">\n </div>\n <div *ngIf=\"context.showCloseButton\" \n      [class]=\"context.closeClassName\"\n      (click)=\"dialog.dismiss()\"></div>`\n})\nexport class FormDropIn implements ModalComponent<DropInPreset> {\n  public context: DropInPreset;\n\n  constructor(public dialog: DialogRef<DropInPreset>) {\n    this.context = dialog.context;\n  }\n}\n"
  ],
  "names": [
    "ModalModule",
    "CommonModule",
    "NgModule",
    "Modal",
    "BaseModal",
    "combineLatest",
    "PromiseCompleter",
    "CSSDialogContainer",
    "CSSBackdrop",
    "DROP_IN_TYPE",
    "Component",
    "extend",
    "DEFAULT_VALUES",
    "DEFAULT_SETTERS",
    "content",
    "component",
    "privateKey",
    "arrayUnion",
    "tslib_1.__extends",
    "DialogRef",
    "ViewEncapsulation",
    "EventEmitter"
  ],
  "mappings": "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"
}
