{
  "version": 3,
  "file": "modal-context.js",
  "sources": [
    "ng://ngx-modialog/plugins/bootstrap/projects/plugins/bootstrap/src/lib/modal-context.ts"
  ],
  "sourcesContent": [
    "import {\n  ModalOpenContext,\n  ModalOpenContextBuilder,\n  FluentAssignMethod,\n  extend,\n  arrayUnion\n} from 'ngx-modialog';\n\nconst DEFAULT_VALUES = {\n    dialogClass: 'modal-dialog',\n    showClose: false\n};\n\nconst DEFAULT_SETTERS = [\n    'dialogClass',\n    'size',\n    'showClose'\n];\n\n\nexport type BootstrapModalSize = 'sm' | 'lg';\n\nexport class BSModalContext extends ModalOpenContext {\n    /**\n     * A Class for the modal dialog container.\n     * Default: modal-dialog\n     */\n    dialogClass: string;\n\n    /**\n     * Size of the modal. 'lg' or 'sm' only.\n     *\n     * If you want to use custom sizes leave this empty and set the dialogClass property.\n     * e.g: dialogClass = 'modal-dialog my-custom-dialog`\n     * NOTE: No validation.\n     * Default: ''\n     */\n    size: BootstrapModalSize;\n\n    /**\n     * When true, show a close button on the top right corner.\n     */\n    showClose: boolean;\n\n    normalize(): void {\n        if (!this.dialogClass) {\n            this.dialogClass = DEFAULT_VALUES.dialogClass;\n        }\n\n        super.normalize();\n    }\n}\n\n\nexport class BSModalContextBuilder<T extends BSModalContext> extends ModalOpenContextBuilder<T> {\n    /**\n     * A Class for the modal dialog container.\n     * Default: modal-dialog\n     */\n    dialogClass: FluentAssignMethod<string, this>;\n\n    /**\n     * Size of the modal. 'lg' or 'sm' only.\n     *\n     * If you want to use custom sizes leave this empty and set the dialogClass property.\n     * e.g: dialogClass = 'modal-dialog my-custom-dialog`\n     * NOTE: No validation.\n     * Default: ''\n     */\n    size: FluentAssignMethod<BootstrapModalSize, this>;\n\n\n    /**\n     * When true, show a close button on the top right corner.\n     */\n    showClose: FluentAssignMethod<boolean, this>;\n\n    constructor(\n        defaultValues: T = undefined,\n        initialSetters: string[] = undefined,\n        baseType: any = undefined\n    ) {\n        super(\n            extend<any>(DEFAULT_VALUES, defaultValues || {}),\n            arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n            baseType || <any>BSModalContext // https://github.com/Microsoft/TypeScript/issues/7234\n        );\n    }\n}\n\n"
  ],
  "names": [],
  "mappings": ";;;;AAAA,OAAO,EACL,gBAAgB,EAChB,uBAAuB,EAEvB,MAAM,EACN,UAAU,EACX,MAAM,cAAc,CAAC;AAEtB,uBAAM,cAAc,GAAG;IACnB,WAAW,EAAE,cAAc;IAC3B,SAAS,EAAE,KAAK;CACnB,CAAC;AAEF,uBAAM,eAAe,GAAG;IACpB,aAAa;IACb,MAAM;IACN,WAAW;CACd,CAAC;AAKF,MAAM,qBAAsB,SAAQ,gBAAgB;;;;IAsBhD,SAAS;QACL,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,WAAW,GAAG,cAAc,CAAC,WAAW,CAAC;SACjD;QAED,KAAK,CAAC,SAAS,EAAE,CAAC;KACrB;CACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGD,MAAM,4BAAuD,SAAQ,uBAA0B;;;;;;IAuB3F,YACI,gBAAmB,SAAS,EAC5B,iBAA2B,SAAS,EACpC,WAAgB,SAAS;QAEzB,KAAK,CACD,MAAM,CAAM,cAAc,EAAE,aAAa,IAAI,EAAE,CAAC,EAChD,UAAU,CAAS,eAAe,EAAE,cAAc,IAAI,EAAE,CAAC,EACzD,QAAQ,sBAAS,cAAc,CAAC,sDAAsD;SAAvD;SAClC,CAAC;KACL;CACJ"
}
