{
  "version": 3,
  "file": "ngx-modialog-plugins-bootstrap.umd.min.js",
  "sources": [
    "ng://ngx-modialog/plugins/bootstrap/projects/plugins/bootstrap/src/lib/modal-context.ts",
    "ng://ngx-modialog/plugins/bootstrap/projects/plugins/bootstrap/src/lib/modal-container.component.ts",
    "ng://ngx-modialog/plugins/bootstrap/projects/plugins/bootstrap/src/lib/message-modal.component.ts",
    "ng://ngx-modialog/plugins/bootstrap/projects/plugins/bootstrap/src/lib/presets/message-modal-preset.ts",
    "ng://ngx-modialog/plugins/bootstrap/projects/plugins/bootstrap/src/lib/presets/one-button-preset.ts",
    "ng://ngx-modialog/plugins/bootstrap/projects/plugins/bootstrap/src/lib/presets/two-button-preset.ts",
    "ng://ngx-modialog/plugins/bootstrap/projects/plugins/bootstrap/src/lib/modal.ts",
    "ng://ngx-modialog/plugins/bootstrap/projects/plugins/bootstrap/src/lib/bootstrap.module.ts"
  ],
  "sourcesContent": [
    "import {\n  ModalOpenContext,\n  ModalOpenContextBuilder,\n  FluentAssignMethod,\n  extend,\n  arrayUnion\n} from 'ngx-modialog';\n\nconst DEFAULT_VALUES = {\n    dialogClass: 'modal-dialog',\n    showClose: false\n};\n\nconst DEFAULT_SETTERS = [\n    'dialogClass',\n    'size',\n    'showClose'\n];\n\n\nexport type BootstrapModalSize = 'sm' | 'lg';\n\nexport class BSModalContext extends ModalOpenContext {\n    /**\n     * A Class for the modal dialog container.\n     * Default: modal-dialog\n     */\n    dialogClass: string;\n\n    /**\n     * Size of the modal. 'lg' or 'sm' only.\n     *\n     * If you want to use custom sizes leave this empty and set the dialogClass property.\n     * e.g: dialogClass = 'modal-dialog my-custom-dialog`\n     * NOTE: No validation.\n     * Default: ''\n     */\n    size: BootstrapModalSize;\n\n    /**\n     * When true, show a close button on the top right corner.\n     */\n    showClose: boolean;\n\n    normalize(): void {\n        if (!this.dialogClass) {\n            this.dialogClass = DEFAULT_VALUES.dialogClass;\n        }\n\n        super.normalize();\n    }\n}\n\n\nexport class BSModalContextBuilder<T extends BSModalContext> extends ModalOpenContextBuilder<T> {\n    /**\n     * A Class for the modal dialog container.\n     * Default: modal-dialog\n     */\n    dialogClass: FluentAssignMethod<string, this>;\n\n    /**\n     * Size of the modal. 'lg' or 'sm' only.\n     *\n     * If you want to use custom sizes leave this empty and set the dialogClass property.\n     * e.g: dialogClass = 'modal-dialog my-custom-dialog`\n     * NOTE: No validation.\n     * Default: ''\n     */\n    size: FluentAssignMethod<BootstrapModalSize, this>;\n\n\n    /**\n     * When true, show a close button on the top right corner.\n     */\n    showClose: FluentAssignMethod<boolean, this>;\n\n    constructor(\n        defaultValues: T = undefined,\n        initialSetters: string[] = undefined,\n        baseType: any = undefined\n    ) {\n        super(\n            extend<any>(DEFAULT_VALUES, defaultValues || {}),\n            arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n            baseType || <any>BSModalContext // https://github.com/Microsoft/TypeScript/issues/7234\n        );\n    }\n}\n\n",
    "import {\n  Component,\n  ElementRef,\n  ViewEncapsulation,\n  Renderer2\n} from '@angular/core';\n\nimport { BaseDynamicComponent, DialogRef } from 'ngx-modialog';\n\nimport { MessageModalPreset } from'./presets/message-modal-preset';\n\n@Component({\n  selector: 'bs-modal-container',\n  host: {\n    'tabindex': '-1',\n    'role': 'dialog',\n    'class': 'modal fade',\n    'style': 'position: absolute; display: block'\n  },\n  encapsulation: ViewEncapsulation.None,\n  template:\n`<div [ngClass]=\"dialog.context.dialogClass\"\n      [class.modal-lg]=\"dialog.context.size == \\'lg\\'\"\n      [class.modal-sm]=\"dialog.context.size == \\'sm\\'\">\n  <div class=\"modal-content\" style=\"display:block\" role=\"document\" overlayDialogBoundary>\n    <ng-content></ng-content>\n  </div>\n</div>`\n})\nexport class BSModalContainer extends BaseDynamicComponent {\n   constructor(public dialog: DialogRef<MessageModalPreset>,\n              el: ElementRef, renderer: Renderer2) {\n    super(el, renderer);\n    this.activateAnimationListener();\n  }\n}\n",
    "import { Component, ViewEncapsulation } from '@angular/core';\n\nimport { DialogRef, ModalComponent } from 'ngx-modialog';\n\nimport { MessageModalPreset } from './presets/message-modal-preset';\n\nexport interface BSMessageModalButtonHandler {\n  (cmp: ModalComponent<MessageModalPreset>, $event: MouseEvent): void;\n}\n\n/**\n * Interface for button definition\n */\nexport interface BSMessageModalButtonConfig {\n  cssClass: string;\n  caption: string;\n  onClick: BSMessageModalButtonHandler;\n}\n\n@Component({\n  selector: 'modal-title',\n  encapsulation: ViewEncapsulation.None,\n  template: `<div [ngClass]=\"context.headerClass\" [ngSwitch]=\"titleHtml\">\n      <button *ngIf=\"context.showClose\" type=\"button\" class=\"close\"\n              aria-label=\"Close\" (click)=\"dialog.dismiss()\">\n          <span aria-hidden=\"true\">Ã—</span>\n      </button>\n      <div *ngSwitchCase=\"1\" [innerHtml]=\"context.titleHtml\"></div>\n      <h3 *ngSwitchDefault class=\"modal-title\">{{context.title}}</h3>\n </div>`\n})\nexport class BSMessageModalTitle {\n  public context: MessageModalPreset;\n\n  constructor(public dialog: DialogRef<MessageModalPreset>) {\n    this.context = dialog.context;\n  }\n\n  get titleHtml(): number {\n    return this.context.titleHtml ? 1 : 0;\n  }\n}\n\n@Component({\n  selector: 'modal-body',\n  encapsulation: ViewEncapsulation.None,\n  styles: [`.form-group {\n    margin-top: 10px;\n  }`],\n  template: `<div [ngClass]=\"context.bodyClass\">\n    <div [innerHtml]=\"context.message\"></div>\n      <div *ngIf=\"context.showInput\" class=\"form-group\">\n        <input autofocus #input\n            name=\"bootstrap\"\n            type=\"text\"\n            class=\"form-control\"\n            [value]=\"context.defaultValue\"\n            (change)=\"context.defaultValue = input.value\"\n            placeholder=\"{{context.placeholder}}\">\n      </div>\n    </div>\n`\n})\nexport class BSMessageModalBody {\n  public context: MessageModalPreset & {\n    showInput: boolean;\n    /** Default value shown in the prompt. */\n    defaultValue: string;\n    /** A placeholder for the input element. */\n    placeholder: string;\n  };\n\n  constructor(public dialog: DialogRef<MessageModalPreset>) {\n    this.context = <any> dialog.context;\n  }\n}\n\n\n/**\n * Represents the modal footer for storing buttons.\n */\n@Component({\n  selector: 'modal-footer',\n  encapsulation: ViewEncapsulation.None,\n  template: `<div [ngClass]=\"dialog.context.footerClass\">\n    <button *ngFor=\"let btn of dialog.context.buttons;\"\n            [ngClass]=\"btn.cssClass\"\n            (click)=\"onClick(btn, $event)\">{{btn.caption}}</button>\n</div>`\n})\nexport class BSModalFooter {\n  constructor(public dialog: DialogRef<MessageModalPreset>) {\n  }\n\n  onClick(btn: BSMessageModalButtonConfig, $event: MouseEvent) {\n    $event.stopPropagation();\n    btn.onClick(this, $event);\n  }\n}\n\n/**\n * A Component representing a generic bootstrap modal content element.\n *\n * By configuring a MessageModalContext instance you can:\n *\n *  Header:\n *      - Set header container class (default: modal-header)\n *      - Set title text (enclosed in H3 element)\n *      - Set title html (overrides text)\n *\n *  Body:\n *      - Set body container class.  (default: modal-body)\n *      - Set body container HTML.\n *\n *  Footer:\n *      - Set footer class.  (default: modal-footer)\n *      - Set button configuration (from 0 to n)\n */\n@Component({\n  selector: 'modal-content',\n  encapsulation: ViewEncapsulation.None,\n  template: `<modal-title></modal-title><modal-body></modal-body><modal-footer></modal-footer>`\n})\nexport class BSMessageModal implements ModalComponent<MessageModalPreset> {\n  constructor(public dialog: DialogRef<MessageModalPreset>) {\n  }\n}\n",
    "import {\n  FluentAssignMethod,\n  privateKey,\n  setAssignAlias,\n  extend,\n  arrayUnion\n} from 'ngx-modialog';\nimport {\n  BSMessageModal,\n  BSMessageModalButtonConfig,\n  BSMessageModalButtonHandler\n} from '../message-modal.component';\nimport { BSModalContext, BSModalContextBuilder }  from '../modal-context';\n\n\nconst DEFAULT_VALUES = {\n  component: BSMessageModal,\n  headerClass: 'modal-header',\n  bodyClass: 'modal-body',\n  footerClass: 'modal-footer'\n};\n\nconst DEFAULT_SETTERS = [\n  'headerClass',\n  'title',\n  'titleHtml',\n  'bodyClass',\n  'footerClass'\n];\n\n\n/**\n * Data definition\n */\nexport interface MessageModalPreset extends BSModalContext {\n\n  /**\n   * A Class for the header (title) container.\n   * Default: modal-header\n   */\n  headerClass: string;\n\n  /**\n   * Caption for the title, enclosed in a H3 container.\n   */\n  title: string;\n\n  /**\n   * HTML for the title, if set overrides title property.\n   * The HTML is wrapped in a DIV element, inside the header container.\n   * Example:\n   <div class=\"modal-header\">\n   <div> HTML CONTENT INSERTED HERE </div>\n   </div>\n   * Note: HTML is not compiled.\n   */\n  titleHtml: string;\n\n  /**\n   * aliased by 'body'\n   * @aliasedBy body\n   */\n  message: string;\n\n  /**\n   * The body of the modal.\n   * Can be either text or HTML.\n   * Note: When using HTML, the template is not compiled. (binding and expression will not parse)\n   * @aliasOf message\n   */\n  body: string;\n\n  /**\n   * A Class for the body container.\n   * Default: modal-body\n   */\n  bodyClass: string;\n\n  /**\n   * A Class for the footer container.\n   * Default: modal-footer\n   */\n  footerClass: string;\n\n  buttons: BSMessageModalButtonConfig[];\n  showInput?: any;\n}\n\n/**\n * A Preset representing the configuration needed to open MessageModal.\n * This is an abstract implementation with no concrete behaviour.\n * Use derived implementation.\n */\nexport abstract class MessageModalPresetBuilder<T extends MessageModalPreset>\n                                                extends BSModalContextBuilder<T> {\n\n  /**\n   * A Class for the header (title) container.\n   * Default: modal-header\n   */\n  headerClass: FluentAssignMethod<string, this>;\n\n  /**\n   * Caption for the title, enclosed in a H3 container.\n   */\n  title: FluentAssignMethod<string, this>;\n\n  /**\n   * HTML for the title, if set overrides title property.\n   * The HTML is wrapped in a DIV element, inside the header container.\n   * Example:\n   <div class=\"modal-header\">\n   <div> HTML CONTENT INSERTED HERE </div>\n   </div>\n   * Note: HTML is not compiled.\n   */\n  titleHtml: FluentAssignMethod<string, this>;\n\n  /**\n   * aliased by 'body'\n   * @aliasedBy body\n   */\n  message: FluentAssignMethod<string, this>;\n\n  /**\n   * The body of the modal.\n   * Can be either text or HTML.\n   * Note: When using HTML, the template is not compiled. (binding and expression will not parse)\n   * @aliasOf message\n   */\n  body: FluentAssignMethod<string, this>;\n\n  /**\n   * A Class for the body container.\n   * Default: modal-body\n   */\n  bodyClass: FluentAssignMethod<string, this>;\n\n  /**\n   * A Class for the footer container.\n   * Default: modal-footer\n   */\n  footerClass: FluentAssignMethod<string, this>;\n\n  constructor(defaultValues: T = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      extend<any>(extend({buttons: []}, DEFAULT_VALUES), defaultValues || {}),\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType\n    );\n\n    setAssignAlias(this, 'body', 'message', true);\n  }\n\n  addButton(css: string, caption: string, onClick: BSMessageModalButtonHandler): this {\n    let btn = {\n      cssClass: css,\n      caption: caption,\n      onClick: onClick\n    };\n\n    let key = privateKey('buttons');\n    (this[key] as BSMessageModalButtonConfig[]).push(btn);\n\n    return this;\n  }\n}\n",
    "import { Modal, FluentAssignMethod, extend } from 'ngx-modialog';\nimport { BSMessageModal } from '../message-modal.component';\nimport { MessageModalPresetBuilder, MessageModalPreset } from './message-modal-preset';\n\nexport interface OneButtonPreset extends MessageModalPreset {\n  /**\n   * Caption for the OK button.\n   * Default: OK\n   */\n  okBtn: string;\n\n  /**\n   * A Class for the OK button.\n   * Default: btn btn-primary\n   */\n  okBtnClass: string;\n}\n\n/**\n * A Preset for a classic 1 button modal window.\n */\nexport class OneButtonPresetBuilder extends MessageModalPresetBuilder<OneButtonPreset> {\n  okBtn: FluentAssignMethod<string, this>;\n  okBtnClass: FluentAssignMethod<string, this>;\n\n  constructor(modal: Modal, defaultValues: OneButtonPreset = undefined) {\n    super(extend<any>({\n      modal: modal,\n      okBtn: 'OK',\n      okBtnClass: 'btn btn-primary'\n    }, defaultValues || {}), [\n      'okBtn',\n      'okBtnClass'\n    ]);\n  }\n\n  $$beforeOpen(config: OneButtonPreset): void {\n    super.$$beforeOpen(config);\n\n    this.addButton(\n      config.okBtnClass,\n      config.okBtn,\n      (cmp: BSMessageModal, $event: MouseEvent) => cmp.dialog.close(true)\n    );\n  }\n}\n\n",
    "import {\n  Modal,\n  FluentAssignMethod,\n  extend,\n  arrayUnion\n} from 'ngx-modialog';\nimport { BSMessageModal } from '../message-modal.component';\nimport { MessageModalPresetBuilder } from './message-modal-preset';\nimport { OneButtonPreset } from './one-button-preset';\n\n\nexport interface TwoButtonPreset extends OneButtonPreset {\n  /**\n   * Caption for the Cancel button.\n   * Default: Cancel\n   */\n  cancelBtn: string;\n\n  /**\n   * A Class for the Cancel button.\n   * Default: btn btn-default\n   */\n  cancelBtnClass: string;\n}\n\n/** Common two button preset */\nexport abstract class AbstractTwoButtonPresetBuilder extends MessageModalPresetBuilder<TwoButtonPreset> {\n  okBtn: FluentAssignMethod<string, this>;\n  okBtnClass: FluentAssignMethod<string, this>;\n  cancelBtn: FluentAssignMethod<string, this>;\n  cancelBtnClass: FluentAssignMethod<string, this>;\n\n  constructor(modal: Modal, defaultValues: TwoButtonPreset = undefined,\n              initialSetters: string[] = []) {\n    super(extend<any>({\n      modal: modal,\n      okBtn: 'OK',\n      okBtnClass: 'btn btn-primary',\n      cancelBtn: 'Cancel',\n      cancelBtnClass: 'btn btn-default'\n    }, defaultValues || {}), arrayUnion<string>([\n      'okBtn',\n      'okBtnClass',\n      'cancelBtn',\n      'cancelBtnClass',\n    ], initialSetters));\n  }\n\n  $$beforeOpen(config: TwoButtonPreset): void {\n    super.$$beforeOpen(config);\n    this.addButton(\n      config.cancelBtnClass,\n      config.cancelBtn,\n      (cmp: BSMessageModal, $event: MouseEvent) => cmp.dialog.dismiss()\n    );\n  }\n}\n\n/**\n * A Preset for a classic 2 button modal window.\n */\nexport class TwoButtonPresetBuilder extends AbstractTwoButtonPresetBuilder {\n\n  constructor(modal: Modal, defaultValues: TwoButtonPreset = undefined) {\n    super(modal, defaultValues);\n  }\n\n  $$beforeOpen(config: TwoButtonPreset): void {\n    super.$$beforeOpen(config);\n    this.addButton(\n      config.okBtnClass,\n      config.okBtn,\n      (cmp: BSMessageModal, $event: MouseEvent) => cmp.dialog.close(true)\n    );\n  }\n}\n\nexport interface PromptPreset extends TwoButtonPreset {\n  showInput: boolean;\n  /** Default value shown in the prompt. */\n  defaultValue: string;\n  /** A placeholder for the input element. */\n  placeholder: string;\n\n}\n\nexport class PromptPresetBuilder extends AbstractTwoButtonPresetBuilder {\n  placeholder: FluentAssignMethod<string, this>;\n  defaultValue: FluentAssignMethod<string, this>;\n\n  constructor(modal: Modal, defaultValues: PromptPreset = undefined) {\n    super(modal, extend<any>({showInput: true, defaultValue: ''}, defaultValues || {}),\n      ['placeholder', 'defaultValue']);\n  }\n\n  $$beforeOpen(config: PromptPreset): void {\n    super.$$beforeOpen(config);\n    this.addButton(\n      config.okBtnClass,\n      config.okBtn,\n      (cmp: BSMessageModal, $event: MouseEvent) =>\n        cmp.dialog.close((cmp.dialog.context as PromptPreset).defaultValue)\n    );\n  }\n}\n\n",
    "import { combineLatest } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\nimport {\n  ContainerContent,\n  Overlay,\n  DialogRef,\n  Modal as Modal_,\n  CSSBackdrop,\n  PromiseCompleter\n} from 'ngx-modialog';\n\nimport { BSModalContainer } from './modal-container.component';\n\nimport { OneButtonPresetBuilder } from './presets/one-button-preset';\nimport { TwoButtonPresetBuilder, PromptPresetBuilder } from './presets/two-button-preset';\n\n// TODO: use DI factory for this.\n// TODO: consolidate dup code\nconst isDoc: boolean = !(typeof document === 'undefined' || !document);\n\nlet animationClass: string = 'show';\n\n/**\n * Execute this method to flag that you are working with Bootstrap version 4.\n * @deprecated From version 5, ngx-modialog's bootstrap plugin is set to work with version 4 of bootstrap by default.\n */\nexport function bootstrap4Mode(): void { }\n/**\n * Execute this method to flag that you are working with Bootstrap version 3.\n */\nexport function bootstrap3Mode(): void { animationClass = 'in'; }\n\n@Injectable()\nexport class Modal extends Modal_ {\n  constructor(overlay: Overlay) {\n    super(overlay);\n  }\n\n  alert(): OneButtonPresetBuilder {\n    return new OneButtonPresetBuilder(this, <any>{isBlocking: false});\n  }\n\n  prompt(): PromptPresetBuilder {\n    return new PromptPresetBuilder(this, <any>{isBlocking: true, keyboard: null});\n  }\n\n  confirm(): TwoButtonPresetBuilder {\n    return new TwoButtonPresetBuilder(this, <any>{isBlocking: true, keyboard: null});\n  }\n\n  protected create(dialogRef: DialogRef<any>, content: ContainerContent): DialogRef<any> {\n\n    const backdropRef = this.createBackdrop(dialogRef, CSSBackdrop);\n    const containerRef = this.createContainer(dialogRef, BSModalContainer, content);\n\n    let overlay = dialogRef.overlayRef.instance;\n    let backdrop = backdropRef.instance;\n    let container = containerRef.instance;\n\n    dialogRef.inElement ? overlay.insideElement() : overlay.fullscreen();\n\n    // add body class if this is the only dialog in the stack\n    if (isDoc && !document.body.classList.contains('modal-open')) {\n      document.body.classList.add('modal-open');\n    }\n\n\n    if (dialogRef.inElement) {\n      backdrop.setStyle('position', 'absolute');\n    }\n    backdrop.addClass('modal-backdrop fade', true);\n\n    backdrop.addClass(animationClass);\n    container.addClass(animationClass);\n\n    if (containerRef.location.nativeElement) {\n      containerRef.location.nativeElement.focus();\n    }\n\n    overlay.beforeDestroy(() => {\n      const completer = new PromiseCompleter<void>();\n      backdrop.removeClass(animationClass);\n      container.removeClass(animationClass);\n\n      combineLatest.call(backdrop.myAnimationEnd$(), container.myAnimationEnd$(), (s1, s2) => [s1,s2])\n        .subscribe( sources => {\n          isDoc && this.overlay.groupStackLength(dialogRef) === 1 && document.body.classList.remove('modal-open');\n          completer.resolve();\n        });\n\n      return completer.promise;\n    });\n\n    return dialogRef;\n  }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ModalModule, Modal as BaseModal } from 'ngx-modialog';\n\nimport { Modal } from './modal';\nimport { BSModalContainer } from './modal-container.component';\nimport {\n  BSMessageModal,\n  BSMessageModalTitle,\n  BSMessageModalBody,\n  BSModalFooter\n} from './message-modal.component';\n\nexport const providers: any[] = [\n  { provide: BaseModal, useClass: Modal },\n  { provide: Modal, useClass: Modal }\n];\n\n@NgModule({\n  imports: [ ModalModule, CommonModule ],\n  declarations: [\n    BSModalFooter,\n    BSMessageModalTitle,\n    BSMessageModalBody,\n    BSMessageModal,\n    BSModalContainer\n  ],\n  providers,\n  entryComponents: [\n    BSModalContainer,\n    BSMessageModal\n  ]\n})\nexport class BootstrapModalModule {\n  static getProviders(): any[] {\n    return providers;\n  }\n}\n\n"
  ],
  "names": [
    "DEFAULT_VALUES",
    "dialogClass",
    "showClose",
    "DEFAULT_SETTERS",
    "_super",
    "apply",
    "this",
    "arguments",
    "BSModalContext",
    "prototype",
    "normalize",
    "BSModalContextBuilder",
    "tslib_1.__extends",
    "BSModalContainer",
    "dialog",
    "el",
    "renderer",
    "_this",
    "call",
    "BaseDynamicComponent",
    "decorators",
    "type",
    "Component",
    "args",
    "selector",
    "host",
    "tabindex",
    "role",
    "ElementRef",
    "Renderer2",
    "BSMessageModalTitle",
    "context",
    "get",
    "titleHtml",
    "configurable",
    "encapsulation",
    "ViewEncapsulation",
    "None",
    "template",
    "$event",
    "stopPropagation",
    "BSModalFooter",
    "ctorParameters",
    "DialogRef",
    "component",
    "BSMessageModal",
    "headerClass",
    "bodyClass",
    "footerClass",
    "MessageModalPresetBuilder",
    "defaultValues",
    "initialSetters",
    "baseType",
    "undefined",
    "addButton",
    "css",
    "caption",
    "onClick",
    "btn",
    "cssClass",
    "OneButtonPresetBuilder",
    "modal",
    "extend",
    "okBtn",
    "okBtnClass",
    "$$beforeOpen",
    "config",
    "AbstractTwoButtonPresetBuilder",
    "cancelBtn",
    "cancelBtnClass",
    "arrayUnion",
    "TwoButtonPresetBuilder",
    "PromptPresetBuilder",
    "isDoc",
    "document",
    "Modal$$1",
    "overlay",
    "Modal",
    "alert",
    "prompt",
    "confirm",
    "create",
    "dialogRef",
    "content",
    "backdropRef",
    "createBackdrop",
    "CSSBackdrop",
    "containerRef",
    "createContainer",
    "overlayRef",
    "instance",
    "container",
    "inElement",
    "insideElement",
    "fullscreen",
    "body",
    "classList",
    "contains",
    "add",
    "backdrop",
    "setStyle",
    "addClass",
    "animationClass",
    "location",
    "nativeElement",
    "focus",
    "beforeDestroy",
    "completer",
    "PromiseCompleter",
    "removeClass",
    "combineLatest",
    "myAnimationEnd$",
    "s1",
    "s2",
    "subscribe",
    "sources",
    "groupStackLength",
    "remove",
    "resolve",
    "promise",
    "providers",
    "provide",
    "BaseModal",
    "useClass",
    "BootstrapModalModule",
    "getProviders",
    "NgModule",
    "imports",
    "ModalModule",
    "CommonModule",
    "declarations",
    "BSMessageModalBody",
    "entryComponents"
  ],
  "mappings": "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"
}
