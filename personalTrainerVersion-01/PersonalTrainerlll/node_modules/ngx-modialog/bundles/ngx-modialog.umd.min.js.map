{
  "version": 3,
  "file": "ngx-modialog.umd.min.js",
  "sources": [
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/framework/fluent-assign.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/framework/utils.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/framework/createComponent.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/models/errors.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/models/dialog-ref.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/models/tokens.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/models/vc-ref-store.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/overlay/overlay.directives.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/components/base-dynamic-component.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/components/css-backdrop.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/components/css-dialog-container.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/overlay/overlay.component.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/models/dialog-ref-stack.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/overlay/overlay.service.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/providers/dom-modal-renderer.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/providers/modal.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/providers/outside-event-plugin.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/models/overlay-context.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/models/modal-context.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/models/modal-open-context.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/ngx-modialog.module.ts"
  ],
  "sourcesContent": [
    "import { extend, arrayUnion } from './utils';\nconst PRIVATE_PREFIX = '$$';\nconst RESERVED_REGEX = /^(\\$\\$).*/;\n\nfunction validateMethodName(name: string) {\n  if (!name) {\n    throw new Error(`Illegal method name. Empty method name is not allowed`);\n  } else if (name in this) {\n    throw new Error(`A member name '${name}' already defined.`);\n  }\n}\n\n/**\n * Returns a list of assigned property names (non private)\n * @param subject\n */\nfunction getAssignedPropertyNames(subject: any): string[] {\n  return Object.getOwnPropertyNames(subject)\n    .filter(name => RESERVED_REGEX.test(name))\n    .map(name => name.substr(2));\n}\n\nexport function privateKey(name: string): string {\n  return PRIVATE_PREFIX + name;\n}\n\nfunction objectDefinePropertyValue(obj: any, propertyName, value: (value: any) => void): void {\n  Object.defineProperty(obj, propertyName, <any>{\n    configurable: false,\n    enumerable: false,\n    writable: false,\n    value\n  });\n}\n\n/**\n * Given a FluentAssign instance, apply all of the supplied default values so calling\n * instance.toJSON will return those values (does not create a setter function)\n * @param instance\n * @param defaultValues\n */\nfunction applyDefaultValues(instance: any, defaultValues: Object): void {\n  Object.getOwnPropertyNames(defaultValues)\n    .forEach(name => (<any>instance)[privateKey(name)] = (<any>defaultValues)[name]);\n}\n\n/**\n * Create a function for setting a value for a property on a given object.\n * @param obj The object to apply the key & setter on.\n * @param propertyName The name of the property on the object\n * @param writeOnce If true will allow writing once (default: false)\n *\n * Example:\n * let obj = new FluentAssign<any>;\n * setAssignMethod(obj, 'myProp');\n * obj.myProp('someValue');\n * const result = obj.toJSON();\n * console.log(result); //{ myProp: 'someValue' }\n *\n *\n * let obj = new FluentAssign<any>;\n * setAssignMethod(obj, 'myProp', true); // applying writeOnce\n * obj.myProp('someValue');\n * obj.myProp('someValue'); // ERROR: Overriding config property 'myProp' is not allowed.\n */\nexport function setAssignMethod<T>(obj: T, propertyName: string, writeOnce: boolean = false): void {\n  validateMethodName.call(obj, propertyName);\n\n  const key = privateKey(propertyName);\n  objectDefinePropertyValue(obj, propertyName, (value: any) => {\n    if (writeOnce && this.hasOwnProperty(key)) {\n      throw new Error(`Overriding config property '${propertyName}' is not allowed.`);\n    }\n    obj[key] = value;\n    return obj;\n  });\n}\n\n/**\n * Create a function for setting a value that is an alias to an other setter function.\n * @param obj The object to apply the key & setter on.\n * @param propertyName The name of the property on the object\n * @param srcPropertyName The name of the property on the object this alias points to\n * @param hard If true, will set a readonly property on the object that returns\n *        the value of the source property. Default: false\n *\n * Example:\n * let obj = new FluentAssign<any> ;\n * setAssignMethod(obj, 'myProp');\n * setAssignAlias(obj, 'myPropAlias', 'myProp');\n * obj.myPropAlias('someValue');\n * const result = obj.toJSON();\n * console.log(result); //{ myProp: 'someValue' }\n * result.myPropAlias // undefined\n *\n *\n * let obj = new FluentAssign<any> ;\n * setAssignMethod(obj, 'myProp');\n * setAssignAlias(obj, 'myPropAlias', 'myProp', true); // setting a hard alias.\n * obj.myPropAlias('someValue');\n * const result = obj.toJSON();\n * console.log(result); //{ myProp: 'someValue' }\n * result.myPropAlias // someValue\n */\nexport function setAssignAlias<T>(obj: T, propertyName: string,\n                                  srcPropertyName: string,\n                                  hard: boolean = false): void {\n  validateMethodName.call(obj, propertyName);\n\n  objectDefinePropertyValue(obj, propertyName, (value: any) => {\n    obj[srcPropertyName](value);\n    return obj;\n  });\n\n  if (hard === true) {\n    const key = privateKey(propertyName),\n      srcKey = privateKey(srcPropertyName);\n\n    Object.defineProperty(obj, key, <any>{\n      configurable: false,\n      enumerable: false,\n      get: () => obj[srcKey]\n    });\n  }\n}\n\n/**\n * Describes a fluent assign method.\n * A function that gets a value and returns the instance it works on.\n */\nexport interface FluentAssignMethod<T, Z> {\n  //TODO: Setting 'this' instead of Z does not work, this=ConfigSetter here...\n  (value: T): Z;\n}\n\n\nexport interface IFluentAssignFactory<Z> {\n  fluentAssign: Z;\n  setMethod(name: string, defaultValue?: any): IFluentAssignFactory<Z>;\n}\n\n/**\n * Represent a fluent API factory wrapper for defining FluentAssign instances.\n */\nexport class FluentAssignFactory<T> {\n  private _fluentAssign: FluentAssign<T>;\n\n  constructor(fluentAssign?: FluentAssign<T>) {\n    this._fluentAssign =\n      fluentAssign instanceof FluentAssign ? fluentAssign : <any>new FluentAssign();\n  }\n\n  /**\n   * Create a setter method on the FluentAssign instance.\n   * @param name The name of the setter function.\n   * @param defaultValue If set (not undefined) set's the value on the instance immediately.\n   */\n  setMethod(name: string, defaultValue: any = undefined): FluentAssignFactory<T> {\n    setAssignMethod(this._fluentAssign, name);\n    if (defaultValue !== undefined) {\n      (<any>this._fluentAssign)[name](defaultValue);\n    }\n    return this;\n  }\n\n  /**\n   * The FluentAssign instance.\n   */\n  get fluentAssign(): FluentAssign<T> {\n    return this._fluentAssign;\n  }\n}\n\n\n/**\n * Represent an object where every property is a function representing an assignment function.\n * Calling each function with a value will assign the value to the object and return the object.\n * Calling 'toJSON' returns an object with the same properties but this time representing the\n * assigned values.\n *\n * This allows setting an object in a fluent API manner.\n * Example:\n let fluent = new FluentAssign<any>(undefined, ['some', 'went']);\n fluent.some('thing').went('wrong').toJSON();\n // { some: 'thing', went: 'wrong' }\n */\nexport class FluentAssign<T> {\n  private __fluent$base__: new () => T;\n\n  /**\n   * Returns a FluentAssignFactory<FluentAssign<T>> ready to define a FluentAssign type.\n   * @param defaultValues An object representing default values for the instance.\n   * @param initialSetters A list of initial setters for the instance.\n   */\n  static compose<T>(defaultValues: T = undefined,\n                    initialSetters: string[] = undefined): FluentAssignFactory<T> {\n\n    return <any>FluentAssign.composeWith<FluentAssign<T>>(\n      new FluentAssign<T>(defaultValues, initialSetters));\n  }\n\n  /**\n   * Returns a FluentAssignFactory<Z> where Z is an instance of FluentAssign<?> or a derived\n   * class of it.\n   * @param fluentAssign An instance of FluentAssign<?> or a derived class of FluentAssign<?>.\n   */\n  static composeWith<Z>(fluentAssign: Z): IFluentAssignFactory<Z> {\n    return <any>new FluentAssignFactory<any>(<any>fluentAssign);\n  }\n\n  /**\n   *\n   * @param defaultValues An object representing default values for the underlying object.\n   * @param initialSetters A list of initial setters for this FluentAssign.\n   * @param baseType the class/type to create a new base. optional, {} is used if not supplied.\n   */\n  constructor(defaultValues: T | T[] = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    if (Array.isArray(defaultValues)) {\n      (defaultValues as Array<any>).forEach(d => applyDefaultValues(this, d));\n    } else if (defaultValues) {\n      applyDefaultValues(this, defaultValues);\n    }\n\n    if (Array.isArray(initialSetters)) {\n\n      initialSetters.forEach(name => setAssignMethod(this, name));\n    }\n\n    if (baseType) {\n      this.__fluent$base__ = baseType;\n    }\n  }\n\n  toJSON(): T {\n    return getAssignedPropertyNames(this)\n      .reduce((obj: T, name: string) => {\n        const key = privateKey(name);\n        // re-define property descriptors (we dont want their value)\n        let propDesc = Object.getOwnPropertyDescriptor(this, key);\n        if (propDesc) {\n          Object.defineProperty(obj, name, propDesc);\n        } else {\n          (<any>obj)[name] = (<any>this)[key];\n        }\n        return obj;\n      }, this.__fluent$base__ ? new this.__fluent$base__() : <any>{});\n  }\n}\n",
    "/**\n * Simple object extend\n * @param m1\n * @param m2\n */\nexport function extend<T>(m1: any, m2: any): T {\n  var m: T = <T>{};\n  for (var attr in m1) {\n    if (m1.hasOwnProperty(attr)) {\n      (<any>m)[attr] = (<any>m1)[attr];\n    }\n  }\n\n  for (var attr in m2) {\n    if (m2.hasOwnProperty(attr)) {\n      (<any>m)[attr] = (<any>m2)[attr];\n    }\n  }\n\n  return m;\n}\n\n/**\n * Simple, not optimized, array union of unique values.\n * @param arr1\n * @param arr2\n */\nexport function arrayUnion<T>(arr1: any[], arr2: any[]): T[] {\n  return arr1\n    .concat(arr2.filter(v => arr1.indexOf(v) === -1));\n\n}\n\n/**\n * Returns true if the config supports a given key.\n * @param key\n */\nexport function supportsKey(keyCode: number, config: Array<number>): boolean {\n  if (!Array.isArray(config)) return config === null ? false : true;\n  return config.indexOf(keyCode) > -1;\n}\n\n/**\n * Given an object representing a key/value map of css properties, returns a valid css string\n * representing the object.\n * Example:\n * console.log(toStyleString({\n *     position: 'absolute',\n *     width: '100%',\n *     height: '100%',\n *     top: '0',\n *     left: '0',\n *     right: '0',\n *     bottom: '0'\n * }));\n * // position:absolute;width:100%;height:100%;top:0;left:0;right:0;bottom:0\n * @param obj\n */\nexport function toStyleString(obj: any | CSSStyleDeclaration): string {\n  return Object.getOwnPropertyNames(obj)\n    .map(k => `${k}:${obj[k]}`)\n    .join(';');\n\n  // let objStr = JSON.stringify(obj);\n  // return objStr.substr(1, objStr.length - 2)\n  //     .replace(/,/g, ';')\n  //     .replace(/\"/g, '');\n}\n\nexport class PromiseCompleter<R> {\n  promise: Promise<R>;\n  resolve: (value?: R|PromiseLike<R>) => void;\n  reject: (error?: any, stackTrace?: string) => void;\n\n  constructor() {\n    this.promise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n}\n\nexport interface Class<T> {\n  new(...args: any[]): T;\n}\n\nexport function noop() { }\n",
    "import {\n  ComponentRef,\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injector,\n  ViewContainerRef\n} from '@angular/core';\n\nexport interface CreateComponentArgs {\n  component: any;\n  vcRef: ViewContainerRef;\n  injector?: Injector;\n  projectableNodes?: any[][];\n}\n\nexport function createComponent(instructions: CreateComponentArgs): ComponentRef<any> {\n  const injector: Injector =  instructions.injector || instructions.vcRef.parentInjector;\n  const cmpFactory: ComponentFactory<any>\n    = injector.get(ComponentFactoryResolver).resolveComponentFactory(instructions.component);\n\n  if (instructions.vcRef) {\n    return instructions.vcRef.createComponent(\n      cmpFactory,\n      instructions.vcRef.length,\n      injector,\n      instructions.projectableNodes\n    );\n  } else {\n    return cmpFactory.create(injector);\n  }\n}\n\n",
    "export class DialogBailOutError extends Error {\n  constructor(value?: string) {\n    super();\n\n    if (!value) {\n      value = 'Dialog was forced to close by an unknown source.';\n    }\n    this.message = value;\n  }\n}\n",
    "import { Observable, Subject } from 'rxjs';\nimport { ComponentRef } from '@angular/core';\n\nimport { PromiseCompleter } from '../framework/utils';\nimport { Overlay, ModalOverlay } from '../overlay/index';\nimport { CloseGuard } from '../models/tokens';\nimport { DialogBailOutError } from '../models/errors';\n\n/**\n * API to an open modal window.\n */\nexport class DialogRef<T> {\n  /**\n   * Reference to the overlay component ref.\n   */\n  overlayRef: ComponentRef<ModalOverlay>;\n\n  /**\n   * States if the modal is inside a specific element.\n   */\n  public inElement: boolean;\n\n  public destroyed: boolean;\n\n  /**\n   * Fired before dialog is destroyed.\n   * No need to unsubscribe, done automatically.\n   * Note: Always called.\n   * When called, overlayRef might or might not be destroyed.\n   */\n  public onDestroy: Observable<void>;\n\n  private _resultDeferred: PromiseCompleter<any> = new PromiseCompleter<any>();\n  private _onDestroy: Subject<void> = new Subject<void>();\n  private closeGuard: CloseGuard;\n\n  constructor(public overlay: Overlay, public context?: T) {\n    this.onDestroy = this._onDestroy.asObservable();\n  }\n\n  /**\n   * A Promise that is resolved on a close event and rejected on a dismiss event.\n   */\n  get result(): Promise<any> {\n    return this._resultDeferred.promise;\n  }\n\n  /**\n   * Set a close/dismiss guard\n   * @param g\n   */\n  setCloseGuard(guard: CloseGuard): void {\n    this.closeGuard = guard;\n  }\n\n  /**\n   *  Close the modal with a return value, i.e: result.\n   */\n  close(result: any = null) {\n    const _close = () => {\n      this.destroy();\n      this._resultDeferred.resolve(result);\n    };\n    this._fireHook<boolean>('beforeClose')\n      .then(value => value !== true && _close())\n      .catch(_close);\n  }\n\n  /**\n   *  Close the modal without a return value, i.e: cancelled.\n   *  This call is automatically invoked when a user either:\n   *  - Presses an exit keyboard key (if configured).\n   *  - Clicks outside of the modal window (if configured).\n   *  Usually, dismiss represent a Cancel button or a X button.\n   */\n  dismiss() {\n    const _dismiss = () => {\n      this.destroy();\n      this._resultDeferred.promise.catch(() => {});\n      this._resultDeferred.reject();\n    };\n    this._fireHook<boolean>('beforeDismiss')\n      .then(value => value !== true && _dismiss())\n      .catch(_dismiss);\n  }\n\n  /**\n   * Gracefully close the overlay/dialog with a rejected result.\n   * Does not trigger canDestroy on the overlay.\n   */\n  bailOut() {\n    if (this.destroyed !== true) {\n      this.destroyed = true;\n      this._onDestroy.next(null);\n      this._onDestroy.complete();\n      this._resultDeferred.reject(new DialogBailOutError());\n    }\n  }\n\n  destroy() {\n    if (this.destroyed !== true) {\n      this.destroyed = true;\n\n      if (typeof this.overlayRef.instance.canDestroy === 'function') {\n        this.overlayRef.instance.canDestroy()\n          .catch( () => {})\n          .then ( () => this._destroy() );\n      } else {\n        this._destroy();\n      }\n    }\n  }\n\n  private _destroy(): void {\n    this._onDestroy.next(null);\n    this._onDestroy.complete();\n    this.overlayRef.destroy()\n  }\n\n  private _fireHook<T>(name: 'beforeClose' | 'beforeDismiss'): Promise<T> {\n    const gurad = this.closeGuard,\n          fn: Function = gurad && typeof gurad[name] === 'function' && gurad[name];\n\n    return Promise.resolve(fn ? fn.call(gurad) : false);\n  }\n}\n",
    "import {\n  ComponentRef,\n  Injector,\n  ViewContainerRef,\n  TemplateRef,\n  Type\n} from '@angular/core';\n\nimport { ModalOverlay } from '../overlay/index';\nimport { DialogRef } from './dialog-ref';\nimport { OverlayContext } from '../models/overlay-context';\n\nexport enum DROP_IN_TYPE {\n  alert,\n  prompt,\n  confirm\n}\n\nexport type WideVCRef = ViewContainerRef | string;\n\nexport type ContainerContent = string | TemplateRef<any> | Type<any>;\n\nexport interface OverlayPlugin extends Function {\n  <T>(component: any, dialogRef: DialogRef<T>, config: OverlayConfig): DialogRef<any>;\n}\n\nexport interface OverlayConfig {\n  /**\n   * The context for the modal, attached to the dialog instance, DialogRef.context.\n   * Default: {}\n   */\n  context?: OverlayContext;\n\n  injector?: Injector;\n\n  /**\n   * The element to block using the modal.\n   */\n  viewContainer?: WideVCRef;\n\n  renderer?: OverlayRenderer;\n\n  /**\n   * Not used yet.\n   */\n  overlayPlugins?: OverlayPlugin | Array<OverlayPlugin>;\n}\n\nexport interface ModalComponent<T> {\n  dialog: DialogRef<T>;\n}\n\nexport interface CloseGuard {\n  /**\n   * Invoked before a modal is dismissed.\n   */\n  beforeDismiss?(): boolean | Promise<boolean>;\n\n  /**\n   * Invoked before a modal is closed.\n   */\n  beforeClose?(): boolean | Promise<boolean>;\n}\n\nexport abstract class OverlayRenderer {\n  public abstract render(dialogRef: DialogRef<any>,\n                         vcRef: ViewContainerRef,\n                         injector?: Injector): ComponentRef<ModalOverlay>;\n}\n",
    "import { ViewContainerRef } from '@angular/core';\n\nconst vcRefCollection: { [key: string]: ViewContainerRef[] } = {};\n\n\nfunction getVCRef(key: string): ViewContainerRef[] {\n  return vcRefCollection[key] ? vcRefCollection[key].slice() : [];\n}\n\nfunction setVCRef(key: string, vcRef: ViewContainerRef): void {\n  if (!vcRefCollection.hasOwnProperty(key)) {\n    vcRefCollection[key] = [];\n  }\n  vcRefCollection[key].push(vcRef);\n}\n\nfunction delVCRef(key: string, vcRef?: ViewContainerRef): void {\n    if (!vcRef) {\n      vcRefCollection[key] = [];\n    } else {\n      const coll = vcRefCollection[key] || [],\n            idx = coll.indexOf(vcRef);\n      if (idx > -1) {\n        coll.splice(idx, 1);\n      }\n    }\n}\n\n/**\n * A Simple store that holds a reference to ViewContainerRef instances by a user defined key.\n * This, with the OverlayTarget directive makes it easy to block the overlay inside an element\n * without having to use the angular query boilerplate.\n */\nexport const vcRefStore = { getVCRef, setVCRef, delVCRef };\n",
    "import {\n  Directive,\n  Input,\n  ElementRef,\n  ViewContainerRef,\n  OnDestroy\n} from '@angular/core';\n\nimport { DialogRef } from '../models/dialog-ref';\nimport { vcRefStore } from '../models/vc-ref-store';\nimport { Overlay } from \"./overlay.service\";\n\n/**\n * A directive use to signal the overlay that the host of this directive\n * is a dialog boundary, i.e: over click outside of the element should close the modal\n * (if non blocking)\n */\n@Directive({\n  selector: '[overlayDialogBoundary]'\n})\nexport class OverlayDialogBoundary {\n  constructor(el: ElementRef, dialogRef: DialogRef<any>) {\n    if (dialogRef && el.nativeElement) {\n      dialogRef.overlayRef.instance.setClickBoundary(el.nativeElement);\n    }\n  }\n\n}\n\n@Directive({\n  selector: '[overlayTarget]'\n})\nexport class OverlayTarget implements OnDestroy {\n  @Input('overlayTarget') set targetKey(value: string) {\n    this._targetKey = value;\n    if (value) {\n      vcRefStore.setVCRef(value, this.vcRef);\n    }\n  }\n\n  private _targetKey: string;\n\n  constructor(private vcRef: ViewContainerRef) {}\n\n  ngOnDestroy() {\n    if (this._targetKey) {\n      vcRefStore.delVCRef(this._targetKey, this.vcRef);\n    }\n  }\n}\n",
    "import { Observable, Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport {\n  ComponentRef,\n  ElementRef,\n  OnDestroy,\n  Renderer2\n} from '@angular/core';\n\nimport { createComponent, CreateComponentArgs } from '../framework/createComponent';\n\nconst BROWSER_PREFIX = ['webkit', 'moz', 'MS', 'o', ''];\n\nfunction register(eventName, element, cb) {\n  BROWSER_PREFIX.forEach( p => {\n    element.addEventListener(p ? p + eventName : eventName.toLowerCase(), cb, false);\n  });\n}\n\n/**\n * A base class for supporting dynamic components.\n * There are 3 main support areas:\n * 1 - Easy wrapper for dynamic styling via CSS classes and inline styles.\n * 2 - Easy wrapper for interception of transition/animation end events.\n * 3 - Easy wrapper for component creation and injection.\n *\n * Dynamic css is done via direct element manipulation (via renderer), it does not use change detection\n * or binding. This is to allow better control over animation.\n *\n * Animation support is limited, only transition/keyframes END even are notified.\n * The animation support is needed since currently the angular animation module is limited as well and\n * does not support CSS animation that are not pre-parsed and are not in the styles metadata of a component.\n *\n * Capabilities: Add/Remove styls, Add/Remove classes, listen to animation/transition end event,\n * add components\n */\nexport class BaseDynamicComponent implements OnDestroy {\n  animationEnd$: Observable<TransitionEvent | AnimationEvent>;\n\n  protected animationEnd: Subject<TransitionEvent | AnimationEvent>;\n\n  constructor(protected el: ElementRef,\n              protected renderer: Renderer2) {}\n\n  activateAnimationListener() {\n    if (this.animationEnd) return;\n    this.animationEnd = new Subject<TransitionEvent | AnimationEvent>();\n    this.animationEnd$ = this.animationEnd.asObservable();\n    register('TransitionEnd', this.el.nativeElement, (e: TransitionEvent) => this.onEnd(e));\n    register('AnimationEnd', this.el.nativeElement, (e: AnimationEvent) => this.onEnd(e));\n  }\n\n  /**\n   * Set a specific inline style on the overlay host element.\n   * @param prop The style key\n   * @param value The value, undefined to remove\n   */\n  setStyle(prop: string, value: string): this {\n    this.renderer.setStyle(this.el.nativeElement, prop, value);\n    return this;\n  }\n\n  forceReflow() {\n    this.el.nativeElement.offsetWidth;\n  }\n\n  addClass(css: string, forceReflow: boolean = false): void {\n    css.split(' ')\n      .forEach( c => this.renderer.addClass(this.el.nativeElement, c) );\n    if (forceReflow) this.forceReflow();\n  }\n\n  removeClass(css: string, forceReflow: boolean = false): void {\n    css.split(' ')\n      .forEach( c => this.renderer.removeClass(this.el.nativeElement, c) );\n    if (forceReflow) {\n      this.forceReflow();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.animationEnd && !this.animationEnd.closed) {\n      this.animationEnd.complete();\n    }\n  }\n\n  myAnimationEnd$(): Observable<AnimationEvent | TransitionEvent> {\n    return this.animationEnd$.pipe(\n      filter(e => e.target === this.el.nativeElement)\n    );\n  }\n\n  /**\n   * Add a component, supply a view container ref.\n   * Note: The components vcRef will result in a sibling.\n   */\n  protected _addComponent<T>(instructions: CreateComponentArgs): ComponentRef<T> {\n    const cmpRef = createComponent(instructions);\n    cmpRef.changeDetectorRef.detectChanges();\n\n    return cmpRef;\n  }\n\n\n  private onEnd(event: TransitionEvent | AnimationEvent): void {\n\n    if (!this.animationEnd.closed) {\n      this.animationEnd.next(event);\n    }\n  }\n\n}\n",
    "import {\n  Component,\n  ElementRef,\n  ViewEncapsulation,\n  Renderer2\n} from '@angular/core';\n\nimport { BaseDynamicComponent } from './base-dynamic-component';\n\n/**\n * Represents the modal backdrop shaped by CSS.\n */\n@Component({\n  selector: 'css-backdrop',\n  host: {\n    '[attr.class]': 'cssClass',\n    '[attr.style]': 'styleStr'\n  },\n  encapsulation: ViewEncapsulation.None,\n  template: ``\n})\nexport class CSSBackdrop extends BaseDynamicComponent {\n  public cssClass: string;\n  public styleStr: string;\n\n  constructor(el: ElementRef, renderer: Renderer2) {\n    super(el, renderer);\n    this.activateAnimationListener();\n\n    const style = {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%'\n    };\n    Object.keys(style).forEach( k => this.setStyle(k, style[k]) );\n  }\n}\n",
    "import {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Renderer2\n} from '@angular/core';\n\nimport { BaseDynamicComponent } from './base-dynamic-component';\nimport { DialogRef } from '../models/dialog-ref';\n\n/**\n * A component that acts as a top level container for an open modal window.\n */\n@Component({\n  selector: 'css-dialog-container',\n  host: {\n    'tabindex': '-1',\n    'role': 'dialog'\n  },\n  encapsulation: ViewEncapsulation.None,\n  template: `<ng-content></ng-content>`\n})\nexport class CSSDialogContainer extends BaseDynamicComponent {\n\n  constructor(public dialog: DialogRef<any>, el: ElementRef, renderer: Renderer2) {\n    super(el, renderer);\n    this.activateAnimationListener();\n  }\n\n}\n",
    "declare const clearTimeout: any;\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  Injector,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  Renderer2,\n  TemplateRef\n} from '@angular/core';\n\nimport { PromiseCompleter, supportsKey } from '../framework/utils';\nimport { DialogRef } from '../models/dialog-ref';\nimport { ContainerContent } from '../models/tokens';\nimport { BaseDynamicComponent } from '../components/index';\n\n// TODO: use DI factory for this.\n// TODO: consolidate dup code\nconst isDoc: boolean = !(typeof document === 'undefined' || !document);\n\nexport interface EmbedComponentConfig {\n  component: any;\n  projectableNodes?: any[][];\n}\n\n/**\n * Represents the modal overlay.\n */\n@Component({\n  selector: 'modal-overlay',\n  host: {\n    '(body:keydown)': 'documentKeypress($event)'\n  },\n  encapsulation: ViewEncapsulation.None,\n  template: `<div #container>\n  <ng-template #innerView></ng-template>\n</div>\n<ng-template #template let-ctx>\n  <ng-container *ngComponentOutlet=\"ctx.component; injector: ctx.injector; content: ctx.projectableNodes\"></ng-container>\n</ng-template>`\n})\nexport class ModalOverlay extends BaseDynamicComponent {\n  private beforeDestroyHandlers: Array<() => Promise<void>>;\n\n  @ViewChild('container', {read: ElementRef}) public container: ElementRef;\n  @ViewChild('innerView', {read: ViewContainerRef}) public innerVcr: ViewContainerRef;\n  @ViewChild('template') public template: TemplateRef<any>;\n\n  constructor(private dialogRef: DialogRef<any>,\n              private vcr: ViewContainerRef,\n              el: ElementRef,\n              renderer: Renderer2) {\n    super(el, renderer);\n    this.activateAnimationListener();\n  }\n\n  /**\n   * @internal\n   */\n  getProjectables<T> (content: ContainerContent): any[][] {\n\n    let nodes: any[];\n    if (typeof content === 'string') {\n      nodes = [ [this.renderer.createText(`${content}`)] ];\n    } else if (content instanceof TemplateRef) {\n      nodes = [ this.vcr.createEmbeddedView(content, { $implicit: this.dialogRef.context, dialogRef: this.dialogRef }).rootNodes ];\n    } else {\n      nodes = [ this.embedComponent({ component: content }).rootNodes ];\n    }\n\n    return nodes;\n  }\n\n  embedComponent(config: EmbedComponentConfig): EmbeddedViewRef<EmbedComponentConfig> {\n    const ctx: EmbedComponentConfig & { injector: Injector } = <any>config;\n\n    return this.vcr.createEmbeddedView(this.template, <any> {\n      $implicit: ctx\n    });\n  }\n\n  addComponent<T>(type: any, projectableNodes: any[][] = []): ComponentRef<T> {\n    return super._addComponent<T>({\n      component: type,\n      vcRef: this.innerVcr,\n      projectableNodes\n    });\n  }\n\n  fullscreen(): void {\n    const style = {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      'z-index': 1500\n    };\n    Object.keys(style).forEach( k => this.setStyle(k, style[k]) );\n  }\n\n  insideElement(): void {\n    const style = {\n      position: 'absolute',\n      overflow: 'hidden',\n      width: '100%',\n      height: '100%',\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0\n    };\n    Object.keys(style).forEach( k => this.setStyle(k, style[k]) );\n  }\n\n  /**\n   * Set a specific inline style for the container of the whole dialog component\n   * The dialog component root element is the host of this component, it contains only 1 direct\n   * child which is the container.\n   *\n   * Structure:\n   *\n   * ```html\n   * <modal-overlay>\n   *   <div>\n   *     <!-- BACKDROP ELEMENT -->\n   *     <!-- DIALOG CONTAINER ELEMENT -->\n   *   </div>\n   * </modal-overlay>\n   * ```\n   *\n   * @param prop The style key\n   * @param value The value, undefined to remove\n   */\n  setContainerStyle(prop: string, value: string): this {\n    this.renderer.setStyle(this.container.nativeElement, prop, value);\n    return this;\n  }\n\n  /**\n   * Define an element that click inside it will not trigger modal close.\n   * Since events bubble, clicking on a dialog will bubble up to the overlay, a plugin\n   * must define an element that represent the dialog, the overlay will make sure no to close when\n   * it was clicked.\n   * @param element\n   */\n  setClickBoundary(element: Element): void {\n    let target: Element;\n    const elListener = event => target = event.target as any;\n    const docListener = event => {\n      if (this.dialogRef.context.isBlocking || !this.dialogRef.overlay.isTopMost(this.dialogRef) ) {\n        return;\n      }\n\n      let current: any = event.target;\n\n      // on click, this will hit.\n      if (current === target) return;\n\n      // on mouse down -> drag -> release the current might not be 'target', it might be\n      // a sibling or a child (i.e: not part of the tree-up direction). It might also be a release\n      // outside the dialog... so we compare to the boundary element\n      do {\n        if (current === element) {\n          return;\n        }\n      } while (current.parentNode && ( current = current.parentNode ));\n      this.dialogRef.dismiss();\n    };\n\n    if (isDoc) {\n      this.dialogRef.onDestroy.subscribe(() => {\n        element.removeEventListener('click', elListener, false);\n        element.removeEventListener('touchstart', elListener, false);\n        document.removeEventListener('click', docListener, false);\n        document.removeEventListener('touchend', docListener, false);\n      });\n\n\n      setTimeout(() => {\n        element.addEventListener('mousedown', elListener, false);\n        element.addEventListener('touchstart', docListener, false);\n        document.addEventListener('click', docListener, false);\n        document.addEventListener('touchend', docListener, false);\n      });\n    }\n  }\n\n  /**\n   * Temp workaround for animation where destruction of the top level component does not\n   * trigger child animations. Solution should be found either in animation module or in design\n   * of the modal component tree.\n   */\n  canDestroy(): Promise<void> {\n    const completer = new PromiseCompleter<void>();\n\n    if (!Array.isArray(this.beforeDestroyHandlers)) {\n      completer.resolve();\n    } else {\n\n      // run destroy notification but protect against halt.\n      let id = setTimeout(() => {\n        id = null;\n        completer.reject();\n      }, 1000);\n\n      const resolve = () => {\n        if (id === null) return;\n\n        clearTimeout(id);\n        completer.resolve();\n      };\n\n      Promise.all(this.beforeDestroyHandlers.map( fn => fn() ))\n        .then(resolve)\n        .catch(resolve);\n\n    }\n\n    return completer.promise;\n  }\n\n  /**\n   * A handler running before destruction of the overlay\n   * use to delay destruction due to animation.\n   * This is part of the workaround for animation, see canDestroy.\n   *\n   * NOTE: There is no guarantee that the listeners will fire, use dialog.onDestory for that.\n   * @param fn\n   */\n  beforeDestroy(fn: () => Promise<void>) {\n    if (!this.beforeDestroyHandlers) {\n      this.beforeDestroyHandlers = [];\n    }\n    this.beforeDestroyHandlers.push(fn);\n  }\n\n  documentKeypress(event: KeyboardEvent) {\n    // check that this modal is the last in the stack.\n    if (!this.dialogRef.overlay.isTopMost(this.dialogRef)) return;\n\n\n    if (supportsKey(event.keyCode, <any>this.dialogRef.context.keyboard)) {\n      this.dialogRef.dismiss();\n    }\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    if (this.dialogRef.destroyed !== true) {\n      // if we're here the overlay is destroyed by an external event that is not user invoked.\n      // i.e: The user did no call dismiss or close and dialogRef.destroy() did not invoke.\n      // this will happen when routing or killing an element containing a blocked overlay (ngIf)\n      // we bail out, i.e gracefully shutting down.\n      this.dialogRef.bailOut();\n    }\n  }\n}\n",
    "import { DialogRef } from './dialog-ref';\n\nconst BASKET_GROUP = {};\n\n/**\n * A dumb stack implementation over an array.\n */\nexport class DialogRefStack<T> {\n  private _stack: DialogRef<T>[];\n  private _stackMap: Map<DialogRef<T>, any>;\n\n  get length(): number {\n    return this._stack.length;\n  }\n\n  constructor() {\n    this._stack = [];\n    this._stackMap = new Map<DialogRef<T>, any>();\n  }\n\n  closeAll(result: any = null): void {\n    for (let i=0, len=this._stack.length; i<len; i++) {\n      this._stack.pop().close(result);\n    }\n  }\n\n  push(dialogRef: DialogRef<T>, group?: any): void {\n    if (this._stack.indexOf(dialogRef) === -1) {\n      this._stack.push(dialogRef);\n      this._stackMap.set(dialogRef, group || BASKET_GROUP);\n    }\n  }\n\n  /**\n   * Push a DialogRef into the stack and manage it so when it's done\n   * it will automatically kick itself out of the stack.\n   * @param dialogRef\n   */\n  pushManaged(dialogRef: DialogRef<T>, group?: any): void {\n    this.push(dialogRef, group);\n    dialogRef.onDestroy.subscribe(() => this.remove(dialogRef));\n  }\n\n  pop(): DialogRef<T> {\n    const dialogRef = this._stack.pop();\n    this._stackMap.delete(dialogRef);\n    return dialogRef;\n  }\n\n  /**\n   * Remove a DialogRef from the stack.\n   * @param dialogRef\n   */\n  remove(dialogRef: DialogRef<T>): void {\n    let idx = this.indexOf(dialogRef);\n    if (idx > -1) {\n      this._stack.splice(idx, 1);\n      this._stackMap.delete(dialogRef);\n    }\n  }\n\n  index(index: number): DialogRef<T> {\n    return this._stack[index];\n  }\n\n  indexOf(dialogRef: DialogRef<T>): number {\n     return this._stack.indexOf(dialogRef);\n  }\n\n  groupOf(dialogRef: DialogRef<T>): any {\n    return this._stackMap.get(dialogRef);\n  }\n\n  groupBy(group: any): DialogRef<T>[] {\n    let arr = [];\n    if (group) {\n      this._stackMap.forEach( (value, key) => {\n        if (value === group) {\n          arr.push(key);\n        }\n      });\n    }\n    return arr;\n  }\n\n  groupLength(group: any): number {\n    let count = 0;\n    if (group) {\n      this._stackMap.forEach( (value) => {\n        if (value === group) {\n          count++;\n        }\n      });\n    }\n    return count;\n  }\n}\n",
    "import { ViewContainerRef, Injectable, Injector } from '@angular/core';\n\nimport { OverlayRenderer, OverlayConfig } from '../models/tokens';\nimport { DialogRefStack } from '../models/dialog-ref-stack';\nimport { vcRefStore } from '../models/vc-ref-store';\nimport { DialogRef } from '../models/dialog-ref';\nimport { OverlayContext } from '../models/overlay-context';\n\nconst _stack = new DialogRefStack<any>();\n\n@Injectable()\nexport class Overlay {\n  get stackLength(): number {\n    return _stack.length;\n  }\n\n  constructor(private _modalRenderer: OverlayRenderer, protected injector: Injector) {\n  }\n\n  /**\n   * Check if a given DialogRef is the top most ref in the stack.\n   * TODO: distinguish between body modal vs in element modal.\n   * @param dialogRef\n   */\n  isTopMost(dialogRef: DialogRef<any>): boolean {\n    return _stack.indexOf(dialogRef) === _stack.length - 1;\n  }\n\n  stackPosition(dialogRef: DialogRef<any>) {\n    return _stack.indexOf(dialogRef);\n  }\n\n  groupStackLength(dialogRef: DialogRef<any>): number {\n    return _stack.groupLength(_stack.groupOf(dialogRef));\n  }\n\n  closeAll(result: any = null): void {\n      _stack.closeAll(result);\n  }\n\n  /**\n   * Creates an overlay and returns a dialog ref.\n   * @param config instructions how to create the overlay\n   * @param group A token to associate the new overlay with, used for reference (stacks usually)\n   */\n  open<T extends OverlayContext>(config: OverlayConfig, group?: any): DialogRef<T>[] {\n    let viewContainer = config.viewContainer,\n        containers: Array<ViewContainerRef> = [];\n\n    if (typeof viewContainer === 'string') {\n      containers = vcRefStore.getVCRef(viewContainer as string);\n    } else if (Array.isArray(viewContainer)) {\n      containers = viewContainer as any;\n    } else if (viewContainer) {\n      containers = [viewContainer] as any;\n    } else {\n      containers = [null];\n    }\n\n    return containers\n      .map( vc => this.createOverlay(config.renderer || this._modalRenderer, vc, config, group));\n  }\n\n  private createOverlay(renderer: OverlayRenderer,\n                        vcRef: ViewContainerRef,\n                        config: OverlayConfig,\n                        group: any): DialogRef<any> {\n\n    if (config.context) {\n      config.context.normalize();\n    }\n\n    if (!config.injector) {\n      config.injector = this.injector;\n    }\n\n    let dialog = new DialogRef<any>(this, config.context || {});\n    dialog.inElement = config.context && !!config.context.inElement;\n\n    let cmpRef = renderer.render(dialog, vcRef, config.injector);\n\n    Object.defineProperty(dialog, 'overlayRef', {value: cmpRef});\n    _stack.pushManaged(dialog, group);\n\n    return dialog;\n  }\n}\n",
    "import {\n  ApplicationRef,\n  ViewContainerRef,\n  ComponentRef,\n  Injector,\n  Injectable\n} from '@angular/core';\n\nimport { createComponent } from '../framework/createComponent';\nimport { DialogRef } from '../models/dialog-ref';\nimport { OverlayRenderer } from '../models/tokens';\nimport { ModalOverlay } from '../overlay/index';\n\n@Injectable()\nexport class DOMOverlayRenderer implements OverlayRenderer {\n\n  private isDoc: boolean = !(typeof document === 'undefined' || !document);\n\n  constructor(private appRef: ApplicationRef, private injector: Injector) { }\n\n  render(dialog: DialogRef<any>, vcRef: ViewContainerRef, injector?: Injector): ComponentRef<ModalOverlay> {\n    if (!injector) {\n      injector = this.injector;\n    }\n\n    const cmpRef = createComponent({\n      component: ModalOverlay,\n      vcRef,\n      injector: Injector.create([\n        { provide: DialogRef, useValue: dialog }\n      ], injector)\n    });\n\n    if (!vcRef) {\n      this.appRef.attachView(cmpRef.hostView);\n\n      // TODO: doesn't look like this is needed, explore. leaving now to be on the safe side.\n      dialog.onDestroy.subscribe( () => this.appRef.detachView(cmpRef.hostView) );\n    }\n\n    if (vcRef && dialog.inElement) {\n      vcRef.element.nativeElement.appendChild(cmpRef.location.nativeElement);\n    } else if (this.isDoc) {\n      document.body.appendChild(cmpRef.location.nativeElement);\n    }\n\n    return cmpRef;\n  }\n}\n\n",
    "import { ComponentRef } from '@angular/core';\n\nimport { Overlay } from '../overlay/index';\nimport { Class } from '../framework/utils';\nimport { OverlayConfig, ContainerContent } from '../models/tokens';\nimport { DialogRef } from '../models/dialog-ref';\nimport { ModalControllingContextBuilder } from '../models/overlay-context';\n\nexport function unsupportedDropInError(dropInName: string): Error {\n  return new Error(`Unsupported Drop-In ${dropInName}`);\n}\n\nexport abstract class Modal {\n  constructor(public overlay: Overlay) { }\n\n\n  alert(): ModalControllingContextBuilder<any> {\n    throw unsupportedDropInError('alert');\n  }\n\n  prompt(): ModalControllingContextBuilder<any> {\n    throw unsupportedDropInError('prompt');\n  }\n\n  confirm(): ModalControllingContextBuilder<any> {\n    throw unsupportedDropInError('confirm');\n  }\n\n  /**\n   * Opens a modal window inside an existing component.\n   * @param content The content to display, either string, template ref or a component.\n   * @param config Additional settings.\n   */\n  open(content: ContainerContent, config?: OverlayConfig): DialogRef<any> {\n    config = config || {} as any;\n    let dialogs = this.overlay.open(config, this.constructor);\n\n    if (dialogs.length > 1) {\n      console.warn(`Attempt to open more then 1 overlay detected.\n      Multiple modal copies are not supported at the moment, \n      only the first viewContainer will display.`);\n    }\n    // TODO:  Currently supporting 1 view container, hence working on dialogs[0].\n    //        upgrade to multiple containers.\n    return this.create(dialogs[0], content)\n  }\n\n  /**\n   * A Hook that enables derived classes to add content to the overlay.\n   * @param dialogRef\n   * @param type\n   */\n  protected abstract create(dialogRef: DialogRef<any>, type: ContainerContent): DialogRef<any>;\n\n\n  protected createBackdrop<T>(dialogRef: DialogRef<any>, BackdropComponent: Class<T>): ComponentRef<T> {\n    return dialogRef.overlayRef.instance.addComponent<T>(BackdropComponent);\n  }\n\n  protected createContainer<T>(\n    dialogRef: DialogRef<any>,\n    ContainerComponent: Class<T>,\n    content: ContainerContent): ComponentRef<T> {\n\n    let nodes: any[] = dialogRef.overlayRef.instance.getProjectables(content);\n    return dialogRef.overlayRef.instance.addComponent<T>(ContainerComponent, nodes);\n  }\n\n}\n",
    "// heavily inspired by:\n// http://www.bennadel.com/blog/3025-creating-custom-dom-and-host-event-bindings-in-angular-2-beta-6.htm\n\nimport { Injectable } from '@angular/core';\nimport { EventManager } from '@angular/platform-browser';\nimport { noop } from '../framework/utils';\n\n// TODO: use DI factory for this.\n// TODO: consolidate dup code\nconst isDoc: boolean = !(typeof document === 'undefined' || !document);\n\nconst eventMap = {\n    clickOutside: 'click',\n    mousedownOutside: 'mousedown',\n    mouseupOutside: 'mouseup',\n    mousemoveOutside: 'mousemove'\n};\n\n/**\n * An event handler factory for event handlers that bubble the event to a given handler\n * if the event target is not an ancestor of the given element.\n * @param element\n * @param handler\n */\nfunction bubbleNonAncestorHandlerFactory(element: HTMLElement, handler: (event) => void) {\n    return (event) => {\n        let current = event.target;\n        do {\n            if (current === element) {\n                return;\n            }\n        } while (current.parentNode && ( current = current.parentNode ));\n\n        handler(event);\n    };\n}\n\n@Injectable()\nexport class DOMOutsideEventPlugin { // extends EventManagerPlugin\n    manager: EventManager;\n\n    constructor() {\n    if (!isDoc || typeof document.addEventListener !== 'function') {\n        this.addEventListener = noop as any;\n    }\n    }\n\n    supports(eventName: string): boolean {\n        return eventMap.hasOwnProperty(eventName);\n    }\n\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n        const zone = this.manager.getZone();\n\n        // A Factory that registers the event on the document, instead of the element.\n        // the handler is created at runtime, and it acts as a propagation/bubble predicate, it will\n        // bubble up the event (i.e: execute our original event handler) only if the event targer\n        // is an ancestor of our element.\n        // The event is fired inside the angular zone so change detection can kick into action.\n        const onceOnOutside = () => {\n            const listener =\n              bubbleNonAncestorHandlerFactory(element, evt => zone.runGuarded(() => handler(evt)));\n\n            // mimic BrowserDomAdapter.onAndCancel\n            document.addEventListener(eventMap[eventName], listener, false);\n            return () => document.removeEventListener(eventMap[eventName], listener, false);\n        };\n\n        // we run the event registration for the document in a different zone, this will make sure\n        // change detection is off.\n        // It turns out that if a component that use DOMOutsideEventPlugin is built from a click\n        // event, we might get here before the event reached the document, causing a quick false\n        // positive handling (when stopPropagation() was'nt invoked). To workaround this we wait\n        // for the next vm turn and register.\n        // Event registration returns a dispose function for that event, angular use it to clean\n        // up after component get's destroyed. Since we need to return a dispose function\n        // synchronously we have to put a wrapper for it since we will get it asynchronously,\n        // i.e: after we need to return it.\n        //\n        return zone.runOutsideAngular(() => {\n            let fn: Function;\n            setTimeout(() => fn = onceOnOutside(), 0);\n            return () => {\n                if (fn) fn();\n            };\n        });\n    }\n\n}\n",
    "import { FluentAssign, FluentAssignMethod } from './../framework/fluent-assign';\nimport { extend, arrayUnion } from './../framework/utils';\nimport { DialogRef } from './dialog-ref';\nimport { WideVCRef, OverlayConfig } from './tokens';\n\nexport const DEFAULT_VALUES = {\n  inElement: false,\n  isBlocking: true,\n  keyboard: [27],\n  supportsKey: function supportsKey(keyCode: number): boolean {\n    return (<Array<number>>this.keyboard).indexOf(keyCode) > -1;\n  }\n};\n\nconst DEFAULT_SETTERS = [\n  'inElement',\n  'isBlocking',\n  'keyboard'\n];\n\nexport class OverlayContext {\n  /**\n   * Describes if the modal is rendered within the container element.\n   * The container element is the ViewContainerRef supplied.\n   * Defaults to false.\n   */\n  inElement: boolean;\n\n  /**\n   * Describes if the modal is blocking modal.\n   * A Blocking modal is not closable by clicking outside of the modal window.\n   * Defaults to false.\n   */\n  isBlocking: boolean;\n\n  /**\n   * Keyboard value/s that close the modal.\n   * Accepts either a single numeric value or an array of numeric values.\n   * A modal closed by a keyboard stroke will result in a 'reject' notification from the promise.\n   * Defaults to 27, set `null` implicitly to disable.\n   */\n  keyboard: Array<number> | number;\n\n  normalize(): void {\n    if (this.isBlocking !== false)\n      this.isBlocking = true;\n\n    if (this.keyboard === null) {\n      this.keyboard = [];\n    } else if (typeof this.keyboard === 'number') {\n      this.keyboard = [<number>this.keyboard];\n    } else if (!Array.isArray(<Array<number>>this.keyboard)) {\n      this.keyboard = DEFAULT_VALUES.keyboard;\n    }\n  }\n}\n\n/**\n * A core context builder for a modal window instance, used to define the context upon\n * a modal choose it's behaviour.\n */\nexport class OverlayContextBuilder<T extends OverlayContext> extends FluentAssign<T> {\n  /**\n   * Describes if the modal is rendered within the container element.\n   * The container element is the ViewContainerRef supplied.\n   * Defaults to false.\n   */\n  inElement: FluentAssignMethod<boolean, this>;\n\n  /**\n   * Describes if the modal is blocking modal.\n   * A Blocking modal is not closable by clicking outside of the modal window.\n   * Defaults to false.\n   */\n  isBlocking: FluentAssignMethod<boolean, this>;\n\n  /**\n   * Keyboard value/s that close the modal.\n   * Accepts either a single numeric value or an array of numeric values.\n   * A modal closed by a keyboard stroke will result in a 'reject' notification from the promise.\n   * Defaults to 27, set `null` implicitly to disable.\n   */\n  keyboard: FluentAssignMethod<Array<number> | number, this>;\n\n\n  constructor(defaultValues: T | T[] = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      extend<any>(DEFAULT_VALUES, defaultValues || {}),\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType || <any>OverlayContext // https://github.com/Microsoft/TypeScript/issues/7234\n    );\n  }\n\n  /**\n   * Returns an new OverlayConfig with a context property representing the data in this builder.\n   * @param base A base configuration that the result will extend\n   */\n  toOverlayConfig(base?: OverlayConfig): OverlayConfig {\n    return extend(base || {}, {\n      context: this.toJSON()\n    });\n  }\n}\n\nexport interface ModalControllingContextBuilder<T> {\n  open(viewContainer?: WideVCRef): DialogRef<T>;\n}\n\n/**\n * A helper to create an `OverlayConfig` on the fly.\n * Since `OverlayConfig` requires context it means a builder is needed, this process had some boilerplate.\n * When a quick, on the fly overlay config is needed use this helper to avoid that boilerplate.\n *\n * A builder is used as an API to allow setting the context and providing some operations around the modal.\n * When a developers knows the context before hand we can skip this step, this is what this factory is for.\n *\n * @param context The context for the modal\n * @param baseContextType Optional. The type/class of the context. This is the class used to init a new instance of the context\n * @param baseConfig A base configuration that the result will extend\n */\nexport function overlayConfigFactory<T>(context: T, baseContextType?: any, baseConfig?: OverlayConfig): OverlayConfig {\n  return new OverlayContextBuilder<T & OverlayContext>(<any>context, undefined, baseContextType).toOverlayConfig(baseConfig);\n}\n",
    "import { FluentAssignMethod } from './../framework/fluent-assign';\nimport { extend, arrayUnion } from './../framework/utils';\nimport { OverlayContext, OverlayContextBuilder } from './overlay-context';\n\nexport const DEFAULT_VALUES = {};\n\nconst DEFAULT_SETTERS = [\n    'message'\n];\n\nexport class ModalContext extends OverlayContext {\n    /**\n     * The core message to display.\n     * A modal might have an extended message (e.g: HTML message) or other fields (e.g: title) but\n     * all models, at core, convey a message thus message is common to all modals.\n     */\n    message: string;\n}\n\n/**\n * A core context builder for a modal window instance, used to define the context upon\n * a modal choose it's behaviour.\n */\nexport class ModalContextBuilder<T extends ModalContext> extends OverlayContextBuilder<T> {\n    /**\n     * The core message to display.\n     * A modal might have an extended message (e.g: HTML message) or other fields (e.g: title) but\n     * all models, at core, convey a message thus message is common to all modals.\n     */\n    message: FluentAssignMethod<string, this>;\n\n    constructor(\n        defaultValues: T | T[] = undefined,\n        initialSetters: string[] = undefined,\n        baseType: new () => T = undefined\n    ) {\n        super(\n            extend<any>(DEFAULT_VALUES, defaultValues || {}),\n            arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n            baseType\n        );\n    }\n}\n",
    "import { ResolvedReflectiveProvider } from '@angular/core';\n\nimport { FluentAssignMethod } from '../framework/fluent-assign';\nimport { ModalComponent, OverlayConfig, WideVCRef } from './tokens';\nimport { Modal } from '../providers/index';\nimport { DialogRef } from './dialog-ref';\nimport { ModalContext, ModalContextBuilder } from './modal-context';\nimport { ModalControllingContextBuilder } from './overlay-context';\n\nimport { arrayUnion } from '../framework/utils';\n\nconst DEFAULT_SETTERS = [\n  'component'\n];\n\nexport class ModalOpenContext extends ModalContext {\n  component: any;\n  modal: Modal;\n}\n\n/**\n * A Modal Context that knows about the modal service, and so can open a modal window on demand.\n * Use the fluent API to configure the preset and then invoke the 'open' method to open a modal\n * based on the context.\n */\nexport abstract class ModalOpenContextBuilder<T extends ModalOpenContext>\n                  extends ModalContextBuilder<T> implements ModalControllingContextBuilder<T> {\n\n  /**\n   * A Class for the footer container.\n   * Default: modal-footer\n   */\n  component: FluentAssignMethod<ModalComponent<T>, this>;\n\n  constructor(defaultValues: T = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      defaultValues || <any>{},\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType\n    );\n  }\n\n  /**\n   * Hook to alter config and return bindings.\n   * @param config\n   */\n  protected $$beforeOpen(config: T): void { }\n\n  /**\n   * Open a modal window based on the configuration of this config instance.\n   * @param viewContainer If set opens the modal inside the supplied viewContainer\n   */\n  open(viewContainer?: WideVCRef): DialogRef<T> {\n    let context: T = this.toJSON();\n\n    if (!(context.modal instanceof Modal)) {\n      return <any>Promise.reject(new Error('Configuration Error: modal service not set.'));\n    }\n\n    this.$$beforeOpen(context);\n\n    let overlayConfig: OverlayConfig = {\n      context: context,\n      viewContainer: viewContainer\n    };\n\n    return context.modal.open(context.component, overlayConfig);\n  }\n}\n",
    "import { ANALYZE_FOR_ENTRY_COMPONENTS, NgModule, ModuleWithProviders, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { EVENT_MANAGER_PLUGINS } from '@angular/platform-browser';\n\nimport { DOMOutsideEventPlugin, DOMOverlayRenderer } from './providers/index';\nimport { OverlayRenderer } from './models/tokens';\nimport { CSSBackdrop, CSSDialogContainer } from './components/index';\nimport {\n  Overlay,\n  ModalOverlay,\n  OverlayDialogBoundary,\n  OverlayTarget\n} from './overlay/index';\n\n@NgModule({\n  declarations: [\n    ModalOverlay,\n    CSSBackdrop,\n    CSSDialogContainer,\n    OverlayDialogBoundary,\n    OverlayTarget\n  ],\n  imports: [ CommonModule ],\n  exports: [\n    CSSBackdrop,\n    CSSDialogContainer,\n    OverlayDialogBoundary,\n    OverlayTarget\n  ],\n  providers: [\n    Overlay\n  ],\n  entryComponents: [\n    ModalOverlay,\n    CSSBackdrop,\n    CSSDialogContainer\n  ]\n})\nexport class ModalModule {\n\n  /**\n   * Returns a ModalModule pre-loaded with a list of dynamically inserted components.\n   * Since dynamic components are not analysed by the angular compiler they must register manually\n   * using entryComponents, this is an easy way to do it.\n   * @param entryComponents A list of dynamically inserted components (dialog's).\n   */\n  static withComponents(entryComponents: Array<Type<any> | any[]>): ModuleWithProviders {\n    return {\n      ngModule: ModalModule,\n      providers: [\n        {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: entryComponents, multi: true}\n      ]\n    }\n  }\n\n  /**\n   * Returns a NgModule for use in the root Module.\n   * @param entryComponents A list of dynamically inserted components (dialog's).\n   */\n  static forRoot(entryComponents?: Array<Type<any> | any[]>): ModuleWithProviders {\n    return {\n      ngModule: ModalModule,\n      providers: [\n        {provide: OverlayRenderer, useClass: DOMOverlayRenderer},\n        {provide: EVENT_MANAGER_PLUGINS, useClass: DOMOutsideEventPlugin, multi: true},\n        {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: entryComponents || [], multi: true}\n      ]\n    };\n  }\n}\n"
  ],
  "names": [
    "PRIVATE_PREFIX",
    "RESERVED_REGEX",
    "validateMethodName",
    "name",
    "Error",
    "this",
    "privateKey",
    "objectDefinePropertyValue",
    "obj",
    "propertyName",
    "value",
    "Object",
    "defineProperty",
    "configurable",
    "enumerable",
    "writable",
    "applyDefaultValues",
    "instance",
    "defaultValues",
    "getOwnPropertyNames",
    "forEach",
    "setAssignMethod",
    "writeOnce",
    "_this",
    "call",
    "key",
    "hasOwnProperty",
    "FluentAssignFactory",
    "fluentAssign",
    "_fluentAssign",
    "prototype",
    "setMethod",
    "defaultValue",
    "undefined",
    "FluentAssign",
    "initialSetters",
    "baseType",
    "composeWith",
    "toJSON",
    "subject",
    "filter",
    "test",
    "map",
    "substr",
    "extend",
    "m1",
    "m2",
    "m",
    "attr",
    "arrayUnion",
    "arr1",
    "arr2",
    "concat",
    "v",
    "indexOf",
    "PromiseCompleter",
    "promise",
    "Promise",
    "res",
    "rej",
    "resolve",
    "reject",
    "createComponent",
    "instructions",
    "injector",
    "vcRef",
    "parentInjector",
    "cmpFactory",
    "get",
    "ComponentFactoryResolver",
    "resolveComponentFactory",
    "component",
    "length",
    "projectableNodes",
    "create",
    "DialogBailOutError",
    "_super",
    "message",
    "DialogRef",
    "overlay",
    "context",
    "_resultDeferred",
    "_onDestroy",
    "Subject",
    "onDestroy",
    "asObservable",
    "close",
    "result",
    "_close",
    "destroy",
    "dismiss",
    "_dismiss",
    "catch",
    "bailOut",
    "complete",
    "destroyed",
    "overlayRef",
    "canDestroy",
    "_destroy",
    "OverlayRenderer",
    "vcRefCollection",
    "slice",
    "push",
    "coll",
    "idx",
    "splice",
    "OverlayDialogBoundary",
    "el",
    "dialogRef",
    "nativeElement",
    "setClickBoundary",
    "decorators",
    "type",
    "Directive",
    "args",
    "ctorParameters",
    "OverlayTarget",
    "set",
    "_targetKey",
    "vcRefStore",
    "delVCRef",
    "selector",
    "BROWSER_PREFIX",
    "register",
    "eventName",
    "element",
    "cb",
    "p",
    "addEventListener",
    "toLowerCase",
    "BaseDynamicComponent",
    "renderer",
    "activateAnimationListener",
    "animationEnd",
    "animationEnd$",
    "e",
    "onEnd",
    "setStyle",
    "prop",
    "forceReflow",
    "offsetWidth",
    "addClass",
    "css",
    "split",
    "c",
    "removeClass",
    "cmpRef",
    "CSSBackdrop",
    "style",
    "position",
    "top",
    "left",
    "width",
    "height",
    "Component",
    "host",
    "[attr.class]",
    "template",
    "CSSDialogContainer",
    "dialog",
    "tabindex",
    "ModalOverlay",
    "vcr",
    "getProjectables",
    "content",
    "createText",
    "TemplateRef",
    "createEmbeddedView",
    "$implicit",
    "rootNodes",
    "embedComponent",
    "config",
    "ctx",
    "addComponent",
    "_addComponent",
    "fullscreen",
    "bottom",
    "keys",
    "k",
    "insideElement",
    "overflow",
    "elListener",
    "event",
    "target",
    "docListener",
    "current",
    "parentNode",
    "isDoc",
    "subscribe",
    "removeEventListener",
    "document",
    "setTimeout",
    "completer",
    "Array",
    "isArray",
    "beforeDestroyHandlers",
    "id_1",
    "clearTimeout",
    "documentKeypress",
    "keyCode",
    "ngOnDestroy",
    "(body:keydown)",
    "ElementRef",
    "Renderer2",
    "BASKET_GROUP",
    "_stack",
    "DialogRefStack",
    "_stackMap",
    "Map",
    "closeAll",
    "group",
    "remove",
    "index",
    "groupBy",
    "arr",
    "groupLength",
    "count",
    "Overlay",
    "_modalRenderer",
    "open",
    "viewContainer",
    "getVCRef",
    "createOverlay",
    "normalize",
    "pushManaged",
    "DOMOverlayRenderer",
    "appRef",
    "render",
    "Injector",
    "provide",
    "useValue",
    "detachView",
    "hostView",
    "inElement",
    "appendChild",
    "location",
    "body",
    "unsupportedDropInError",
    "dropInName",
    "Modal",
    "alert",
    "prompt",
    "confirm",
    "dialogs",
    "constructor",
    "console",
    "warn",
    "ContainerComponent",
    "nodes",
    "eventMap",
    "clickOutside",
    "mousedownOutside",
    "mouseupOutside",
    "mousemoveOutside",
    "DOMOutsideEventPlugin",
    "supports",
    "handler",
    "zone",
    "manager",
    "getZone",
    "runOutsideAngular",
    "fn",
    "evt",
    "runGuarded",
    "listener",
    "DEFAULT_VALUES",
    "isBlocking",
    "keyboard",
    "supportsKey",
    "DEFAULT_SETTERS",
    "OverlayContext",
    "tslib_1.__extends",
    "OverlayContextBuilder",
    "ModalContext",
    "ModalContextBuilder",
    "ModalOpenContext",
    "ModalOpenContextBuilder",
    "$$beforeOpen",
    "ModalModule",
    "withComponents",
    "entryComponents",
    "ngModule",
    "providers",
    "ANALYZE_FOR_ENTRY_COMPONENTS",
    "multi",
    "forRoot",
    "useClass",
    "EVENT_MANAGER_PLUGINS",
    "NgModule",
    "declarations",
    "imports",
    "CommonModule",
    "exports",
    "srcPropertyName",
    "hard",
    "srcKey_1"
  ],
  "mappings": "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"
}
