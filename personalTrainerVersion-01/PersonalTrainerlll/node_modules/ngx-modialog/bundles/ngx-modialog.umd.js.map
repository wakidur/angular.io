{
  "version": 3,
  "file": "ngx-modialog.umd.js",
  "sources": [
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/ngx-modialog.module.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/models/modal-open-context.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/models/modal-context.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/models/overlay-context.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/providers/outside-event-plugin.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/providers/modal.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/providers/dom-modal-renderer.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/overlay/overlay.service.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/models/dialog-ref-stack.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/overlay/overlay.component.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/components/index.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/components/css-dialog-container.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/components/css-backdrop.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/components/base-dynamic-component.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/overlay/overlay.directives.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/models/vc-ref-store.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/models/tokens.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/models/dialog-ref.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/models/errors.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/framework/createComponent.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/framework/utils.ts",
    "ng://ngx-modialog/projects/ngx-modialog/src/lib/framework/fluent-assign.ts"
  ],
  "sourcesContent": [
    "import { ANALYZE_FOR_ENTRY_COMPONENTS, NgModule, ModuleWithProviders, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { EVENT_MANAGER_PLUGINS } from '@angular/platform-browser';\n\nimport { DOMOutsideEventPlugin, DOMOverlayRenderer } from './providers/index';\nimport { OverlayRenderer } from './models/tokens';\nimport { CSSBackdrop, CSSDialogContainer } from './components/index';\nimport {\n  Overlay,\n  ModalOverlay,\n  OverlayDialogBoundary,\n  OverlayTarget\n} from './overlay/index';\n\n@NgModule({\n  declarations: [\n    ModalOverlay,\n    CSSBackdrop,\n    CSSDialogContainer,\n    OverlayDialogBoundary,\n    OverlayTarget\n  ],\n  imports: [ CommonModule ],\n  exports: [\n    CSSBackdrop,\n    CSSDialogContainer,\n    OverlayDialogBoundary,\n    OverlayTarget\n  ],\n  providers: [\n    Overlay\n  ],\n  entryComponents: [\n    ModalOverlay,\n    CSSBackdrop,\n    CSSDialogContainer\n  ]\n})\nexport class ModalModule {\n\n  /**\n   * Returns a ModalModule pre-loaded with a list of dynamically inserted components.\n   * Since dynamic components are not analysed by the angular compiler they must register manually\n   * using entryComponents, this is an easy way to do it.\n   * @param entryComponents A list of dynamically inserted components (dialog's).\n   */\n  static withComponents(entryComponents: Array<Type<any> | any[]>): ModuleWithProviders {\n    return {\n      ngModule: ModalModule,\n      providers: [\n        {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: entryComponents, multi: true}\n      ]\n    }\n  }\n\n  /**\n   * Returns a NgModule for use in the root Module.\n   * @param entryComponents A list of dynamically inserted components (dialog's).\n   */\n  static forRoot(entryComponents?: Array<Type<any> | any[]>): ModuleWithProviders {\n    return {\n      ngModule: ModalModule,\n      providers: [\n        {provide: OverlayRenderer, useClass: DOMOverlayRenderer},\n        {provide: EVENT_MANAGER_PLUGINS, useClass: DOMOutsideEventPlugin, multi: true},\n        {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: entryComponents || [], multi: true}\n      ]\n    };\n  }\n}\n",
    "import { ResolvedReflectiveProvider } from '@angular/core';\n\nimport { FluentAssignMethod } from '../framework/fluent-assign';\nimport { ModalComponent, OverlayConfig, WideVCRef } from './tokens';\nimport { Modal } from '../providers/index';\nimport { DialogRef } from './dialog-ref';\nimport { ModalContext, ModalContextBuilder } from './modal-context';\nimport { ModalControllingContextBuilder } from './overlay-context';\n\nimport { arrayUnion } from '../framework/utils';\n\nconst DEFAULT_SETTERS = [\n  'component'\n];\n\nexport class ModalOpenContext extends ModalContext {\n  component: any;\n  modal: Modal;\n}\n\n/**\n * A Modal Context that knows about the modal service, and so can open a modal window on demand.\n * Use the fluent API to configure the preset and then invoke the 'open' method to open a modal\n * based on the context.\n */\nexport abstract class ModalOpenContextBuilder<T extends ModalOpenContext>\n                  extends ModalContextBuilder<T> implements ModalControllingContextBuilder<T> {\n\n  /**\n   * A Class for the footer container.\n   * Default: modal-footer\n   */\n  component: FluentAssignMethod<ModalComponent<T>, this>;\n\n  constructor(defaultValues: T = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      defaultValues || <any>{},\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType\n    );\n  }\n\n  /**\n   * Hook to alter config and return bindings.\n   * @param config\n   */\n  protected $$beforeOpen(config: T): void { }\n\n  /**\n   * Open a modal window based on the configuration of this config instance.\n   * @param viewContainer If set opens the modal inside the supplied viewContainer\n   */\n  open(viewContainer?: WideVCRef): DialogRef<T> {\n    let context: T = this.toJSON();\n\n    if (!(context.modal instanceof Modal)) {\n      return <any>Promise.reject(new Error('Configuration Error: modal service not set.'));\n    }\n\n    this.$$beforeOpen(context);\n\n    let overlayConfig: OverlayConfig = {\n      context: context,\n      viewContainer: viewContainer\n    };\n\n    return context.modal.open(context.component, overlayConfig);\n  }\n}\n",
    "import { FluentAssignMethod } from './../framework/fluent-assign';\nimport { extend, arrayUnion } from './../framework/utils';\nimport { OverlayContext, OverlayContextBuilder } from './overlay-context';\n\nexport const DEFAULT_VALUES = {};\n\nconst DEFAULT_SETTERS = [\n    'message'\n];\n\nexport class ModalContext extends OverlayContext {\n    /**\n     * The core message to display.\n     * A modal might have an extended message (e.g: HTML message) or other fields (e.g: title) but\n     * all models, at core, convey a message thus message is common to all modals.\n     */\n    message: string;\n}\n\n/**\n * A core context builder for a modal window instance, used to define the context upon\n * a modal choose it's behaviour.\n */\nexport class ModalContextBuilder<T extends ModalContext> extends OverlayContextBuilder<T> {\n    /**\n     * The core message to display.\n     * A modal might have an extended message (e.g: HTML message) or other fields (e.g: title) but\n     * all models, at core, convey a message thus message is common to all modals.\n     */\n    message: FluentAssignMethod<string, this>;\n\n    constructor(\n        defaultValues: T | T[] = undefined,\n        initialSetters: string[] = undefined,\n        baseType: new () => T = undefined\n    ) {\n        super(\n            extend<any>(DEFAULT_VALUES, defaultValues || {}),\n            arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n            baseType\n        );\n    }\n}\n",
    "import { FluentAssign, FluentAssignMethod } from './../framework/fluent-assign';\nimport { extend, arrayUnion } from './../framework/utils';\nimport { DialogRef } from './dialog-ref';\nimport { WideVCRef, OverlayConfig } from './tokens';\n\nexport const DEFAULT_VALUES = {\n  inElement: false,\n  isBlocking: true,\n  keyboard: [27],\n  supportsKey: function supportsKey(keyCode: number): boolean {\n    return (<Array<number>>this.keyboard).indexOf(keyCode) > -1;\n  }\n};\n\nconst DEFAULT_SETTERS = [\n  'inElement',\n  'isBlocking',\n  'keyboard'\n];\n\nexport class OverlayContext {\n  /**\n   * Describes if the modal is rendered within the container element.\n   * The container element is the ViewContainerRef supplied.\n   * Defaults to false.\n   */\n  inElement: boolean;\n\n  /**\n   * Describes if the modal is blocking modal.\n   * A Blocking modal is not closable by clicking outside of the modal window.\n   * Defaults to false.\n   */\n  isBlocking: boolean;\n\n  /**\n   * Keyboard value/s that close the modal.\n   * Accepts either a single numeric value or an array of numeric values.\n   * A modal closed by a keyboard stroke will result in a 'reject' notification from the promise.\n   * Defaults to 27, set `null` implicitly to disable.\n   */\n  keyboard: Array<number> | number;\n\n  normalize(): void {\n    if (this.isBlocking !== false)\n      this.isBlocking = true;\n\n    if (this.keyboard === null) {\n      this.keyboard = [];\n    } else if (typeof this.keyboard === 'number') {\n      this.keyboard = [<number>this.keyboard];\n    } else if (!Array.isArray(<Array<number>>this.keyboard)) {\n      this.keyboard = DEFAULT_VALUES.keyboard;\n    }\n  }\n}\n\n/**\n * A core context builder for a modal window instance, used to define the context upon\n * a modal choose it's behaviour.\n */\nexport class OverlayContextBuilder<T extends OverlayContext> extends FluentAssign<T> {\n  /**\n   * Describes if the modal is rendered within the container element.\n   * The container element is the ViewContainerRef supplied.\n   * Defaults to false.\n   */\n  inElement: FluentAssignMethod<boolean, this>;\n\n  /**\n   * Describes if the modal is blocking modal.\n   * A Blocking modal is not closable by clicking outside of the modal window.\n   * Defaults to false.\n   */\n  isBlocking: FluentAssignMethod<boolean, this>;\n\n  /**\n   * Keyboard value/s that close the modal.\n   * Accepts either a single numeric value or an array of numeric values.\n   * A modal closed by a keyboard stroke will result in a 'reject' notification from the promise.\n   * Defaults to 27, set `null` implicitly to disable.\n   */\n  keyboard: FluentAssignMethod<Array<number> | number, this>;\n\n\n  constructor(defaultValues: T | T[] = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      extend<any>(DEFAULT_VALUES, defaultValues || {}),\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType || <any>OverlayContext // https://github.com/Microsoft/TypeScript/issues/7234\n    );\n  }\n\n  /**\n   * Returns an new OverlayConfig with a context property representing the data in this builder.\n   * @param base A base configuration that the result will extend\n   */\n  toOverlayConfig(base?: OverlayConfig): OverlayConfig {\n    return extend(base || {}, {\n      context: this.toJSON()\n    });\n  }\n}\n\nexport interface ModalControllingContextBuilder<T> {\n  open(viewContainer?: WideVCRef): DialogRef<T>;\n}\n\n/**\n * A helper to create an `OverlayConfig` on the fly.\n * Since `OverlayConfig` requires context it means a builder is needed, this process had some boilerplate.\n * When a quick, on the fly overlay config is needed use this helper to avoid that boilerplate.\n *\n * A builder is used as an API to allow setting the context and providing some operations around the modal.\n * When a developers knows the context before hand we can skip this step, this is what this factory is for.\n *\n * @param context The context for the modal\n * @param baseContextType Optional. The type/class of the context. This is the class used to init a new instance of the context\n * @param baseConfig A base configuration that the result will extend\n */\nexport function overlayConfigFactory<T>(context: T, baseContextType?: any, baseConfig?: OverlayConfig): OverlayConfig {\n  return new OverlayContextBuilder<T & OverlayContext>(<any>context, undefined, baseContextType).toOverlayConfig(baseConfig);\n}\n",
    "// heavily inspired by:\n// http://www.bennadel.com/blog/3025-creating-custom-dom-and-host-event-bindings-in-angular-2-beta-6.htm\n\nimport { Injectable } from '@angular/core';\nimport { EventManager } from '@angular/platform-browser';\nimport { noop } from '../framework/utils';\n\n// TODO: use DI factory for this.\n// TODO: consolidate dup code\nconst isDoc: boolean = !(typeof document === 'undefined' || !document);\n\nconst eventMap = {\n    clickOutside: 'click',\n    mousedownOutside: 'mousedown',\n    mouseupOutside: 'mouseup',\n    mousemoveOutside: 'mousemove'\n};\n\n/**\n * An event handler factory for event handlers that bubble the event to a given handler\n * if the event target is not an ancestor of the given element.\n * @param element\n * @param handler\n */\nfunction bubbleNonAncestorHandlerFactory(element: HTMLElement, handler: (event) => void) {\n    return (event) => {\n        let current = event.target;\n        do {\n            if (current === element) {\n                return;\n            }\n        } while (current.parentNode && ( current = current.parentNode ));\n\n        handler(event);\n    };\n}\n\n@Injectable()\nexport class DOMOutsideEventPlugin { // extends EventManagerPlugin\n    manager: EventManager;\n\n    constructor() {\n    if (!isDoc || typeof document.addEventListener !== 'function') {\n        this.addEventListener = noop as any;\n    }\n    }\n\n    supports(eventName: string): boolean {\n        return eventMap.hasOwnProperty(eventName);\n    }\n\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n        const zone = this.manager.getZone();\n\n        // A Factory that registers the event on the document, instead of the element.\n        // the handler is created at runtime, and it acts as a propagation/bubble predicate, it will\n        // bubble up the event (i.e: execute our original event handler) only if the event targer\n        // is an ancestor of our element.\n        // The event is fired inside the angular zone so change detection can kick into action.\n        const onceOnOutside = () => {\n            const listener =\n              bubbleNonAncestorHandlerFactory(element, evt => zone.runGuarded(() => handler(evt)));\n\n            // mimic BrowserDomAdapter.onAndCancel\n            document.addEventListener(eventMap[eventName], listener, false);\n            return () => document.removeEventListener(eventMap[eventName], listener, false);\n        };\n\n        // we run the event registration for the document in a different zone, this will make sure\n        // change detection is off.\n        // It turns out that if a component that use DOMOutsideEventPlugin is built from a click\n        // event, we might get here before the event reached the document, causing a quick false\n        // positive handling (when stopPropagation() was'nt invoked). To workaround this we wait\n        // for the next vm turn and register.\n        // Event registration returns a dispose function for that event, angular use it to clean\n        // up after component get's destroyed. Since we need to return a dispose function\n        // synchronously we have to put a wrapper for it since we will get it asynchronously,\n        // i.e: after we need to return it.\n        //\n        return zone.runOutsideAngular(() => {\n            let fn: Function;\n            setTimeout(() => fn = onceOnOutside(), 0);\n            return () => {\n                if (fn) fn();\n            };\n        });\n    }\n\n}\n",
    "import { ComponentRef } from '@angular/core';\n\nimport { Overlay } from '../overlay/index';\nimport { Class } from '../framework/utils';\nimport { OverlayConfig, ContainerContent } from '../models/tokens';\nimport { DialogRef } from '../models/dialog-ref';\nimport { ModalControllingContextBuilder } from '../models/overlay-context';\n\nexport function unsupportedDropInError(dropInName: string): Error {\n  return new Error(`Unsupported Drop-In ${dropInName}`);\n}\n\nexport abstract class Modal {\n  constructor(public overlay: Overlay) { }\n\n\n  alert(): ModalControllingContextBuilder<any> {\n    throw unsupportedDropInError('alert');\n  }\n\n  prompt(): ModalControllingContextBuilder<any> {\n    throw unsupportedDropInError('prompt');\n  }\n\n  confirm(): ModalControllingContextBuilder<any> {\n    throw unsupportedDropInError('confirm');\n  }\n\n  /**\n   * Opens a modal window inside an existing component.\n   * @param content The content to display, either string, template ref or a component.\n   * @param config Additional settings.\n   */\n  open(content: ContainerContent, config?: OverlayConfig): DialogRef<any> {\n    config = config || {} as any;\n    let dialogs = this.overlay.open(config, this.constructor);\n\n    if (dialogs.length > 1) {\n      console.warn(`Attempt to open more then 1 overlay detected.\n      Multiple modal copies are not supported at the moment, \n      only the first viewContainer will display.`);\n    }\n    // TODO:  Currently supporting 1 view container, hence working on dialogs[0].\n    //        upgrade to multiple containers.\n    return this.create(dialogs[0], content)\n  }\n\n  /**\n   * A Hook that enables derived classes to add content to the overlay.\n   * @param dialogRef\n   * @param type\n   */\n  protected abstract create(dialogRef: DialogRef<any>, type: ContainerContent): DialogRef<any>;\n\n\n  protected createBackdrop<T>(dialogRef: DialogRef<any>, BackdropComponent: Class<T>): ComponentRef<T> {\n    return dialogRef.overlayRef.instance.addComponent<T>(BackdropComponent);\n  }\n\n  protected createContainer<T>(\n    dialogRef: DialogRef<any>,\n    ContainerComponent: Class<T>,\n    content: ContainerContent): ComponentRef<T> {\n\n    let nodes: any[] = dialogRef.overlayRef.instance.getProjectables(content);\n    return dialogRef.overlayRef.instance.addComponent<T>(ContainerComponent, nodes);\n  }\n\n}\n",
    "import {\n  ApplicationRef,\n  ViewContainerRef,\n  ComponentRef,\n  Injector,\n  Injectable\n} from '@angular/core';\n\nimport { createComponent } from '../framework/createComponent';\nimport { DialogRef } from '../models/dialog-ref';\nimport { OverlayRenderer } from '../models/tokens';\nimport { ModalOverlay } from '../overlay/index';\n\n@Injectable()\nexport class DOMOverlayRenderer implements OverlayRenderer {\n\n  private isDoc: boolean = !(typeof document === 'undefined' || !document);\n\n  constructor(private appRef: ApplicationRef, private injector: Injector) { }\n\n  render(dialog: DialogRef<any>, vcRef: ViewContainerRef, injector?: Injector): ComponentRef<ModalOverlay> {\n    if (!injector) {\n      injector = this.injector;\n    }\n\n    const cmpRef = createComponent({\n      component: ModalOverlay,\n      vcRef,\n      injector: Injector.create([\n        { provide: DialogRef, useValue: dialog }\n      ], injector)\n    });\n\n    if (!vcRef) {\n      this.appRef.attachView(cmpRef.hostView);\n\n      // TODO: doesn't look like this is needed, explore. leaving now to be on the safe side.\n      dialog.onDestroy.subscribe( () => this.appRef.detachView(cmpRef.hostView) );\n    }\n\n    if (vcRef && dialog.inElement) {\n      vcRef.element.nativeElement.appendChild(cmpRef.location.nativeElement);\n    } else if (this.isDoc) {\n      document.body.appendChild(cmpRef.location.nativeElement);\n    }\n\n    return cmpRef;\n  }\n}\n\n",
    "import { ViewContainerRef, Injectable, Injector } from '@angular/core';\n\nimport { OverlayRenderer, OverlayConfig } from '../models/tokens';\nimport { DialogRefStack } from '../models/dialog-ref-stack';\nimport { vcRefStore } from '../models/vc-ref-store';\nimport { DialogRef } from '../models/dialog-ref';\nimport { OverlayContext } from '../models/overlay-context';\n\nconst _stack = new DialogRefStack<any>();\n\n@Injectable()\nexport class Overlay {\n  get stackLength(): number {\n    return _stack.length;\n  }\n\n  constructor(private _modalRenderer: OverlayRenderer, protected injector: Injector) {\n  }\n\n  /**\n   * Check if a given DialogRef is the top most ref in the stack.\n   * TODO: distinguish between body modal vs in element modal.\n   * @param dialogRef\n   */\n  isTopMost(dialogRef: DialogRef<any>): boolean {\n    return _stack.indexOf(dialogRef) === _stack.length - 1;\n  }\n\n  stackPosition(dialogRef: DialogRef<any>) {\n    return _stack.indexOf(dialogRef);\n  }\n\n  groupStackLength(dialogRef: DialogRef<any>): number {\n    return _stack.groupLength(_stack.groupOf(dialogRef));\n  }\n\n  closeAll(result: any = null): void {\n      _stack.closeAll(result);\n  }\n\n  /**\n   * Creates an overlay and returns a dialog ref.\n   * @param config instructions how to create the overlay\n   * @param group A token to associate the new overlay with, used for reference (stacks usually)\n   */\n  open<T extends OverlayContext>(config: OverlayConfig, group?: any): DialogRef<T>[] {\n    let viewContainer = config.viewContainer,\n        containers: Array<ViewContainerRef> = [];\n\n    if (typeof viewContainer === 'string') {\n      containers = vcRefStore.getVCRef(viewContainer as string);\n    } else if (Array.isArray(viewContainer)) {\n      containers = viewContainer as any;\n    } else if (viewContainer) {\n      containers = [viewContainer] as any;\n    } else {\n      containers = [null];\n    }\n\n    return containers\n      .map( vc => this.createOverlay(config.renderer || this._modalRenderer, vc, config, group));\n  }\n\n  private createOverlay(renderer: OverlayRenderer,\n                        vcRef: ViewContainerRef,\n                        config: OverlayConfig,\n                        group: any): DialogRef<any> {\n\n    if (config.context) {\n      config.context.normalize();\n    }\n\n    if (!config.injector) {\n      config.injector = this.injector;\n    }\n\n    let dialog = new DialogRef<any>(this, config.context || {});\n    dialog.inElement = config.context && !!config.context.inElement;\n\n    let cmpRef = renderer.render(dialog, vcRef, config.injector);\n\n    Object.defineProperty(dialog, 'overlayRef', {value: cmpRef});\n    _stack.pushManaged(dialog, group);\n\n    return dialog;\n  }\n}\n",
    "import { DialogRef } from './dialog-ref';\n\nconst BASKET_GROUP = {};\n\n/**\n * A dumb stack implementation over an array.\n */\nexport class DialogRefStack<T> {\n  private _stack: DialogRef<T>[];\n  private _stackMap: Map<DialogRef<T>, any>;\n\n  get length(): number {\n    return this._stack.length;\n  }\n\n  constructor() {\n    this._stack = [];\n    this._stackMap = new Map<DialogRef<T>, any>();\n  }\n\n  closeAll(result: any = null): void {\n    for (let i=0, len=this._stack.length; i<len; i++) {\n      this._stack.pop().close(result);\n    }\n  }\n\n  push(dialogRef: DialogRef<T>, group?: any): void {\n    if (this._stack.indexOf(dialogRef) === -1) {\n      this._stack.push(dialogRef);\n      this._stackMap.set(dialogRef, group || BASKET_GROUP);\n    }\n  }\n\n  /**\n   * Push a DialogRef into the stack and manage it so when it's done\n   * it will automatically kick itself out of the stack.\n   * @param dialogRef\n   */\n  pushManaged(dialogRef: DialogRef<T>, group?: any): void {\n    this.push(dialogRef, group);\n    dialogRef.onDestroy.subscribe(() => this.remove(dialogRef));\n  }\n\n  pop(): DialogRef<T> {\n    const dialogRef = this._stack.pop();\n    this._stackMap.delete(dialogRef);\n    return dialogRef;\n  }\n\n  /**\n   * Remove a DialogRef from the stack.\n   * @param dialogRef\n   */\n  remove(dialogRef: DialogRef<T>): void {\n    let idx = this.indexOf(dialogRef);\n    if (idx > -1) {\n      this._stack.splice(idx, 1);\n      this._stackMap.delete(dialogRef);\n    }\n  }\n\n  index(index: number): DialogRef<T> {\n    return this._stack[index];\n  }\n\n  indexOf(dialogRef: DialogRef<T>): number {\n     return this._stack.indexOf(dialogRef);\n  }\n\n  groupOf(dialogRef: DialogRef<T>): any {\n    return this._stackMap.get(dialogRef);\n  }\n\n  groupBy(group: any): DialogRef<T>[] {\n    let arr = [];\n    if (group) {\n      this._stackMap.forEach( (value, key) => {\n        if (value === group) {\n          arr.push(key);\n        }\n      });\n    }\n    return arr;\n  }\n\n  groupLength(group: any): number {\n    let count = 0;\n    if (group) {\n      this._stackMap.forEach( (value) => {\n        if (value === group) {\n          count++;\n        }\n      });\n    }\n    return count;\n  }\n}\n",
    "declare const clearTimeout: any;\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  Injector,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  Renderer2,\n  TemplateRef\n} from '@angular/core';\n\nimport { PromiseCompleter, supportsKey } from '../framework/utils';\nimport { DialogRef } from '../models/dialog-ref';\nimport { ContainerContent } from '../models/tokens';\nimport { BaseDynamicComponent } from '../components/index';\n\n// TODO: use DI factory for this.\n// TODO: consolidate dup code\nconst isDoc: boolean = !(typeof document === 'undefined' || !document);\n\nexport interface EmbedComponentConfig {\n  component: any;\n  projectableNodes?: any[][];\n}\n\n/**\n * Represents the modal overlay.\n */\n@Component({\n  selector: 'modal-overlay',\n  host: {\n    '(body:keydown)': 'documentKeypress($event)'\n  },\n  encapsulation: ViewEncapsulation.None,\n  template: `<div #container>\n  <ng-template #innerView></ng-template>\n</div>\n<ng-template #template let-ctx>\n  <ng-container *ngComponentOutlet=\"ctx.component; injector: ctx.injector; content: ctx.projectableNodes\"></ng-container>\n</ng-template>`\n})\nexport class ModalOverlay extends BaseDynamicComponent {\n  private beforeDestroyHandlers: Array<() => Promise<void>>;\n\n  @ViewChild('container', {read: ElementRef}) public container: ElementRef;\n  @ViewChild('innerView', {read: ViewContainerRef}) public innerVcr: ViewContainerRef;\n  @ViewChild('template') public template: TemplateRef<any>;\n\n  constructor(private dialogRef: DialogRef<any>,\n              private vcr: ViewContainerRef,\n              el: ElementRef,\n              renderer: Renderer2) {\n    super(el, renderer);\n    this.activateAnimationListener();\n  }\n\n  /**\n   * @internal\n   */\n  getProjectables<T> (content: ContainerContent): any[][] {\n\n    let nodes: any[];\n    if (typeof content === 'string') {\n      nodes = [ [this.renderer.createText(`${content}`)] ];\n    } else if (content instanceof TemplateRef) {\n      nodes = [ this.vcr.createEmbeddedView(content, { $implicit: this.dialogRef.context, dialogRef: this.dialogRef }).rootNodes ];\n    } else {\n      nodes = [ this.embedComponent({ component: content }).rootNodes ];\n    }\n\n    return nodes;\n  }\n\n  embedComponent(config: EmbedComponentConfig): EmbeddedViewRef<EmbedComponentConfig> {\n    const ctx: EmbedComponentConfig & { injector: Injector } = <any>config;\n\n    return this.vcr.createEmbeddedView(this.template, <any> {\n      $implicit: ctx\n    });\n  }\n\n  addComponent<T>(type: any, projectableNodes: any[][] = []): ComponentRef<T> {\n    return super._addComponent<T>({\n      component: type,\n      vcRef: this.innerVcr,\n      projectableNodes\n    });\n  }\n\n  fullscreen(): void {\n    const style = {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      'z-index': 1500\n    };\n    Object.keys(style).forEach( k => this.setStyle(k, style[k]) );\n  }\n\n  insideElement(): void {\n    const style = {\n      position: 'absolute',\n      overflow: 'hidden',\n      width: '100%',\n      height: '100%',\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0\n    };\n    Object.keys(style).forEach( k => this.setStyle(k, style[k]) );\n  }\n\n  /**\n   * Set a specific inline style for the container of the whole dialog component\n   * The dialog component root element is the host of this component, it contains only 1 direct\n   * child which is the container.\n   *\n   * Structure:\n   *\n   * ```html\n   * <modal-overlay>\n   *   <div>\n   *     <!-- BACKDROP ELEMENT -->\n   *     <!-- DIALOG CONTAINER ELEMENT -->\n   *   </div>\n   * </modal-overlay>\n   * ```\n   *\n   * @param prop The style key\n   * @param value The value, undefined to remove\n   */\n  setContainerStyle(prop: string, value: string): this {\n    this.renderer.setStyle(this.container.nativeElement, prop, value);\n    return this;\n  }\n\n  /**\n   * Define an element that click inside it will not trigger modal close.\n   * Since events bubble, clicking on a dialog will bubble up to the overlay, a plugin\n   * must define an element that represent the dialog, the overlay will make sure no to close when\n   * it was clicked.\n   * @param element\n   */\n  setClickBoundary(element: Element): void {\n    let target: Element;\n    const elListener = event => target = event.target as any;\n    const docListener = event => {\n      if (this.dialogRef.context.isBlocking || !this.dialogRef.overlay.isTopMost(this.dialogRef) ) {\n        return;\n      }\n\n      let current: any = event.target;\n\n      // on click, this will hit.\n      if (current === target) return;\n\n      // on mouse down -> drag -> release the current might not be 'target', it might be\n      // a sibling or a child (i.e: not part of the tree-up direction). It might also be a release\n      // outside the dialog... so we compare to the boundary element\n      do {\n        if (current === element) {\n          return;\n        }\n      } while (current.parentNode && ( current = current.parentNode ));\n      this.dialogRef.dismiss();\n    };\n\n    if (isDoc) {\n      this.dialogRef.onDestroy.subscribe(() => {\n        element.removeEventListener('click', elListener, false);\n        element.removeEventListener('touchstart', elListener, false);\n        document.removeEventListener('click', docListener, false);\n        document.removeEventListener('touchend', docListener, false);\n      });\n\n\n      setTimeout(() => {\n        element.addEventListener('mousedown', elListener, false);\n        element.addEventListener('touchstart', docListener, false);\n        document.addEventListener('click', docListener, false);\n        document.addEventListener('touchend', docListener, false);\n      });\n    }\n  }\n\n  /**\n   * Temp workaround for animation where destruction of the top level component does not\n   * trigger child animations. Solution should be found either in animation module or in design\n   * of the modal component tree.\n   */\n  canDestroy(): Promise<void> {\n    const completer = new PromiseCompleter<void>();\n\n    if (!Array.isArray(this.beforeDestroyHandlers)) {\n      completer.resolve();\n    } else {\n\n      // run destroy notification but protect against halt.\n      let id = setTimeout(() => {\n        id = null;\n        completer.reject();\n      }, 1000);\n\n      const resolve = () => {\n        if (id === null) return;\n\n        clearTimeout(id);\n        completer.resolve();\n      };\n\n      Promise.all(this.beforeDestroyHandlers.map( fn => fn() ))\n        .then(resolve)\n        .catch(resolve);\n\n    }\n\n    return completer.promise;\n  }\n\n  /**\n   * A handler running before destruction of the overlay\n   * use to delay destruction due to animation.\n   * This is part of the workaround for animation, see canDestroy.\n   *\n   * NOTE: There is no guarantee that the listeners will fire, use dialog.onDestory for that.\n   * @param fn\n   */\n  beforeDestroy(fn: () => Promise<void>) {\n    if (!this.beforeDestroyHandlers) {\n      this.beforeDestroyHandlers = [];\n    }\n    this.beforeDestroyHandlers.push(fn);\n  }\n\n  documentKeypress(event: KeyboardEvent) {\n    // check that this modal is the last in the stack.\n    if (!this.dialogRef.overlay.isTopMost(this.dialogRef)) return;\n\n\n    if (supportsKey(event.keyCode, <any>this.dialogRef.context.keyboard)) {\n      this.dialogRef.dismiss();\n    }\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    if (this.dialogRef.destroyed !== true) {\n      // if we're here the overlay is destroyed by an external event that is not user invoked.\n      // i.e: The user did no call dismiss or close and dialogRef.destroy() did not invoke.\n      // this will happen when routing or killing an element containing a blocked overlay (ngIf)\n      // we bail out, i.e gracefully shutting down.\n      this.dialogRef.bailOut();\n    }\n  }\n}\n",
    "export { BaseDynamicComponent } from './base-dynamic-component';\nexport { CSSBackdrop } from './css-backdrop';\nexport { CSSDialogContainer } from './css-dialog-container';\n// export { FadeInBackdrop } from './fade-in-backdrop';\n// export { SplitScreenBackdrop } from './split-screen-backdrop';\n",
    "import {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Renderer2\n} from '@angular/core';\n\nimport { BaseDynamicComponent } from './base-dynamic-component';\nimport { DialogRef } from '../models/dialog-ref';\n\n/**\n * A component that acts as a top level container for an open modal window.\n */\n@Component({\n  selector: 'css-dialog-container',\n  host: {\n    'tabindex': '-1',\n    'role': 'dialog'\n  },\n  encapsulation: ViewEncapsulation.None,\n  template: `<ng-content></ng-content>`\n})\nexport class CSSDialogContainer extends BaseDynamicComponent {\n\n  constructor(public dialog: DialogRef<any>, el: ElementRef, renderer: Renderer2) {\n    super(el, renderer);\n    this.activateAnimationListener();\n  }\n\n}\n",
    "import {\n  Component,\n  ElementRef,\n  ViewEncapsulation,\n  Renderer2\n} from '@angular/core';\n\nimport { BaseDynamicComponent } from './base-dynamic-component';\n\n/**\n * Represents the modal backdrop shaped by CSS.\n */\n@Component({\n  selector: 'css-backdrop',\n  host: {\n    '[attr.class]': 'cssClass',\n    '[attr.style]': 'styleStr'\n  },\n  encapsulation: ViewEncapsulation.None,\n  template: ``\n})\nexport class CSSBackdrop extends BaseDynamicComponent {\n  public cssClass: string;\n  public styleStr: string;\n\n  constructor(el: ElementRef, renderer: Renderer2) {\n    super(el, renderer);\n    this.activateAnimationListener();\n\n    const style = {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%'\n    };\n    Object.keys(style).forEach( k => this.setStyle(k, style[k]) );\n  }\n}\n",
    "import { Observable, Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport {\n  ComponentRef,\n  ElementRef,\n  OnDestroy,\n  Renderer2\n} from '@angular/core';\n\nimport { createComponent, CreateComponentArgs } from '../framework/createComponent';\n\nconst BROWSER_PREFIX = ['webkit', 'moz', 'MS', 'o', ''];\n\nfunction register(eventName, element, cb) {\n  BROWSER_PREFIX.forEach( p => {\n    element.addEventListener(p ? p + eventName : eventName.toLowerCase(), cb, false);\n  });\n}\n\n/**\n * A base class for supporting dynamic components.\n * There are 3 main support areas:\n * 1 - Easy wrapper for dynamic styling via CSS classes and inline styles.\n * 2 - Easy wrapper for interception of transition/animation end events.\n * 3 - Easy wrapper for component creation and injection.\n *\n * Dynamic css is done via direct element manipulation (via renderer), it does not use change detection\n * or binding. This is to allow better control over animation.\n *\n * Animation support is limited, only transition/keyframes END even are notified.\n * The animation support is needed since currently the angular animation module is limited as well and\n * does not support CSS animation that are not pre-parsed and are not in the styles metadata of a component.\n *\n * Capabilities: Add/Remove styls, Add/Remove classes, listen to animation/transition end event,\n * add components\n */\nexport class BaseDynamicComponent implements OnDestroy {\n  animationEnd$: Observable<TransitionEvent | AnimationEvent>;\n\n  protected animationEnd: Subject<TransitionEvent | AnimationEvent>;\n\n  constructor(protected el: ElementRef,\n              protected renderer: Renderer2) {}\n\n  activateAnimationListener() {\n    if (this.animationEnd) return;\n    this.animationEnd = new Subject<TransitionEvent | AnimationEvent>();\n    this.animationEnd$ = this.animationEnd.asObservable();\n    register('TransitionEnd', this.el.nativeElement, (e: TransitionEvent) => this.onEnd(e));\n    register('AnimationEnd', this.el.nativeElement, (e: AnimationEvent) => this.onEnd(e));\n  }\n\n  /**\n   * Set a specific inline style on the overlay host element.\n   * @param prop The style key\n   * @param value The value, undefined to remove\n   */\n  setStyle(prop: string, value: string): this {\n    this.renderer.setStyle(this.el.nativeElement, prop, value);\n    return this;\n  }\n\n  forceReflow() {\n    this.el.nativeElement.offsetWidth;\n  }\n\n  addClass(css: string, forceReflow: boolean = false): void {\n    css.split(' ')\n      .forEach( c => this.renderer.addClass(this.el.nativeElement, c) );\n    if (forceReflow) this.forceReflow();\n  }\n\n  removeClass(css: string, forceReflow: boolean = false): void {\n    css.split(' ')\n      .forEach( c => this.renderer.removeClass(this.el.nativeElement, c) );\n    if (forceReflow) {\n      this.forceReflow();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.animationEnd && !this.animationEnd.closed) {\n      this.animationEnd.complete();\n    }\n  }\n\n  myAnimationEnd$(): Observable<AnimationEvent | TransitionEvent> {\n    return this.animationEnd$.pipe(\n      filter(e => e.target === this.el.nativeElement)\n    );\n  }\n\n  /**\n   * Add a component, supply a view container ref.\n   * Note: The components vcRef will result in a sibling.\n   */\n  protected _addComponent<T>(instructions: CreateComponentArgs): ComponentRef<T> {\n    const cmpRef = createComponent(instructions);\n    cmpRef.changeDetectorRef.detectChanges();\n\n    return cmpRef;\n  }\n\n\n  private onEnd(event: TransitionEvent | AnimationEvent): void {\n\n    if (!this.animationEnd.closed) {\n      this.animationEnd.next(event);\n    }\n  }\n\n}\n",
    "import {\n  Directive,\n  Input,\n  ElementRef,\n  ViewContainerRef,\n  OnDestroy\n} from '@angular/core';\n\nimport { DialogRef } from '../models/dialog-ref';\nimport { vcRefStore } from '../models/vc-ref-store';\nimport { Overlay } from \"./overlay.service\";\n\n/**\n * A directive use to signal the overlay that the host of this directive\n * is a dialog boundary, i.e: over click outside of the element should close the modal\n * (if non blocking)\n */\n@Directive({\n  selector: '[overlayDialogBoundary]'\n})\nexport class OverlayDialogBoundary {\n  constructor(el: ElementRef, dialogRef: DialogRef<any>) {\n    if (dialogRef && el.nativeElement) {\n      dialogRef.overlayRef.instance.setClickBoundary(el.nativeElement);\n    }\n  }\n\n}\n\n@Directive({\n  selector: '[overlayTarget]'\n})\nexport class OverlayTarget implements OnDestroy {\n  @Input('overlayTarget') set targetKey(value: string) {\n    this._targetKey = value;\n    if (value) {\n      vcRefStore.setVCRef(value, this.vcRef);\n    }\n  }\n\n  private _targetKey: string;\n\n  constructor(private vcRef: ViewContainerRef) {}\n\n  ngOnDestroy() {\n    if (this._targetKey) {\n      vcRefStore.delVCRef(this._targetKey, this.vcRef);\n    }\n  }\n}\n",
    "import { ViewContainerRef } from '@angular/core';\n\nconst vcRefCollection: { [key: string]: ViewContainerRef[] } = {};\n\n\nfunction getVCRef(key: string): ViewContainerRef[] {\n  return vcRefCollection[key] ? vcRefCollection[key].slice() : [];\n}\n\nfunction setVCRef(key: string, vcRef: ViewContainerRef): void {\n  if (!vcRefCollection.hasOwnProperty(key)) {\n    vcRefCollection[key] = [];\n  }\n  vcRefCollection[key].push(vcRef);\n}\n\nfunction delVCRef(key: string, vcRef?: ViewContainerRef): void {\n    if (!vcRef) {\n      vcRefCollection[key] = [];\n    } else {\n      const coll = vcRefCollection[key] || [],\n            idx = coll.indexOf(vcRef);\n      if (idx > -1) {\n        coll.splice(idx, 1);\n      }\n    }\n}\n\n/**\n * A Simple store that holds a reference to ViewContainerRef instances by a user defined key.\n * This, with the OverlayTarget directive makes it easy to block the overlay inside an element\n * without having to use the angular query boilerplate.\n */\nexport const vcRefStore = { getVCRef, setVCRef, delVCRef };\n",
    "import {\n  ComponentRef,\n  Injector,\n  ViewContainerRef,\n  TemplateRef,\n  Type\n} from '@angular/core';\n\nimport { ModalOverlay } from '../overlay/index';\nimport { DialogRef } from './dialog-ref';\nimport { OverlayContext } from '../models/overlay-context';\n\nexport enum DROP_IN_TYPE {\n  alert,\n  prompt,\n  confirm\n}\n\nexport type WideVCRef = ViewContainerRef | string;\n\nexport type ContainerContent = string | TemplateRef<any> | Type<any>;\n\nexport interface OverlayPlugin extends Function {\n  <T>(component: any, dialogRef: DialogRef<T>, config: OverlayConfig): DialogRef<any>;\n}\n\nexport interface OverlayConfig {\n  /**\n   * The context for the modal, attached to the dialog instance, DialogRef.context.\n   * Default: {}\n   */\n  context?: OverlayContext;\n\n  injector?: Injector;\n\n  /**\n   * The element to block using the modal.\n   */\n  viewContainer?: WideVCRef;\n\n  renderer?: OverlayRenderer;\n\n  /**\n   * Not used yet.\n   */\n  overlayPlugins?: OverlayPlugin | Array<OverlayPlugin>;\n}\n\nexport interface ModalComponent<T> {\n  dialog: DialogRef<T>;\n}\n\nexport interface CloseGuard {\n  /**\n   * Invoked before a modal is dismissed.\n   */\n  beforeDismiss?(): boolean | Promise<boolean>;\n\n  /**\n   * Invoked before a modal is closed.\n   */\n  beforeClose?(): boolean | Promise<boolean>;\n}\n\nexport abstract class OverlayRenderer {\n  public abstract render(dialogRef: DialogRef<any>,\n                         vcRef: ViewContainerRef,\n                         injector?: Injector): ComponentRef<ModalOverlay>;\n}\n",
    "import { Observable, Subject } from 'rxjs';\nimport { ComponentRef } from '@angular/core';\n\nimport { PromiseCompleter } from '../framework/utils';\nimport { Overlay, ModalOverlay } from '../overlay/index';\nimport { CloseGuard } from '../models/tokens';\nimport { DialogBailOutError } from '../models/errors';\n\n/**\n * API to an open modal window.\n */\nexport class DialogRef<T> {\n  /**\n   * Reference to the overlay component ref.\n   */\n  overlayRef: ComponentRef<ModalOverlay>;\n\n  /**\n   * States if the modal is inside a specific element.\n   */\n  public inElement: boolean;\n\n  public destroyed: boolean;\n\n  /**\n   * Fired before dialog is destroyed.\n   * No need to unsubscribe, done automatically.\n   * Note: Always called.\n   * When called, overlayRef might or might not be destroyed.\n   */\n  public onDestroy: Observable<void>;\n\n  private _resultDeferred: PromiseCompleter<any> = new PromiseCompleter<any>();\n  private _onDestroy: Subject<void> = new Subject<void>();\n  private closeGuard: CloseGuard;\n\n  constructor(public overlay: Overlay, public context?: T) {\n    this.onDestroy = this._onDestroy.asObservable();\n  }\n\n  /**\n   * A Promise that is resolved on a close event and rejected on a dismiss event.\n   */\n  get result(): Promise<any> {\n    return this._resultDeferred.promise;\n  }\n\n  /**\n   * Set a close/dismiss guard\n   * @param g\n   */\n  setCloseGuard(guard: CloseGuard): void {\n    this.closeGuard = guard;\n  }\n\n  /**\n   *  Close the modal with a return value, i.e: result.\n   */\n  close(result: any = null) {\n    const _close = () => {\n      this.destroy();\n      this._resultDeferred.resolve(result);\n    };\n    this._fireHook<boolean>('beforeClose')\n      .then(value => value !== true && _close())\n      .catch(_close);\n  }\n\n  /**\n   *  Close the modal without a return value, i.e: cancelled.\n   *  This call is automatically invoked when a user either:\n   *  - Presses an exit keyboard key (if configured).\n   *  - Clicks outside of the modal window (if configured).\n   *  Usually, dismiss represent a Cancel button or a X button.\n   */\n  dismiss() {\n    const _dismiss = () => {\n      this.destroy();\n      this._resultDeferred.promise.catch(() => {});\n      this._resultDeferred.reject();\n    };\n    this._fireHook<boolean>('beforeDismiss')\n      .then(value => value !== true && _dismiss())\n      .catch(_dismiss);\n  }\n\n  /**\n   * Gracefully close the overlay/dialog with a rejected result.\n   * Does not trigger canDestroy on the overlay.\n   */\n  bailOut() {\n    if (this.destroyed !== true) {\n      this.destroyed = true;\n      this._onDestroy.next(null);\n      this._onDestroy.complete();\n      this._resultDeferred.reject(new DialogBailOutError());\n    }\n  }\n\n  destroy() {\n    if (this.destroyed !== true) {\n      this.destroyed = true;\n\n      if (typeof this.overlayRef.instance.canDestroy === 'function') {\n        this.overlayRef.instance.canDestroy()\n          .catch( () => {})\n          .then ( () => this._destroy() );\n      } else {\n        this._destroy();\n      }\n    }\n  }\n\n  private _destroy(): void {\n    this._onDestroy.next(null);\n    this._onDestroy.complete();\n    this.overlayRef.destroy()\n  }\n\n  private _fireHook<T>(name: 'beforeClose' | 'beforeDismiss'): Promise<T> {\n    const gurad = this.closeGuard,\n          fn: Function = gurad && typeof gurad[name] === 'function' && gurad[name];\n\n    return Promise.resolve(fn ? fn.call(gurad) : false);\n  }\n}\n",
    "export class DialogBailOutError extends Error {\n  constructor(value?: string) {\n    super();\n\n    if (!value) {\n      value = 'Dialog was forced to close by an unknown source.';\n    }\n    this.message = value;\n  }\n}\n",
    "import {\n  ComponentRef,\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injector,\n  ViewContainerRef\n} from '@angular/core';\n\nexport interface CreateComponentArgs {\n  component: any;\n  vcRef: ViewContainerRef;\n  injector?: Injector;\n  projectableNodes?: any[][];\n}\n\nexport function createComponent(instructions: CreateComponentArgs): ComponentRef<any> {\n  const injector: Injector =  instructions.injector || instructions.vcRef.parentInjector;\n  const cmpFactory: ComponentFactory<any>\n    = injector.get(ComponentFactoryResolver).resolveComponentFactory(instructions.component);\n\n  if (instructions.vcRef) {\n    return instructions.vcRef.createComponent(\n      cmpFactory,\n      instructions.vcRef.length,\n      injector,\n      instructions.projectableNodes\n    );\n  } else {\n    return cmpFactory.create(injector);\n  }\n}\n\n",
    "/**\n * Simple object extend\n * @param m1\n * @param m2\n */\nexport function extend<T>(m1: any, m2: any): T {\n  var m: T = <T>{};\n  for (var attr in m1) {\n    if (m1.hasOwnProperty(attr)) {\n      (<any>m)[attr] = (<any>m1)[attr];\n    }\n  }\n\n  for (var attr in m2) {\n    if (m2.hasOwnProperty(attr)) {\n      (<any>m)[attr] = (<any>m2)[attr];\n    }\n  }\n\n  return m;\n}\n\n/**\n * Simple, not optimized, array union of unique values.\n * @param arr1\n * @param arr2\n */\nexport function arrayUnion<T>(arr1: any[], arr2: any[]): T[] {\n  return arr1\n    .concat(arr2.filter(v => arr1.indexOf(v) === -1));\n\n}\n\n/**\n * Returns true if the config supports a given key.\n * @param key\n */\nexport function supportsKey(keyCode: number, config: Array<number>): boolean {\n  if (!Array.isArray(config)) return config === null ? false : true;\n  return config.indexOf(keyCode) > -1;\n}\n\n/**\n * Given an object representing a key/value map of css properties, returns a valid css string\n * representing the object.\n * Example:\n * console.log(toStyleString({\n *     position: 'absolute',\n *     width: '100%',\n *     height: '100%',\n *     top: '0',\n *     left: '0',\n *     right: '0',\n *     bottom: '0'\n * }));\n * // position:absolute;width:100%;height:100%;top:0;left:0;right:0;bottom:0\n * @param obj\n */\nexport function toStyleString(obj: any | CSSStyleDeclaration): string {\n  return Object.getOwnPropertyNames(obj)\n    .map(k => `${k}:${obj[k]}`)\n    .join(';');\n\n  // let objStr = JSON.stringify(obj);\n  // return objStr.substr(1, objStr.length - 2)\n  //     .replace(/,/g, ';')\n  //     .replace(/\"/g, '');\n}\n\nexport class PromiseCompleter<R> {\n  promise: Promise<R>;\n  resolve: (value?: R|PromiseLike<R>) => void;\n  reject: (error?: any, stackTrace?: string) => void;\n\n  constructor() {\n    this.promise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n}\n\nexport interface Class<T> {\n  new(...args: any[]): T;\n}\n\nexport function noop() { }\n",
    "import { extend, arrayUnion } from './utils';\nconst PRIVATE_PREFIX = '$$';\nconst RESERVED_REGEX = /^(\\$\\$).*/;\n\nfunction validateMethodName(name: string) {\n  if (!name) {\n    throw new Error(`Illegal method name. Empty method name is not allowed`);\n  } else if (name in this) {\n    throw new Error(`A member name '${name}' already defined.`);\n  }\n}\n\n/**\n * Returns a list of assigned property names (non private)\n * @param subject\n */\nfunction getAssignedPropertyNames(subject: any): string[] {\n  return Object.getOwnPropertyNames(subject)\n    .filter(name => RESERVED_REGEX.test(name))\n    .map(name => name.substr(2));\n}\n\nexport function privateKey(name: string): string {\n  return PRIVATE_PREFIX + name;\n}\n\nfunction objectDefinePropertyValue(obj: any, propertyName, value: (value: any) => void): void {\n  Object.defineProperty(obj, propertyName, <any>{\n    configurable: false,\n    enumerable: false,\n    writable: false,\n    value\n  });\n}\n\n/**\n * Given a FluentAssign instance, apply all of the supplied default values so calling\n * instance.toJSON will return those values (does not create a setter function)\n * @param instance\n * @param defaultValues\n */\nfunction applyDefaultValues(instance: any, defaultValues: Object): void {\n  Object.getOwnPropertyNames(defaultValues)\n    .forEach(name => (<any>instance)[privateKey(name)] = (<any>defaultValues)[name]);\n}\n\n/**\n * Create a function for setting a value for a property on a given object.\n * @param obj The object to apply the key & setter on.\n * @param propertyName The name of the property on the object\n * @param writeOnce If true will allow writing once (default: false)\n *\n * Example:\n * let obj = new FluentAssign<any>;\n * setAssignMethod(obj, 'myProp');\n * obj.myProp('someValue');\n * const result = obj.toJSON();\n * console.log(result); //{ myProp: 'someValue' }\n *\n *\n * let obj = new FluentAssign<any>;\n * setAssignMethod(obj, 'myProp', true); // applying writeOnce\n * obj.myProp('someValue');\n * obj.myProp('someValue'); // ERROR: Overriding config property 'myProp' is not allowed.\n */\nexport function setAssignMethod<T>(obj: T, propertyName: string, writeOnce: boolean = false): void {\n  validateMethodName.call(obj, propertyName);\n\n  const key = privateKey(propertyName);\n  objectDefinePropertyValue(obj, propertyName, (value: any) => {\n    if (writeOnce && this.hasOwnProperty(key)) {\n      throw new Error(`Overriding config property '${propertyName}' is not allowed.`);\n    }\n    obj[key] = value;\n    return obj;\n  });\n}\n\n/**\n * Create a function for setting a value that is an alias to an other setter function.\n * @param obj The object to apply the key & setter on.\n * @param propertyName The name of the property on the object\n * @param srcPropertyName The name of the property on the object this alias points to\n * @param hard If true, will set a readonly property on the object that returns\n *        the value of the source property. Default: false\n *\n * Example:\n * let obj = new FluentAssign<any> ;\n * setAssignMethod(obj, 'myProp');\n * setAssignAlias(obj, 'myPropAlias', 'myProp');\n * obj.myPropAlias('someValue');\n * const result = obj.toJSON();\n * console.log(result); //{ myProp: 'someValue' }\n * result.myPropAlias // undefined\n *\n *\n * let obj = new FluentAssign<any> ;\n * setAssignMethod(obj, 'myProp');\n * setAssignAlias(obj, 'myPropAlias', 'myProp', true); // setting a hard alias.\n * obj.myPropAlias('someValue');\n * const result = obj.toJSON();\n * console.log(result); //{ myProp: 'someValue' }\n * result.myPropAlias // someValue\n */\nexport function setAssignAlias<T>(obj: T, propertyName: string,\n                                  srcPropertyName: string,\n                                  hard: boolean = false): void {\n  validateMethodName.call(obj, propertyName);\n\n  objectDefinePropertyValue(obj, propertyName, (value: any) => {\n    obj[srcPropertyName](value);\n    return obj;\n  });\n\n  if (hard === true) {\n    const key = privateKey(propertyName),\n      srcKey = privateKey(srcPropertyName);\n\n    Object.defineProperty(obj, key, <any>{\n      configurable: false,\n      enumerable: false,\n      get: () => obj[srcKey]\n    });\n  }\n}\n\n/**\n * Describes a fluent assign method.\n * A function that gets a value and returns the instance it works on.\n */\nexport interface FluentAssignMethod<T, Z> {\n  //TODO: Setting 'this' instead of Z does not work, this=ConfigSetter here...\n  (value: T): Z;\n}\n\n\nexport interface IFluentAssignFactory<Z> {\n  fluentAssign: Z;\n  setMethod(name: string, defaultValue?: any): IFluentAssignFactory<Z>;\n}\n\n/**\n * Represent a fluent API factory wrapper for defining FluentAssign instances.\n */\nexport class FluentAssignFactory<T> {\n  private _fluentAssign: FluentAssign<T>;\n\n  constructor(fluentAssign?: FluentAssign<T>) {\n    this._fluentAssign =\n      fluentAssign instanceof FluentAssign ? fluentAssign : <any>new FluentAssign();\n  }\n\n  /**\n   * Create a setter method on the FluentAssign instance.\n   * @param name The name of the setter function.\n   * @param defaultValue If set (not undefined) set's the value on the instance immediately.\n   */\n  setMethod(name: string, defaultValue: any = undefined): FluentAssignFactory<T> {\n    setAssignMethod(this._fluentAssign, name);\n    if (defaultValue !== undefined) {\n      (<any>this._fluentAssign)[name](defaultValue);\n    }\n    return this;\n  }\n\n  /**\n   * The FluentAssign instance.\n   */\n  get fluentAssign(): FluentAssign<T> {\n    return this._fluentAssign;\n  }\n}\n\n\n/**\n * Represent an object where every property is a function representing an assignment function.\n * Calling each function with a value will assign the value to the object and return the object.\n * Calling 'toJSON' returns an object with the same properties but this time representing the\n * assigned values.\n *\n * This allows setting an object in a fluent API manner.\n * Example:\n let fluent = new FluentAssign<any>(undefined, ['some', 'went']);\n fluent.some('thing').went('wrong').toJSON();\n // { some: 'thing', went: 'wrong' }\n */\nexport class FluentAssign<T> {\n  private __fluent$base__: new () => T;\n\n  /**\n   * Returns a FluentAssignFactory<FluentAssign<T>> ready to define a FluentAssign type.\n   * @param defaultValues An object representing default values for the instance.\n   * @param initialSetters A list of initial setters for the instance.\n   */\n  static compose<T>(defaultValues: T = undefined,\n                    initialSetters: string[] = undefined): FluentAssignFactory<T> {\n\n    return <any>FluentAssign.composeWith<FluentAssign<T>>(\n      new FluentAssign<T>(defaultValues, initialSetters));\n  }\n\n  /**\n   * Returns a FluentAssignFactory<Z> where Z is an instance of FluentAssign<?> or a derived\n   * class of it.\n   * @param fluentAssign An instance of FluentAssign<?> or a derived class of FluentAssign<?>.\n   */\n  static composeWith<Z>(fluentAssign: Z): IFluentAssignFactory<Z> {\n    return <any>new FluentAssignFactory<any>(<any>fluentAssign);\n  }\n\n  /**\n   *\n   * @param defaultValues An object representing default values for the underlying object.\n   * @param initialSetters A list of initial setters for this FluentAssign.\n   * @param baseType the class/type to create a new base. optional, {} is used if not supplied.\n   */\n  constructor(defaultValues: T | T[] = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    if (Array.isArray(defaultValues)) {\n      (defaultValues as Array<any>).forEach(d => applyDefaultValues(this, d));\n    } else if (defaultValues) {\n      applyDefaultValues(this, defaultValues);\n    }\n\n    if (Array.isArray(initialSetters)) {\n\n      initialSetters.forEach(name => setAssignMethod(this, name));\n    }\n\n    if (baseType) {\n      this.__fluent$base__ = baseType;\n    }\n  }\n\n  toJSON(): T {\n    return getAssignedPropertyNames(this)\n      .reduce((obj: T, name: string) => {\n        const key = privateKey(name);\n        // re-define property descriptors (we dont want their value)\n        let propDesc = Object.getOwnPropertyDescriptor(this, key);\n        if (propDesc) {\n          Object.defineProperty(obj, name, propDesc);\n        } else {\n          (<any>obj)[name] = (<any>this)[key];\n        }\n        return obj;\n      }, this.__fluent$base__ ? new this.__fluent$base__() : <any>{});\n  }\n}\n"
  ],
  "names": [
    "CommonModule",
    "NgModule",
    "ANALYZE_FOR_ENTRY_COMPONENTS",
    "EVENT_MANAGER_PLUGINS",
    "tslib_1.__extends",
    "DEFAULT_SETTERS",
    "DEFAULT_VALUES",
    "isDoc",
    "Injector",
    "Renderer2",
    "ElementRef",
    "TemplateRef",
    "Component",
    "Subject",
    "Directive",
    "ComponentFactoryResolver"
  ],
  "mappings": "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"
}
