/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
const DROP_IN_TYPE = {
    alert: 0,
    prompt: 1,
    confirm: 2,
};
export { DROP_IN_TYPE };
DROP_IN_TYPE[DROP_IN_TYPE.alert] = "alert";
DROP_IN_TYPE[DROP_IN_TYPE.prompt] = "prompt";
DROP_IN_TYPE[DROP_IN_TYPE.confirm] = "confirm";
/**
 * @record
 */
export function OverlayPlugin() { }
function OverlayPlugin_tsickle_Closure_declarations() {
    /* TODO: handle strange member:
    <T>(component: any, dialogRef: DialogRef<T>, config: OverlayConfig): DialogRef<any>;
    */
}
/**
 * @record
 */
export function OverlayConfig() { }
function OverlayConfig_tsickle_Closure_declarations() {
    /**
     * The context for the modal, attached to the dialog instance, DialogRef.context.
     * Default: {}
     * @type {?|undefined}
     */
    OverlayConfig.prototype.context;
    /** @type {?|undefined} */
    OverlayConfig.prototype.injector;
    /**
     * The element to block using the modal.
     * @type {?|undefined}
     */
    OverlayConfig.prototype.viewContainer;
    /** @type {?|undefined} */
    OverlayConfig.prototype.renderer;
    /**
     * Not used yet.
     * @type {?|undefined}
     */
    OverlayConfig.prototype.overlayPlugins;
}
/**
 * @record
 * @template T
 */
export function ModalComponent() { }
function ModalComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ModalComponent.prototype.dialog;
}
/**
 * @record
 */
export function CloseGuard() { }
function CloseGuard_tsickle_Closure_declarations() {
    /**
     * Invoked before a modal is dismissed.
     * @type {?|undefined}
     */
    CloseGuard.prototype.beforeDismiss;
    /**
     * Invoked before a modal is closed.
     * @type {?|undefined}
     */
    CloseGuard.prototype.beforeClose;
}
/**
 * @abstract
 */
export class OverlayRenderer {
}
function OverlayRenderer_tsickle_Closure_declarations() {
    /**
     * @abstract
     * @param {?} dialogRef
     * @param {?} vcRef
     * @param {?=} injector
     * @return {?}
     */
    OverlayRenderer.prototype.render = function (dialogRef, vcRef, injector) { };
}
//# sourceMappingURL=tokens.js.map
